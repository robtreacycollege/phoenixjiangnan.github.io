<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hexo - How to backup configs and blogs of Github Pages in a Github repository]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/29/hexo/Hexo-How-to-backup-configs-and-blogs-of-Github-Pages-in-a-Github-repository/</url>
      <content type="html"><![CDATA[<p>Github Pages is great - it allows you to set up static website on it and use it as a blog.</p>
<p>I’ve been using <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> as the blogging platform and static website generator, and <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> as its theme. One thing I really need when using Hexo is to back up all my blogs which are in markdown format, as well as Hexo configuration file, a bunch website configuration files, and the theme configuration file. The reason being that 1) self-managed blog generator is very easy to be messed up, and 2) I need to re-setup everything when switching computers, both cases requiring reconfigure Hexo and restore all contents and configurations.</p>
<p>So wouldn’t it be nice that we can use your <code>&lt;username&gt;.github.io</code> repository for Github Pages, and another repository, say <code>Hexo</code>, for all your blogs and configurations?</p>
<p>It’s a bit tricky, and I’m gonna show you how to do it.</p>
<h3 id="Backgrounds-What-files-should-be-backed-up"><a href="#Backgrounds-What-files-should-be-backed-up" class="headerlink" title="Backgrounds - What files should be backed up"></a>Backgrounds - What files should be backed up</h3><p>Let’s say Hexo lives in a dir called <code>Hexo</code>, and your theme is NexT, the file layout looks like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- Hexo</div><div class="line">    - _config.yml (Hexo config file)</div><div class="line">    - node_modules (Node.js code of Hexo and all plugins)</div><div class="line">    - public (generated static website data)</div><div class="line">    - scaffolds (template files)</div><div class="line">    - source</div><div class="line">        - _posts (all your blogs)</div><div class="line">        -      (other top-level sites you want to add, like `about`, `categories`, and `tags`)</div><div class="line">    - themes (Hexo themes)</div><div class="line">        - landscape (Hexo default theme)</div><div class="line">        - next (NexT theme)</div><div class="line">            - _config.yml (NexT&apos;s config file)</div></pre></td></tr></table></figure>
<h3 id="1-Init-Hexo-in-a-temp-folder"><a href="#1-Init-Hexo-in-a-temp-folder" class="headerlink" title="1. Init Hexo in a temp folder"></a>1. Init Hexo in a temp folder</h3><p>Let’s init Hexo in a temp folder called <code>hexocopy</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir hexocopy</div><div class="line">cd hexocopy</div><div class="line">hexo init</div></pre></td></tr></table></figure>
<h3 id="2-Init-your-official-Hexo-repository"><a href="#2-Init-your-official-Hexo-repository" class="headerlink" title="2. Init your official Hexo repository"></a>2. Init your official Hexo repository</h3><ul>
<li>Create a repository called <code>Hexo</code></li>
<li>Clone that repository to your local machine by either calling <code>git clone</code> or using Github Desktop App<br>  e.g.   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/phoenixjiangnan/Hexo</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="3-Copy-files"><a href="#3-Copy-files" class="headerlink" title="3. Copy files"></a>3. Copy files</h3><p>Copy <code>_config.yml</code>, <code>node_modules</code>, <code>scaffolds</code>, and <code>themes</code> folders from <code>hexocopy</code> to <code>Hexo</code>.</p>
<p>The reason for not initing Hexo itself from dir <code>Hexo</code> is that, command <code>init Hexo</code> will clone bits from a git repository and it will overwrite <code>.git</code> of the <code>Hexo</code> repository.</p>
<h3 id="4-Continue"><a href="#4-Continue" class="headerlink" title="4. Continue"></a>4. Continue</h3><p>Then, refer to <a href="https://phoenixjiangnan.github.io/2016/01/23/hexo/Hexo-How-to-install-hexo-on-Mac-with-github-pages/">this post</a> to continue setting up plugins, themes, and configs.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Repost - "Farewell, App Academy. Hello, Airbnb. (Part II)"]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/21/career%20and%20leadership/Repost-Farewell-App-Academy-Hello-Airbnb-Part-II/</url>
      <content type="html"><![CDATA[<p>I think this is a great great blog talking about, as a SDE, how to negotiate your salary package with tech companies.</p>
<hr>
<p>The original post is <a href="http://haseebq.com/farewell-app-academy-hello-airbnb-part-ii/" target="_blank" rel="external">here</a></p>
<hr>
<h2 id="Farewell-App-Academy-Hello-Airbnb-Part-II"><a href="#Farewell-App-Academy-Hello-Airbnb-Part-II" class="headerlink" title="Farewell, App Academy. Hello, Airbnb. (Part II)"></a>Farewell, App Academy. Hello, Airbnb. (Part II)</h2><p>April 14, 2016<br>airbnb<br>(Note: this is the second part of this story. You can read the first part here.)</p>
<p>Despite the rejection from 23AndMe, I kept pushing.</p>
<p>I applied to the all the big hiring websites. Hired rejected me from their platform. I got no bites anywhere on AngelList or LinkedIn—not even cold e-mails from recruiters. Nothing from WhiteTruffle or SmartHires.</p>
<p>Not a breath of interest anywhere.</p>
<p>I kept on. I asked friends, students, anyone I knew for referrals. I started reaching out to non-engineers. I asked anyone at all who worked at all at a tech company I found compelling.</p>
<p>I was nervous. Was I a fraud? At App Academy I might have seemed like a paragon, but to the rest of the world… was I simply not good enough?</p>
<p>A Swing of the Pendulum</p>
<p>In the middle of this flurry, I created an account on TripleByte. TripleByte is a young YC startup that’s trying to change tech hiring. From their manifesto:</p>
<p>“Credentials should not be used as a proxy for talent. Education and work history are meaningful but relying solely on them results in missing good programmers. Good programmers come from all types of background. It’s what you can do that matters, not where you went to school.”</p>
<p>Their interview process is completely blind to credentials. They decide to work with you purely on the basis of a technical assessment, then they learn about your credentials and then introduce you to startups they determine are a good match. Though they mostly work with experienced software engineers, I decided to give them a try.</p>
<p>To my surprise, I was able to pass their anonymous programming quiz and I was automatically invited to an onsite assessment. I showed up sheepishly to their office on King Street, and over an intense three hours I was grilled by my interviewer on coding, data structures, algorithms, and system design. At the end of the interview, he asked me what my computer science background was. None, I told him. I’d learned this stuff on my own and from teaching at App Academy. He was taken aback, and told me I was incredibly strong for only having studied this material less than a year.</p>
<p>The next day, TripleByte called me. They wanted to work with me! They’d introduce me directly to startups in the YC network. This was exciting—there were a ton of companies in YC network I wanted to talk to: Stripe, Twitch, Airbnb, to name a few.</p>
<p>Well, as it turned out, those companies weren’t really looking for someone like me. Since TripleByte is a two-sided process, they matched me up with companies for which there was a good mutual fit—Stripe, Twitch, or Airbnb were nowhere on that list. However, one of the companies they matched me with was Gusto, formerly Zenpayroll (and now a timely Zenefits competitor). I’d previously had my eye on them, so I was excited to see them matched up with me. They also lined up an onsite at a small YC startup called Flexport.</p>
<p>TripleByte had gotten things moving. But even more importantly, they had given me back some confidence. TripleByte wanting to work with me was a small affirmation, to be sure—it wasn’t even a job offer yet. But it felt like I’d finally pierced the membrane. If these guys thought I was good… I must have it. I just gotta prove that to everyone else now.</p>
<a id="more"></a>
<p>Onsites and Offers</p>
<p>I set off to the onsites. The first of the two, Flexport, was a freight company. In many ways, it seemed more like a logistics company than it was about technology company. But I felt like I performed well in the onsite.</p>
<p>A couple days later: no offer.</p>
<p>I was supposed to be upset, but by now this was an old game. I brushed it off. Each interview I could feel was making me better at interviewing. It was getting easier and easier to relax, to ask for what I needed, to make jokes, to grill my interviewers. I was getting into my rhythm now.</p>
<p>Rejected? It is what it is. Just keep putting in the practice, I told myself.</p>
<p>Next was Gusto. They were a groovy company (no shoes in the office!), and the interview was a delight. They told me they’d get back to me within a week.</p>
<p>Shortly afterward, an onsite from Yelp pulled through (my referral was through a non-engineer!). I went onsite and completely rocked it. Every interviewer was clearly impressed, and they immediately asked me for my references afterward. Perhaps things were looking up! It seemed like one of Gusto or Yelp might actually convert into an offer.</p>
<p>All the while, I kept putting more irons in the grill (gotta keep that kitchen running), and kept studying up on algorithms and system design. Around then, I got an e-mail in my inbox from TripleByte:</p>
<p>Saw you’re starting to get some interviews booked with companies!</p>
<p>I actually wanted to throw another company option into the mix, us :) We’re hiring to build out our engineering team, we really enjoyed meeting you and would love to talk more about that if its of interest. Just let me know and I can give you a call tomorrow!</p>
<p>Shit. Really?</p>
<p>I hadn’t considered joining a super small company. I’d already spent the last year at a 25 person startup; TripleByte was only 5 people. But I knew entrepreneurship was somewhere in my future, and eventually I’d be joining a super early stage startup (if not founding it myself). TripleByte was a fantastic company, already with huge traction in the tech hiring space. Their founder, Harj Taggar, was a former YC partner, and one of the most charismatic and capable people I’ve met.</p>
<p>They wanted me. A company actually wanted me! A good one! I laugh now, but it was a revelation to me. They invited me in for another onsite so the rest of the team could vet me.</p>
<p>Before I could savor it too long, I received a phone call soon after. Yelp recruiter. Yelp wanted to make an offer.</p>
<p>And with that, the first domino fell.</p>
<p>Then came the Gusto recruiter. Gusto wanted to make an offer.</p>
<p>A TripleByte offer came soon in tow. First I had nothing, now I had three offers in front of me.</p>
<p>And yet, it was a little bittersweet. Yelp’s offer was 105K salary with ~17K/yr in equity. Gusto hit around 115K with comparable equity in options, and TripleByte was in the same ballpark.</p>
<p>Now, if you’re outside tech (or the Bay Area), those might sound like knock-down amazing offers. But all of these offers were lower than I was currently making, and they were all for explicitly junior roles.</p>
<p>Still, 105K might sound like a lot of money to be miffed about. But in San Francisco, with the second highest cost of living in the US (behind only Manhattan), the purchasing power of $105K in SF is the same as making about $57K in Austin, Texas. I also still owed App Academy tuition (18% of my first year’s salary), which was deferred because of my employment by App Academy. That 18% would come due on whatever offer I accepted. And of course on top of that, I’d also be donating a third of my income.</p>
<p>But really, what stuck out most to me is that I’d be leaving App Academy to a downgrade. I would be no better off than if I’d just joined those companies a year before. My goal, somewhere in my head, was to make at least more than I was making now. An arbitrary benchmark in a lot of ways, but it was hard to give up.</p>
<p>Was what I’d learned over the last year working at App Academy not worth anything on the market?</p>
<p>Maybe not. Perhaps I just had to accept it.</p>
<p>Now that I had offers in hand, it was time to turn the crank. I reached out to every company I was talking to and told them I’d just received several offers, but was very much interested in moving forward. With that, suddenly recruiters started tripping over themselves to get me on site. I was no longer the ugly boy at the party.</p>
<p>I started mowing down onsites. My performance and experience were no different, yet I was treated completely differently. Phone screen from Google. Gusto raised their offer. Phone screen from Stripe. Yelp raised their offer. TripleByte raised their offer. Then the phone screen at Google converted to onsite.</p>
<p>Bam. Suddenly Google was in sight. I felt like Captain Ahab: for me, Google was the Big One.</p>
<p>My Google recruiter worked for the Youtube team (headquartered in San Bruno). That meant if I were to receive an offer, the Youtube team would have first dibs on me. The interview process is standardized Google-wide though, and Google would ultimately be my employer. I spent the weekend before practicing and took the day off from work so I could head down to San Bruno for the interview.</p>
<p>I arrived that morning at the San Bruno BART stop, hardly having gotten any sleep the night before, and walked 30 minutes to the Youtube campus in downtown San Bruno. It was still early, so I sat in the lobby and read over my notes from Cracking the Coding Interview for some thirty minutes, trying to keep my cool. Finally, the recruiter came out and met me and brought me to the interview room.</p>
<p>Unequivocally, Google was the toughest and most nerve-wracking interview I’ve ever done. The problems were complex and challenging, all abstract and extremely algorithms-heavy. They didn’t ask me a single thing about architecture, systems design, web development—all they cared was that I could solve hard abstract computer science problems. All the interviewers—clearly brilliant (and all older white men)—were stony and tight-lipped about my performance.</p>
<p>I walked back to the BART station that evening, exhausted and completely drained, without any idea whether I’d done well or bombed.</p>
<p>A week later, I got a phone call from the Google recruiter.</p>
<p>I was in. Google wanted me.</p>
<p>Their offer was reasonably strong—120K salary with a 15% guaranteed end-of-year bonus and 24K/yr in RSUs. The total package came out to 162K/yr annualized—much stronger than my other offers, but around the ballpark of what fresh graduates of App Academy who landed at Google would earn. In other words, it seemed they didn’t place me very high on their spectrum. But whatever, right? It was Google! I got Google!</p>
<p>With that, the floodgates opened. Just the whiff of the Google name got recruiters into a frenzy. Companies that wouldn’t even look at me now bent over backwards to expedite me through their funnels.</p>
<p>Stripe onsite. Uber phone screen. Twitch phone screen. Uber onsite. Stripe offer. Twitch onsite. Uber offer. Twitch offer. The offers came in, stronger and stronger. All the irons I’d put in the fire were now going off like Roman candles.</p>
<p>Which left me with the question of: well, shit, what do I do with them?</p>
<p>Deciding Factors</p>
<p>As the offers came in, I weighed them seriously. Every single company I talked to was compelling and had aspects that made me want to work there.</p>
<p>But in the end, it was hard to argue against Google being the best choice.</p>
<p>The first and most visceral reason was I’d never have to deal with this BS again. Google would be a golden mark on my resume—like the Harvard of software engineering. Never again would I have to worry about credentials, or people tossing my resume without reading it. Google is the one name I’d be able to brandish anywhere as undeniable proof of my legitimacy as an engineer.</p>
<p>Part of it had to do with my ego, no doubt. But this job search had shown me that part of it was very real and material.</p>
<p>Of course, then there was the compensation. Google would be hard to beat. Like Yelp, Google was a mature public company, so its equity compensation was as solid as cash. That liquidity is an important factor when it comes to earning-to-give—it means I can give sooner, which has compounding positive impact and flow-through effects.</p>
<p>On top of that, Google was the only company to do a donation matching program, up to $6,000. That’s an extra $6,000 a year that goes to charity that otherwise wouldn’t. When it came to earning-to-give and building my career, when I looked at the numbers, it seemed clear I couldn’t justify choosing any company other than Google.</p>
<p>At that point, it seemed like a done deal. Companies like Uber, Twitch, Stripe, TripleByte, were all awesome companies. But it had to be Google.</p>
<p>Google! I was on cloud nine. I was ready for everything to wrap up as I figured out which bus I would be taking to San Bruno, planned out my morning workout regimen, and all the rest.</p>
<p>But the irons in the fire were still shooting off sparks. Offers improved, sometimes without any prompting on my part. They became increasingly stronger and stronger. Soon, they started overtaking Google’s.</p>
<p>I hadn’t negotiated with Google at all, so I knew the Google offer would move upward. I expected Google to settle somewhere around 180K all-in, which would be a healthy jump upward. But I started to really think: what would it take for me to turn down Google?</p>
<p>It was a tough question. Because I was in a competitive situation, Google had allowed me to start chatting with Youtube hiring managers and essentially pick my team.</p>
<p>I was offered a spot on the Youtube Red team, doing back-end work in C++. A small and fast-moving team in one of Youtube’s shiniest new projects. It would be tough, certainly, to learn the technology and start becoming productive. But I’d be doing world-class engineering, and have a world-class company on my resume.</p>
<p>And yet, I couldn’t deny: there was something energetically captivating about each and every startup I talked to. There was something deeper about them that attracted me, something was missing from Google. Not just the growth and the responsibility, or the greater self-determination. Each of these companies were innovators, creating new value in an uncertain future, and—they needed my help.</p>
<p>They actually needed my help. That was captivating. And it was hard to ignore that I didn’t really feel that in my interactions with Google.</p>
<p>But Google continually assured me that they’d be able to beat any other startup’s offers. It seemed like a decision they were happy to make for me. As other companies kept bidding up, the Google offer moved up to 185K. And as I was moving into final negotiations, they assured me there was still more room for the offer to grow.</p>
<p>More room to grow? How bad did Google actually want me?</p>
<p>Enter Airbnb</p>
<p>It’s funny. I had initially been rejected by an Airbnb recruiter for a different position more than a month before. Airbnb wasn’t even on my radar. So when Ned, the CTO of App Academy told me he’d put me in touch with his friend David at Airbnb, I mostly brushed it off.</p>
<p>Upon Ned’s glowing recommendation, David met with me and agreed to refer me into Airbnb. With his referral, I was promptly un-rejected. David was a senior engineer there, and his recommendation seemed to carry a lot of clout (the Google offer helped of course), so I was quickly shuffled through to the phone screen.</p>
<p>I wasn’t expecting to do too well—I’d read in many places that Airbnb had an extremely challenging interview, and that they were more credentials-focused than other companies. So much so that I’d never heard of a bootcamp student getting placed at Airbnb. Apparently they used to post on their job listings: “no bootcampers, please.”</p>
<p>On the phone interview, I received a pretty challenging problem—I remember thinking when I got it that I was going to mess it up. But somehow I solved it with ease, and all of my outputs were correct. I’m not sure whether to attribute it to the accruing notches on my belt or to blind luck, but I aced the phone screen and they eagerly brought me on-site.</p>
<p>I’ve always had a lot of respect for Airbnb as a company—I was an early Airbnb user myself—but even as I was walking into their large and beautiful campus, my mind was already made up. I was joining Google.</p>
<p>The Airbnb interview was long and challenging. But, unlike the Google interview, it was invigorating. I met with payments engineers, infrastructure engineers, even a political analyst who worked on European Airbnb regulation. I was challenged on my understanding of algorithms, of caching layers and database indices, I was questioned on my beliefs about the human right of free movement across borders and on the future of travel.</p>
<p>I loved it. I loved everyone I met. Even more, I loved the spirit of Airbnb. Everything about it—the beautiful cosmopolitan office built as an homage to Airbnbs around the world, the people, the technology, the raw energy and drive toward connecting the world more tightly together.</p>
<p>Airbnb’s mission is simply, “Belong Anywhere.” I’ve been both an Airbnb guest and a host for years, and before that I was an avid Couchsurfer and Couchsurfing host. I believe strongly in the culture of sharing and interconnection.</p>
<p>But even so. Yeah, Airbnb was pretty cool. (And walking distance to my house!) But still, Google is Google—the tech equivalent of getting an invitation to the Justice League. How could I turn that down?</p>
<p>After the interview, Airbnb was slow to get back to me. Being a challenging interview, I was unsure whether an offer would come through—much less, if it could change anything. I’d already finished my last day working at App Academy, and was now officially between jobs. I decided to head home for a bit to wrap up my negotiations and rest up before starting my next gig. I had a short deadline until I wanted to start, and let each of the companies know. It was now time to go into final negotiations.</p>
<p>Turning Point</p>
<p>I get the phone call. Airbnb wants to make an offer. I have less than a week, but they’re scrambling to piece everything together to meet my deadline. They’ll get back to me.</p>
<p>They get back. Initial offer, 220K.</p>
<p>220K?</p>
<p>Jesus Christ.</p>
<p>What??</p>
<p>What on earth are they doing offering me 220K? This company must be out of its goddamn mind. No wonder tech is so overvalued. I lost my shit.</p>
<p>I had to take this really seriously now. Airbnb’s offer was highly illiquid, but they were offering me a very strong base salary: 130K, 25K signing bonus, and 65K worth of RSUs a year. Not as liquid as Google, no doubt. But Airbnb as a company was barreling toward an IPO, already worth more than 23B, and was of the most robust tech companies from a business and revenue perspective. Besides, if I’m risk-neutral—which I think I am—then it’s a clearly better deal.</p>
<p>I began really weighing things. Google… was Google. I already knew its advantages.</p>
<p>But at Airbnb, I’d clearly be able to take on more responsibility more quickly. The engineering organization was slated to double within a year. I was already very familiar with Airbnb’s tech stack, mostly Ruby on Rails, since it was what I’d been teaching at App Academy and developing on for the last year. It was also younger company. Unlike Google and its “lifers,” this was a place where I’d be more likely to meet people in an earlier stage in their lives—and meet potential co-founders.</p>
<p>Of course, it was also walking distance (the ol’ commute-less commute).</p>
<p>But, seemingly more affecting than all of those things—they needed me. At Google, I’d be a smart person sitting in a smart person chair. I’d be doing serious engineering work no doubt, but by the time I’d be done, I’d be walking away having changed little more than my own resume.</p>
<p>At Airbnb, they really needed my help. They believed I could make a difference. For the life of me I couldn’t figure out why, but they made it clear. They thought I was valuable, and they wanted someone with my experience.</p>
<p>God, I’m a sap.</p>
<p>I had less than a week to decide. I didn’t know how to make the decision. So I started trying to evaluate everything objectively. I tried estimating the value of different outcomes. I tried to ascribe weights and calculate the value of things like network, branding, growth, faster promotion, potential for meeting co-founders, likelihood of IPOing. But nothing was convincing. It felt like an impossible choice. Before long it was Thursday night and I had to make a decision before the end of day Friday. There was a lot of cursing.</p>
<p>Google was assuring me that they’d raise their number by Friday morning. That night I couldn’t sleep. I repeatedly got out of bed, pacing back and forth rehearsing conversations, frantically checking my e-mail and re-tweaking Excel models. What the fuck? Just a few weeks ago I could barely get anyone to look at my resume. My first offer barely cleared 120K. 220K? What on earth is Airbnb thinking??</p>
<p>That night and the following morning, I called up trusted friends and asked them what I should do. I was on the phone off and on for several hours through that morning. The consensus was overwhelming.</p>
<p>Everyone thought I should go with Airbnb.</p>
<p>Final Hours</p>
<p>That morning, worn thin with sleep deprivation, I got a call from Google. They were raising the offer to 211K. That’s 211K. Liquid. I’d receive all of that before a year’s end. I remember scratching my chin and just laughing. God fucking dammit. I thanked my recruiter, and let her know I’d get back to her before the end of the day.</p>
<p>I knew Google would have a strong final offer, maybe upwards of 200K, but 211K was stronger than I’d expected. Still, it shouldn’t sway my decision, right? Was this really a decision within a margin of 10K in EV? No one else seemed to think so. If Airbnb was the winner, it should still be the winner now.</p>
<p>Right?</p>
<p>I told myself: if I’m choosing Airbnb, just remember. 220K was their initial offer. That means there’s money on the table. If there’s one thing this job search had taught me, is that there’s always, always more money on the table.</p>
<p>As an instructor at App Academy I ceaselessly pushed my students to negotiate hard, without fear of being rejected, looking stupid, or being perceived as greedy. Employers negotiate even harder and with more power behind them, and so it’s up to candidates to tip the scales back in the direction of employees. As absurd as it seemed now, given an offer of 220K, I had to take my own advice and ask for more. I rehearsed it again and again in my head.</p>
<p>But if I’m going to ask for more, I shouldn’t just ask for 10K more. I should expect to be met somewhere in the middle, right? I’ve got to be aggressive. But I don’t have any stronger offers and they know that, so maybe it’s stupid.</p>
<p>Fuck.</p>
<p>I called my recruiter from Airbnb and, half expecting to get laughed at, announced: “If Airbnb can move up the RSUs by 30K to hit a total of 250K in all-in compensation, then I’ll sign.”</p>
<p>“250K? Do I have your word?” she said.</p>
<p>“My word.”</p>
<p>“Okay. Let me see what I can do. I’ll get back to you before evening.”</p>
<p>The rest of the afternoon was a blur of habitually checking my phone, email, anything for some word of what would happen. I was driving my car into Austin, bumper-to-bumper in traffic when I got the phone call. It was the Airbnb recruiter.</p>
<p>“Haseeb? This is Janice.”</p>
<p>“Janice! What’s the word??” I held my breath.</p>
<p>“I made the magic happen. 250K. 130K salary, 25K signing, 95K a year in RSUs. So you’re in?”</p>
<p>I almost swerved into the car next to me from punching the air so hard.</p>
<p>“I’m in.”</p>
<p>So that’s the story. I start on Monday.</p>
<p>Overview</p>
<p>On the whole, I’m really excited to be joining the Airbnb family. It’s definitely a different path than Google. Most significantly, there’ll be less that I can donate to charity in a year’s time. But not only is the total value of the assets greater, I’m also convinced that in the longer term, Airbnb will be the better move for my career.</p>
<p>Stock in a private company is of course still a valuable asset—I just won’t be able to donate a third of their value until a liquidation event (hopefully an IPO). But my pledge to donate 1/3rd of all of my income, including my salary, doesn’t change. Ultimately, this will be a better move in terms of EV, provided some discounting for the fact that I’ll have to donate later in the future.</p>
<p>That said, the brand of the company was obviously an explicit consideration for me. From that perspective, my choice to join Airbnb might seem a little strange to some. In many parts of the world, Google and Airbnb wouldn’t even be said in the same sentence. But within the SF ecosystem, Airbnb and Google are largely considered to be in the same tier of engineering organizations. I’d even argue that among certain crowds, Airbnb would be a stronger signal on one’s resume than Google would be.</p>
<p>So I think, on the whole, I really got lucky with a company that’s a perfect fit for what I’m looking for.</p>
<p>One other thing I want to add. I know some might think it’s weird to be sharing your compensation in a public venue like this. I take my inspiration from Jeff Kaufman (who ironically works for Google, albeit in Boston), who donates 50% of his income to EA charities and catalogues it publicly every year.</p>
<p>The norm of keeping compensation secret is a very American one. And I think on the whole, it stifles transparency and open dialogue about things like class and economic inequality. But more poignantly, it makes it harder to be transparent and galvanizing about earning-to-give, which is very much one of my goals.</p>
<p>I explicitly entered into tech a year ago because I believed it was a place where I’d be uniquely well-suited to create a lot of value. It’s an industry where smart, driven young people can quickly earn an outsized income. Seeing that opportunity, I decided to pivot into tech and make building a career here an active aim of my life. And I hope to, as long as I can, continue to speak openly about my compensation and give even more of it away.</p>
<p>So that’s enough of soapboxing. Here are some stats.</p>
<p>A Few Statistics</p>
<p>By the end of my process, I had received a total of 8 job offers (not including re-negotiation with App Academy). I had completed 12 onsites total, so my I had a total onsite-to-offer rate of 66%.</p>
<p>Considering only the onsites after receiving my first offer however, my onsite-to-offer rate was 87%.</p>
<p>Of my offers, 2 of them were through TripleByte (one from TripleByte itself, the other, Gusto, through their introduction). The remainder were through referrals. Two of the 6 referrals were non-engineering referrals.</p>
<p>There were 12 companies where I was referred but did not receive an offer. 25% of the companies I was referred to didn’t even talk to me. But that was a lot better than the base rate: overall, 53% of companies I applied to through any means rejected me without even talking to me.</p>
<p>In the end, I didn’t get a single offer through a raw application. Every single offer came through a referral of some kind. (This I did not expect, and strongly influences the advice I’d give to a job-seeker.)</p>
<p>The differential between my lowest (initial) offer and my highest (final) offer was, in total value, an increase of 104%. That is, my compensation literally more than doubled by not accepting my first job offer. (I expect this to be highly anomalous, since companies had a lot of discrepancies in where they leveled me on their engineering ladders.)</p>
<p>The largest percentage increase was also with my lowest initial offer, Yelp. They started at a total annualized value of 122.5K (105K salary + 17.5K stock), and their final offer was at a total value of 180K, an increase of $57.5K, or 47%. Again, I expect this to be anomalous, because I literally jumped in engineering levels (they initially offered me a junior role, then re-evaluated). The second largest increase was from Google, moving up $48.6K for an increase of 30%. This one is perhaps less anomalous. I’m not sure.</p>
<p>On all but two of my offers, I negotiated. The average delta for company offers at which I negotiated was +$30,671 for the final offer. So, negotiation pays, boys and girls. More on that later.</p>
<p>In total, I received offers from Airbnb, Youtube (Google subsidiary), Uber, Twitch (Amazon subsidiary), Yelp, Stripe, Gusto, and TripleByte. The average value of the final offers was approximately $193,600. The salaries were all approximately the same at $130K. (Only one company offered me a base salary of $125K.) I should also note that I negotiated more aggressively on RSUs and signing bonus. I’ll also talk more about that later.</p>
<p>There’s obviously a lot in this department, but this blog post is already long enough. I’m going to write one more post before I start at Airbnb this coming Monday: my key takeaways from this job search, and advice to current job seekers. I’ll also talk more about my thoughts on negotiation in that upcoming post.</p>
<p>Look forward to it!</p>
<p>Update (4/25/2016)</p>
<p>This post has gotten a lot of unexpected attention, so I want to clarify a couple things.</p>
<p>First (and this should go without saying), everything mentioned in my story are my own thoughts and words, and though I am employed by Airbnb, I in no way speak on their behalf. (It’s legally important to say that, I guess.)</p>
<p>That said, I realize that pay transparency is a controversial subject, and I seem to have stirred up a hornet’s nest. So I want to make clear a few things.</p>
<p>Many people seem to think that publicly disclosing your compensation is a fireable offense, and that Airbnb will fire me now that they see I’ve posted this. Neither of those statements are true.</p>
<p>It’s explicitly illegal under the National Labor Relations Act to fire workers for discussing their compensations, and it has been illegal in American law since 1935. This kind of policy is known as “Pay Secrecy,” and such policies have been repeatedly struck down by courts.</p>
<p>See: Pay Secrecy Policies at Work are Often Illegal and Misunderstood.</p>
<p>And yet, pay secrecy is considered the norm in American culture.</p>
<p>There was a time in American history when income tax records were in the public domain. Even now, there are many cultures in which talking about your compensation is not at all considered wrong or disrespectful. Rather, it’s seen as an important part of creating a transparent society.</p>
<p>Pay secrecy is an easy fallback, because talking about social inequality and pay differentials is uncomfortable. It’s especially uncomfortable in American culture, where your salary often serves as a signal of your social status.</p>
<p>But pay secrecy carries with it a lot of costs. It can hide gender and racial discrimination, systemic exploitation, and nepotism. It’s easy to sweep these problems under the rug and not want to look at them. And for what it’s worth, I have a lot of respect to Airbnb for openly working toward solving these problems in the culture they’re building.</p>
<p>These are complicated problems. I don’t have all the answers. But because I am committed to effective altruism and publicly earning-to-give, I will continue to be open every year about how much I donate (and by association, how much I earn), insofar as it’s possible.</p>
<p>(For further reading, check out Your Coworkers Should Know Your Salary, published in the Harvard Business Review. Also, my response to a commenter on how disclosing my salary might be unwise or affect colleagues at Airbnb.)</p>
<p>The second thing I want to say is that for some reason, many people are drawing the conclusion that I primarily got a job at Airbnb by being really good at negotiating, or gaming the system, or something like that.</p>
<p>If you have ever done a software engineering interview, you would know that this is completely absurd. There is no way to negotiate or charm someone into passing a software engineering interview. Much less 8 of them.</p>
<p>If you don’t know the ins and outs of object-oriented programming, database design, asymptotic analysis, binary search trees, or how to improve the cache efficiency of an algorithm, then you’re not going to pass a computer science-heavy interview at a top company. You don’t even have a shot at it.</p>
<p>The moral of my story is not “get really good at negotiating and you’ll get a great job.” Negotiating is important, and I certainly encourage everyone to negotiate!</p>
<p>But first, get good at the thing you’re doing. Then worry about negotiating.</p>
<p>I moved to San Francisco from Austin, Texas about a year ago because I decided I was going to earn-to-give. Since then I’ve been relentlessly trying to build a new career for myself, so I could earn more and donate more to charity.</p>
<p>Entering into App Academy, barely knowing the basics of Ruby, I came into the office and grinded every day, spending 80+ hour weeks just coding and studying. I’d come in at 9AM in the morning and leave around midnight, 7 days a week, sleeping in a bunk bed in SOMA in a 200 square feet shared room.</p>
<p>It’s certainly true that I probably have a mind that’s well-suited for coding. But it’s also true that I outworked almost everyone who was in my cohort. And when I was hired by App Academy to help teach the course, I continued working as hard as I could to get good at this.</p>
<p>I still stayed late in the evenings, I still came into the office on weekends alongside the students just to continue coding and learning more. I started an algorithms study group in the evenings where I taught students new algorithms that I had read about, and wrote specs and instructions to guide them through the implementation. I took over our entire algorithms curriculum and taught well over 100 students the basics of data structures and algorithms.</p>
<p>And of course, I was scared that none of this would matter. That having been an English major, having a non-traditional background, being 26 and too old to transition into tech, competing against 20 year olds who’d been coding since they were 10, I thought I must have no chance.</p>
<p>Thankfully, I was wrong. And I’m very, very lucky that I was wrong, because I was almost right.</p>
<p>So if there’s one takeaway I want people to have, it’s not “here’s why it pays to be a master negotiator.” I’m going to talk a lot more about negotiation advice in my next blog post, but that’s almost a detail compared to the larger point.</p>
<p>The real takeaway should be: get so good that they can’t ignore you. Because once you are, they won’t.</p>
<p>-Haseeb</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Network - TCP and Socket]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/19/java/network/Java-Network-TCP-and-Socket/</url>
      <content type="html"><![CDATA[<p>The <code>Transmission Control Protocol (TCP)</code> is a core protocol of the Internet protocol suite.</p>
<p>It originated in the initial network implementation in which it complemented the <code>Internet Protocol (IP)</code>. Therefore, the entire suite is commonly referred to as <code>TCP/IP</code>. </p>
<p>TCP provides <code>reliable</code>, <code>ordered</code>, and <code>error-checked</code> delivery of a stream of octets between applications running on hosts communicating over an IP network.</p>
<p>Major Internet applications such as the World Wide Web, email, remote administration and file transfer rely on TCP. Applications that do not require reliable data stream service may use the <code>User Datagram Protocol (UDP)</code>, which provides a connectionless datagram service that emphasizes reduced latency over reliability.</p>
<h2 id="Socket-and-ServerSocket"><a href="#Socket-and-ServerSocket" class="headerlink" title="Socket and ServerSocket"></a>Socket and ServerSocket</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html" target="_blank" rel="external">Socket</a> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Socket</span></span></div><div class="line"><span class="keyword">extends</span> <span class="title">Object</span></div><div class="line"><span class="keyword">implements</span> <span class="title">Closeable</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This class implements <code>client sockets</code> (also called just <code>sockets</code>).</p>
<p>A socket is an endpoint for communication between two machines.</p>
<p>The actual work of the socket is performed by an instance of the <code>SocketImpl</code> class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall.</p>
</blockquote>
<hr>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html" target="_blank" rel="external">ServerSocket</a> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocket</span></span></div><div class="line"><span class="keyword">extends</span> <span class="title">Object</span></div><div class="line"><span class="keyword">implements</span> <span class="title">Closeable</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This class implements <code>server sockets</code>. </p>
<p>A server socket waits for requests to come in over the network. It performs some operation based on that request, and then possibly returns a result to the requester.</p>
<p>The actual work of the server socket is performed by an instance of the <code>SocketImpl</code> class. An application can change the socket factory that creates the socket implementation to configure itself to create sockets appropriate to the local firewall.</p>
</blockquote>
<h2 id="Communication-between-Client-and-Server"><a href="#Communication-between-Client-and-Server" class="headerlink" title="Communication between Client and Server"></a>Communication between Client and Server</h2><h3 id="Client-Side-Procedures"><a href="#Client-Side-Procedures" class="headerlink" title="Client Side Procedures"></a>Client Side Procedures</h3><ol>
<li>Create TCP client sockets with <code>Socket</code> object. Specify the destination of targeted server when initializing clients</li>
<li><p>If clients are created successfully, it means the data transportation channel is established. The channel is socket stream, which is constructed underlayer. Since it’s a stream, it indicates that there are both input stream and output stream.</p>
<p> You can get those two streams from <code>Socket</code> objects by calling <code>getOutputStream()</code> and <code>getInputStream()</code>.</p>
</li>
<li>Use the stream to transport data</li>
<li>Close resources</li>
</ol>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span></span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Client sends data to Server</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create client socket</span></div><div class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>, <span class="number">10002</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 2. Get the output stream from socket</span></div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Use output stream to write data to Server </span></div><div class="line">        out.write(<span class="string">"TCP demo!"</span>.getBytes());</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Close resources</span></div><div class="line">        socket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Server-Side-Procedures"><a href="#Server-Side-Procedures" class="headerlink" title="Server Side Procedures"></a>Server Side Procedures</h3><ol>
<li>Create server side socket service by creating <code>ServerSocket</code> object</li>
<li><code>ServerSocket</code> must provide a <code>port</code> for client to connect to</li>
<li>Get the socket object that tries to connect</li>
<li>Read data from client via the socket object’s stream</li>
<li>Close resources</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">        Get the data from client, and print on console</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create server side socket service by creating `ServerSocket` object</span></div><div class="line">        <span class="comment">// 2. `ServerSocket` must provide a `port` for client to connect to</span></div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10002</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Get the socket object that tries to connect</span></div><div class="line">        Socket s = ss.accept();</div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Read data from client via the socket object's stream</span></div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        </div><div class="line">        String text = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</div><div class="line">        System.out.println(ip + <span class="string">" Server: "</span> + text);</div><div class="line">        </div><div class="line">        <span class="number">5</span>. Close resources</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Interaction-between-Client-and-Server-Sending-Data-back-and-forth"><a href="#Interaction-between-Client-and-Server-Sending-Data-back-and-forth" class="headerlink" title="Interaction between Client and Server - Sending Data back and forth"></a>Interaction between Client and Server - Sending Data back and forth</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server Side</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10002</span>);</div><div class="line">        Socket socket = serverSocket.accept(); <span class="comment">// This is a blocking method</span></div><div class="line">         </div><div class="line">        String ip = socket.getInetAddress().getHostAddress();</div><div class="line">        InputStream in = socket.getInputStream();</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        </div><div class="line">        String text = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</div><div class="line">        System.out.println(ip + <span class="string">"  "</span> + text);</div><div class="line">         </div><div class="line">        <span class="comment">// Write through ServerSocket's OutputStream to client socket's InputStream </span></div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">        out.write(<span class="string">"Received"</span>.getBytes());</div><div class="line">         </div><div class="line">        socket.close();</div><div class="line">        serverSocket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client Side</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo2</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>, <span class="number">10002</span>);</div><div class="line">         </div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">        out.write(<span class="string">"TCP demo!"</span>.getBytes());</div><div class="line">         </div><div class="line">        <span class="comment">// Use socket's InputStream to read data sent from server</span></div><div class="line">        InputStream in = socket.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">         </div><div class="line">        String text = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        socket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Text-Conversion"><a href="#Text-Conversion" class="headerlink" title="Text Conversion"></a>Text Conversion</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransServer</span></span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Analysis:</div><div class="line">        1. Create ServerSocket</div><div class="line">        2. Get Socket obejct</div><div class="line">        3. Get socket's InputStream, and decorate it </div><div class="line">        4. Get socket's OutputStream, decorate it, and write data through it</div><div class="line">        5. Close resources</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create ServerSocket</span></div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10004</span>);</div><div class="line">       </div><div class="line">        <span class="comment">// 2. Get Socket obejct</span></div><div class="line">        Socket s = ss.accept(); <span class="comment">// Blocking!</span></div><div class="line">         </div><div class="line">        <span class="comment">// Get IP</span></div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">        System.out.println(ip+<span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Get socket's InputStream, and decorate it </span></div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Get socket's OutputStream, decorate it, and write data through it</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line = bIn.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            System.out.println(line + <span class="string">"...."</span> + line.toUpperCase());</div><div class="line">            out.println();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 5. Close resources</span></div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransClient</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Analysis:</div><div class="line">        </div><div class="line">        Client Side:</div><div class="line">        1. Need a socket endpoint</div><div class="line">        2. data source: keyboard input</div><div class="line">        3. data destination: socket's OutputStream</div><div class="line">        4. data source from server: socket's InputStream</div><div class="line">        4. print data on console</div><div class="line">        6. all data processed is text data</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>, <span class="number">10004</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Get data from keyboard</span></div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">         </div><div class="line">        <span class="comment">// socket's OutputStream</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(), <span class="keyword">true</span>);  <span class="comment">// `true` means supporting continue to write</span></div><div class="line">         </div><div class="line">        <span class="comment">// Read data from server via socket's InputStream</span></div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"over"</span>.equals(line)) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">         		   </div><div class="line">        	<span class="comment">//out.print(line + "\r\n");</span></div><div class="line">            <span class="comment">//out.flush();</span></div><div class="line">            out.println(line);</div><div class="line">            <span class="comment">// Write data to server, println() is PrintWriter's method, is different from System.out.println()</span></div><div class="line">         </div><div class="line">            <span class="comment">// Read a line of text in upper cases from server</span></div><div class="line">            String upperStr = bIn.readLine();</div><div class="line">            System.out.println(upperStr);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="Uploading-Files"><a href="#Uploading-Files" class="headerlink" title="Uploading Files"></a>Uploading Files</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, SocketException,IOException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10005</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">        System.out.println(s.getInetAddress().getHostAddress() + <span class="string">"...connected"</span>);</div><div class="line">         </div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream())); </div><div class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"Server.txt"</span>));</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line = bIn.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            bw.write(line);</div><div class="line">            bw.newLine();</div><div class="line">            bw.flush();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        out.println(<span class="string">"Successful!"</span>);</div><div class="line">         </div><div class="line">        bw.close();</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>, <span class="number">10005</span>);</div><div class="line">        </div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"client.txt"</span>));</div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            out.println(line);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// Tell the server side that client has finished writing</span></div><div class="line">        s.shutdownOutput();</div><div class="line">         </div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">        String str = bIn.readLine();</div><div class="line">        System.out.println(str);</div><div class="line">         </div><div class="line">        br.close();</div><div class="line">        bIn.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Uploading-Pictures"><a href="#Uploading-Pictures" class="headerlink" title="Uploading Pictures"></a>Uploading Pictures</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10006</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">        System.out.println(ip + <span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Read data and put it in a file</span></div><div class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"pic"</span>);</div><div class="line">        <span class="keyword">if</span>(!dir.exists()) &#123;</div><div class="line">            dir.mkdirs();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        File file = <span class="keyword">new</span> File(dir, ip + <span class="string">".bmp"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>((len=in.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">            fos.write(buf,<span class="number">0</span>,len);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">// Get socket's OutputStream, and send text to client</span></div><div class="line">        OutputStream out = s.getOutputStream();</div><div class="line">        out.write(<span class="string">"Successful!"</span>.getBytes());</div><div class="line">         </div><div class="line">        fos.close();</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>, <span class="number">10006</span>);</div><div class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"0.jpg"</span>);</div><div class="line">        OutputStream out = s.getOutputStream();</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>((len=fis.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">            out.write(buf,<span class="number">0</span>,len);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">// Tell Server that it has finished data transportion, and let server stop reading</span></div><div class="line">        s.shutdownOutput();</div><div class="line">         </div><div class="line">        <span class="comment">// Read content from server</span></div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] bufIn = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> lenIn = in.read(buf);</div><div class="line">        String text = <span class="keyword">new</span> String(buf, <span class="number">0</span>, lenIn);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        fis.close();</div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Multi-Threaded-Server"><a href="#Multi-Threaded-Server" class="headerlink" title="Multi-Threaded Server"></a>Multi-Threaded Server</h2><p>Client is the same as the above one.<br>Only need to change Server side.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10006</span>);</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            Socket s = ss.accept();</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UploadTask(s)).start();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</div><div class="line">   <span class="keyword">private</span> Socket s;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UploadTask</span><span class="params">(Socket s)</span></span>&#123;</div><div class="line">      <span class="keyword">this</span>.s = s;</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">          <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">          String ip = s.getInetAddress().getHostAddress();</div><div class="line">          System.out.println(ip + <span class="string">"....connected"</span>);</div><div class="line">     </div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">                 <span class="comment">// Read data from client</span></div><div class="line">                 InputStream in = s.getInputStream();</div><div class="line">         </div><div class="line">                 <span class="comment">// Put data into a file</span></div><div class="line">                 File dir = <span class="keyword">new</span> File(<span class="string">"pic"</span>);</div><div class="line">                 <span class="keyword">if</span>(!dir.exists()) &#123;</div><div class="line">                     dir.mkdirs();</div><div class="line">                 &#125;</div><div class="line">                 </div><div class="line">                 File file = <span class="keyword">new</span> File(dir, ip + <span class="string">".jpg"</span>);</div><div class="line">                 </div><div class="line">                 <span class="keyword">if</span>(file.exists())&#123;</div><div class="line">                     file = <span class="keyword">new</span> File(dir, ip + <span class="string">" "</span> + (count++) + <span class="string">".jpg"</span>);</div><div class="line">                 &#125;</div><div class="line">         </div><div class="line">                 FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">                 <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                 <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">                 <span class="keyword">while</span>((len=in.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">                     fos.write(buf, <span class="number">0</span>, len);</div><div class="line">                 &#125;</div><div class="line">         </div><div class="line">                 <span class="comment">// Get the socket's OutputStream, send response to client</span></div><div class="line">                 OutputStream out = s.getOutputStream();</div><div class="line">                 out.write(<span class="string">"Successful"</span>.getBytes());</div><div class="line">         </div><div class="line">                 fos.close();</div><div class="line">                 s.close();</div><div class="line">         &#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Common-Clients-and-Server-and-Principles-behind-them"><a href="#Common-Clients-and-Server-and-Principles-behind-them" class="headerlink" title="Common Clients and Server, and Principles behind them"></a>Common Clients and Server, and Principles behind them</h2><p>The most common clients - web browser, or custom client<br>The most common server - web servers, like Apache Tomcat, Ngnix, JBoss, WebSphere</p>
<p>In order to learn the principles of server, let’s implement a mocked server and use existing client - web browser - to see what kind of data client sends to server</p>
<h3 id="Mocked-Server"><a href="#Mocked-Server" class="headerlink" title="Mocked Server"></a>Mocked Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcatDemo</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">        System.out.println(s.getInetAddress().getHostAddress() + <span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        <span class="comment">// Send a message to client</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">         </div><div class="line">        out.println(<span class="string">"&lt;font size=7&gt;Welcome&lt;/font&gt;"</span>);</div><div class="line">         </div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mocked-Client"><a href="#Mocked-Client" class="headerlink" title="Mocked Client"></a>Mocked Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBrowserDemo</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>, <span class="number">8080</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Mock web browser, send a HTTP request to Tomcat</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">        out.println(<span class="string">"GET /1.html HTTP/1.1"</span>);</div><div class="line">        out.println(<span class="string">"Accept: */*"</span>);</div><div class="line">        out.println(<span class="string">"Host: 183.174.66.227:8080"</span>);</div><div class="line">        out.println(<span class="string">"Connection: close"</span>);</div><div class="line">        out.println();</div><div class="line">        out.println();</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">         </div><div class="line">        String str = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</div><div class="line">        System.out.println(str);</div><div class="line">         </div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// The message received is:</div><div class="line">HTTP/1.1 200 OK     // response line, with HTTP version number, status code, and status message</div><div class="line">// Response&apos;s attribtues-  &lt;name&gt;: &lt;value&gt;</div><div class="line">Server: Apache-Coyote/1.1</div><div class="line">Accept-Ranges: bytes</div><div class="line">ETag: W/&quot;43-1357224984849&quot;</div><div class="line">Last-Modified: Thu, 03 Jan 2013 14:56:24 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 43</div><div class="line">Date: Thu, 03 Jan 2013 16:12:54 GMT</div><div class="line">Connection: close</div><div class="line">// Empty line</div><div class="line">// Response body</div><div class="line">&lt;font color = &quot;blue&quot; size=7&gt;welcome&lt;/font&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - wait(), notify(), and notifyAll()]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/17/java/concurrency/Java-Concurrency-wait-notify-and-notifyAll/</url>
      <content type="html"><![CDATA[<h2 id="How-to-Work-With-wait-notify-and-notifyAll-in-Java"><a href="#How-to-Work-With-wait-notify-and-notifyAll-in-Java" class="headerlink" title="How to Work With wait(), notify() and notifyAll() in Java?"></a>How to Work With <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code> in Java?</h2><p>Multithreading in java is pretty complex topic and requires a lot of attention while writing application code dealing with multiple threads accessing one/more shared resources at any given time.</p>
<p>Java 5, introduced some classes like <code>BlockingQueue</code> and <code>Executors</code> which take away some of the complexity by providing easy to use APIs. Programmers using these classes will feel a lot more confident than programmers directly handling synchronization stuff using <code>wait()</code> and <code>notify()</code> method calls.</p>
<p>I will also recommend to use these newer APIs over synchronization yourself, BUT many times we are required to do so for various reasons e.g. maintaining legacy code. A good knowledge around these methods will help you in such situation when arrived.</p>
<p>I am discussing some concepts around methods <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code>.</p>
<h2 id="What-are-wait-notify-and-notifyAll-methods"><a href="#What-are-wait-notify-and-notifyAll-methods" class="headerlink" title="What are wait(), notify() and notifyAll() methods?"></a>What are <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code> methods?</h2><p>Before moving into concepts, lets note down a few very basic definitions involved for these methods.</p>
<p>The <code>Object</code> class in Java has three final methods that allow threads to communicate about the locked status of a resource. These are :</p>
<hr>
<ul>
<li><p><code>wait()</code> : </p>
<blockquote>
<p>It tells the calling thread to give up the lock and go to sleep until some other thread enters the same monitor and calls notify().</p>
<p>The <code>wait()</code> method <code>releases the lock prior to waiting</code> and <code>re-acquires the lock prior to returning from the wait() method</code>.</p>
<p>The <code>wait()</code> method is actually tightly integrated with the synchronization lock, using a feature not available directly from the synchronization mechanism. In other words, it is not possible for us to implement the <code>wait()</code> method purely in Java: it is a <code>native method</code>.</p>
</blockquote>
<p>  General syntax for calling <code>wait()</code> method is like this:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>( lockObject ) &#123; </div><div class="line">    <span class="keyword">while</span>( ! condition )</div><div class="line">    &#123; </div><div class="line">        lockObject.wait();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//take the action here;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p><code>notify()</code> : </p>
<blockquote>
<p>It wakes up one single thread that called <code>wait()</code> on the same object. </p>
<p>It should be noted that calling <code>notify()</code> does not actually give up a lock on a resource. <code>It tells a waiting thread that that thread can wake up.</code> <code>However, the lock is not actually given up until the notifier’s synchronized block has completed.</code></p>
</blockquote>
<p>  So, if a notifier calls <code>notify()</code> on a resource but the notifier still needs to perform 10 seconds of actions on the resource within its synchronized block, the thread that had been waiting will need to wait at least another additional 10 seconds for the notifier to release the lock on the object, even though <code>notify()</code> had been called.</p>
<p>  <code>General syntax for calling</code>notify()` method is like this:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(lockObject) &#123;</div><div class="line">    <span class="comment">//establish_the_condition;</span></div><div class="line"> </div><div class="line">    lockObject.notify();</div><div class="line">     </div><div class="line">    <span class="comment">//any additional code if needed</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p><code>notifyAll()</code> : </p>
<blockquote>
<p>It wakes up all the threads that called <code>wait()</code> on the same object. The <code>highest priority thread</code> will run first in most of the situation, <code>though not guaranteed</code>. Other things are same as <code>notify()</code> method above.</p>
</blockquote>
<p>  General syntax for calling notify() method is like this:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(lockObject) &#123;</div><div class="line">    establish_the_condition;</div><div class="line"> </div><div class="line">    lockObject.notifyAll();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="Practice-Counting-Semaphore"><a href="#Practice-Counting-Semaphore" class="headerlink" title="Practice: Counting Semaphore"></a>Practice: Counting Semaphore</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBoundedSemaphore</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> signal;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBoundedSemaphore</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">        signal = <span class="number">0</span>;</div><div class="line">        capacity = cap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * Notice how the acquire() method now blocks if the number of signals is equal to the upper bound.</div><div class="line">    *</div><div class="line">    * Not until a thread has called release() will the thread calling take() be allowed to deliver its signal,</div><div class="line">    * if the BoundedSemaphore has reached its upper signal limit.</div><div class="line">    * </div><div class="line">    * If the queue size is not equal to either bound when enqueue() or dequeue() is called,</div><div class="line">    * there can be no threads waiting to either enqueue or dequeue items.</div><div class="line">    * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(signal == capacity) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(signal == <span class="number">0</span>) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        signal ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(signal == <span class="number">0</span>) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(signal == capacity) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        signal --;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For more details about <code>Semaphore</code>, please read <a href="http://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-Semaphore/">http://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-Semaphore/</a></p>
<h2 id="Practice-Blocking-Queue"><a href="#Practice-Blocking-Queue" class="headerlink" title="Practice: Blocking Queue"></a>Practice: Blocking Queue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;T&gt; queue;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">this</span>.limit = limit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * Notice how notifyAll() is only called from enqueue() and dequeue() if the queue size is equal</div><div class="line">    * to the size bounds (0 or limit).</div><div class="line">    *</div><div class="line">    * If the queue size is not equal to either bound when enqueue() or dequeue() is called,</div><div class="line">    * there can be no threads waiting to either enqueue or dequeue items.</div><div class="line">    * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(queue.size() == limit) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(queue.size() == <span class="number">0</span>) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        queue.add(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(queue.size() == <span class="number">0</span>) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(queue.size() == limit) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> queue.remove(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Practice-Thread-Pool"><a href="#Practice-Thread-Pool" class="headerlink" title="Practice: Thread Pool"></a>Practice: Thread Pool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPool</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyBlockingQueue&lt;Runnable&gt; myqueue;</div><div class="line">    <span class="keyword">private</span> List&lt;MyThread&gt; threads;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isStopped;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadPool</span><span class="params">(<span class="keyword">int</span> threadCount, <span class="keyword">int</span> maxNoOfTasks)</span> </span>&#123;</div><div class="line">        myqueue = <span class="keyword">new</span> MyBlockingQueue&lt;&gt;(maxNoOfTasks);</div><div class="line"></div><div class="line">        threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i ++) &#123;</div><div class="line">            threads.add(<span class="keyword">new</span> MyThread(myqueue));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(MyThread thread : threads) &#123;</div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">if</span>(isStopped) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ThreadPool is stopped"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        myqueue.enqueue(task);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        isStopped = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span>(MyThread pt : threads) &#123;</div><div class="line">            pt.doStop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> MyBlockingQueue&lt;Runnable&gt; taskQueue;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isStopped;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(MyBlockingQueue&lt;Runnable&gt; blockingQueue)</span> </span>&#123;</div><div class="line">            taskQueue = blockingQueue;</div><div class="line">            isStopped = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(!isStopped) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Runnable r = taskQueue.dequeue();</div><div class="line">                    r.run();</div><div class="line">                &#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">                    <span class="comment">// log</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doStop</span><span class="params">()</span> </span>&#123;</div><div class="line">            isStopped = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">this</span>.interrupt();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isStopped</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> isStopped;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>References:</p>
<ul>
<li><a href="http://www.programcreek.com/2009/02/notify-and-wait-example/" target="_blank" rel="external">http://www.programcreek.com/2009/02/notify-and-wait-example/</a></li>
<li><a href="http://howtodoinjava.com/core-java/multi-threading/how-to-work-with-wait-notify-and-notifyall-in-java/" target="_blank" rel="external">http://howtodoinjava.com/core-java/multi-threading/how-to-work-with-wait-notify-and-notifyall-in-java/</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/blocking-queues.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/blocking-queues.html</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/thread-pools.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/thread-pools.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Thrift - Introduction]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/16/distributed%20system/thrift/Apache-Thrift-Introduction/</url>
      <content type="html"><![CDATA[<h2 id="What-is-Thrift"><a href="#What-is-Thrift" class="headerlink" title="What is Thrift"></a>What is Thrift</h2><p>According to <a href="https://thrift.apache.org/" target="_blank" rel="external">Apache Thrift</a>, </p>
<blockquote>
<p>The Apache Thrift software framework, for <code>scalable cross-language services development</code>, combines a software stack with <code>a code generation engine</code> to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages.</p>
</blockquote>
<p>It’s originated from Facebook, and there’s a <a href="https://thrift.apache.org/static/files/thrift-20070401.pdf" target="_blank" rel="external">paper</a> about it. According to the <em>Abstract</em> of the paper, </p>
<pre><code>------

&quot;Thrift is a software library and set of code-generation tools developed at Facebook to expedite development and implementation of efficient and scalable backend services.

Its primary goal is to ###enable efficient and reliable communication across programming languages### by abstracting the portions of each language that tend to require the most customization into a common library that is implemented in each language.

Specifically, Thrift allows developers to define `datatypes` and `service interfaces` in a single language-neutral file and generate all the necessary code to build RPC clients and servers.&quot;

------
</code></pre><p>As far as I understand, Thrift is a high-performant RPC framework with the following characteristics:</p>
<blockquote>
<ol>
<li>A high-performant encode and decode framework based on bytes</li>
<li>Bottom communication based on NIO</li>
<li>Relative easy service call model</li>
<li>Use Interface Description Language (IDL) to support cross-platform calls</li>
<li>A high performant binary encoding/decoding framework</li>
</ol>
</blockquote>
<h2 id="Thrift-Network-Stack"><a href="#Thrift-Network-Stack" class="headerlink" title="Thrift Network Stack"></a>Thrift Network Stack</h2><p>According to the model, Thrift is composed of the following core components:</p>
<ul>
<li>TServer and Client</li>
<li>TProcessor - a generic object which operates upon an input stream and writes to some output stream.</li>
<li>TProtocol - protocol interface that encode/decode data</li>
<li>TTransport - encapsulates the I/O layer. Basically a thin wrapper around the combined functionality of Java input/output streams.</li>
<li>The Thrift Interface Definition Language (IDL) - describes the service, and generates cross-platform clients</li>
</ul>
<p>Here’s a simple representation of the Apache Thrift networking stack from <a href="https://thrift.apache.org/docs/concepts" target="_blank" rel="external">https://thrift.apache.org/docs/concepts</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+-------------------------------------------+</div><div class="line">| Transport                                 |</div><div class="line">| (raw TCP, HTTP etc)                       |</div><div class="line">+-------------------------------------------+</div><div class="line">| Protocol                                  |</div><div class="line">| (JSON, compact etc)                       |</div><div class="line">+-------------------------------------------+</div><div class="line">| Processor                                 |</div><div class="line">| (compiler generated)                      |</div><div class="line">+-------------------------------------------+</div><div class="line">| Server                                    |</div><div class="line">| (single-threaded, event-driven etc)       |</div><div class="line">+-------------------------------------------+</div></pre></td></tr></table></figure>
<hr>
<p>Reference: RPC framework basic components</p>
<p><img src="http://img.blog.csdn.net/20150108170231000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWluZGZsb2F0aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="RPC framework basic components"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper - Sessions and Session Management]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/15/distributed%20system/zookeeper/ZooKeeper-Sessions-and-Session-Management/</url>
      <content type="html"><![CDATA[<p>A ZooKeeper client establishes a <code>session</code> with the ZooKeeper service by creating a handle to the service using a language binding.</p>
<h2 id="Session-States"><a href="#Session-States" class="headerlink" title="Session States"></a>Session States</h2><p>Once created, the handle starts of in the <code>CONNECTING</code> state and the client library tries to connect to one of the servers that make up the ZooKeeper service at which point it switches to the <code>CONNECTED</code> state.</p>
<p>During normal operation will be in one of these two states. If an unrecoverable error occurs, such as session expiration or authentication failure, or if the application explicitly closes the handle, the handle will move to the <code>CLOSED</code> state.</p>
<p>The following figure shows the possible state transitions of a ZooKeeper client:</p>
<p><img src="https://zookeeper.apache.org/doc/trunk/images/state_dia.jpg" alt="zookeeper session"></p>
<h2 id="How-to-Create-A-Client-Session"><a href="#How-to-Create-A-Client-Session" class="headerlink" title="How to Create A Client Session"></a>How to Create A Client Session</h2><p>To create a client session, the application code must provide a string <code>(connection string)</code> containing a comma separated list of <code>host:port</code> pairs, each corresponding to a ZooKeeper server (e.g. <code>&quot;127.0.0.1:4545&quot;</code> or <code>&quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;</code>).</p>
<hr>
<pre><code>Added in 3.2.0: 
</code></pre><p>An optional <code>chroot</code> suffix may also be appended to the connection string. This will run the client commands while interpreting all paths relative to this root (similar to the unix chroot command). If used the example would look like: <code>127.0.0.1:4545/app/a</code> or <code>127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a</code> where the client would be rooted at “/app/a” and all paths would be relative to this root - ie getting/setting/etc… <code>/foo/bar</code> would result in operations being run on <code>/app/a/foo/bar</code> (from the server perspective). </p>
<p>This feature is particularly useful <code>in multi-tenant environments</code> where each user of a particular ZooKeeper service could be rooted differently. This makes re-use much simpler as each user can code his/her application as if it were rooted at <code>/</code>, while actual location (say <code>/app/a</code>) could be determined at deployment time.</p>
<hr>
<h2 id="What-Happens-in-Session-Creation"><a href="#What-Happens-in-Session-Creation" class="headerlink" title="What Happens in Session Creation"></a>What Happens in Session Creation</h2><p>The ZooKeeper client library will pick an arbitrary server <code>(Note! Not necessarily the local server if there&#39;s one running along the client!)</code> and try to connect to it. If this connection fails, or if the client becomes disconnected from the server for any reason, the client will automatically try the next server in the list, until a connection is (re-)established.</p>
<h3 id="Server-creates-Session-Id"><a href="#Server-creates-Session-Id" class="headerlink" title="Server creates Session Id"></a>Server creates <code>Session Id</code></h3><p>When a client gets a handle to the ZooKeeper service, ZooKeeper creates a ZooKeeper <code>session</code>, <code>represented as a 64-bit number</code>, that it assigns to the client.</p>
<h3 id="Server-creates-password-and-send-it-to-client"><a href="#Server-creates-password-and-send-it-to-client" class="headerlink" title="Server creates password and send it to client"></a>Server creates <code>password</code> and send it to client</h3><p>If the client connects to a different ZooKeeper server, it will send the <code>session id</code> as a part of the connection handshake. As a security measure, the server creates a <code>password</code> for the <code>session id</code> that any ZooKeeper server can validate.The password is sent to the client with the session id when the client establishes the session. The client sends this password with the session id whenever it reestablishes the session with a new server.</p>
<h3 id="Client-specifies-timeout"><a href="#Client-specifies-timeout" class="headerlink" title="Client specifies timeout"></a>Client specifies timeout</h3><p>One of the parameters to the ZooKeeper client library call to create a ZooKeeper session is <code>the session timeout in milliseconds</code>. The client sends a requested timeout, the server responds with the timeout that it can give the client. The current implementation requires that the timeout be <code>a minimum of 2 times the tickTime</code> (as set in the server configuration) and <code>a maximum of 20 times the tickTime</code>.</p>
<a id="more"></a>
<h3 id="Session-re-establishment"><a href="#Session-re-establishment" class="headerlink" title="Session re-establishment"></a>Session re-establishment</h3><p>When a client (session) becomes partitioned from the ZK serving cluster it will begin searching the list of servers that were specified during session creation. Eventually, when connectivity between the client and at least one of the servers is re-established, the session will either again transition to the <code>connected</code> state (if reconnected within the session timeout value) or it will transition to the <code>expired</code> state (if reconnected after the session timeout).</p>
<p>It is not advisable to create a new session object (a new <code>ZooKeeper.class</code> or zookeeper handle in the c binding) for disconnection. The ZK client library will handle reconnect for you. In particular we have heuristics built into the client library to handle things like <code>herd effect</code>, etc… Only create a new session when you are notified of session expiration (mandatory).</p>
<h3 id="Session-Expiration"><a href="#Session-Expiration" class="headerlink" title="Session Expiration"></a>Session Expiration</h3><pre><code>Session expiration is managed by the ZooKeeper cluster itself, not by the client.
</code></pre><p>When the ZK client establishes a session with the cluster it provides a <code>timeout</code> value detailed above. This value is used by the cluster to determine when the client’s session expires.</p>
<pre><code>Expirations happens when the cluster does not hear from the client within the specified session timeout period (i.e. no heartbeat).
</code></pre><p>At session expiration the cluster will delete any/all ephemeral nodes owned by that session and immediately notify any/all connected clients of the change (anyone watching those znodes).</p>
<blockquote>
<p>At this point the client of the expired session is still disconnected from the cluster, it will not be notified of the session expiration until/unless it is able to re-establish a connection to the cluster. The client will stay in disconnected state until the TCP connection is re-established with the cluster, at which point the watcher of the expired session will receive the <code>session expired</code> notification.</p>
</blockquote>
<p>Example state transitions for an expired session as seen by the expired session’s watcher:</p>
<ol>
<li><code>connected</code> : session is established and client is communicating with cluster (client/server communication is operating properly)</li>
<li>…. client is partitioned from the cluster</li>
<li><code>disconnected</code> : client has lost connectivity with the cluster</li>
<li>…. time elapses, after ‘timeout’ period the cluster expires the session, nothing is seen by client as it is disconnected from cluster</li>
<li>…. time elapses, the client regains network level connectivity with the cluster</li>
<li><code>expired</code> : eventually the client reconnects to the cluster, it is then notified of the expiration</li>
</ol>
<h2 id="Default-Watcher"><a href="#Default-Watcher" class="headerlink" title="Default Watcher"></a>Default Watcher</h2><p>Another parameter to the ZooKeeper session establishment call is <code>the default watcher</code>. Watchers are notified when any state change occurs in the client. For example if the client loses connectivity to the server the client will be notified, or if the client’s session expires, etc…</p>
<p>This watcher should consider the initial state to be <code>disconnected</code> (i.e. before any state changes events are sent to the watcher by the client lib). In the case of a new connection, the first event sent to the watcher is typically the session connection event.</p>
<h3 id="Client-Heartbeat"><a href="#Client-Heartbeat" class="headerlink" title="Client Heartbeat"></a>Client Heartbeat</h3><p>The session is kept alive by requests sent by the client. If the session is idle for a period of time that would timeout the session, the client will send <code>a PING request</code> to keep the session alive.</p>
<p>This PING request not only allows the ZooKeeper server to know that the client is still active, but it also allows the client to verify that its connection to the ZooKeeper server is still active. The timing of the PING is conservative enough to ensure reasonable time to detect a dead connection and reconnect to a new server.</p>
<p>Once a connection to the server is successfully established <code>connected</code> there are basically two cases where the client lib generates <code>connectionloss</code> (the result code in c binding, exception in Java – see the API documentation for binding specific details) when either a synchronous or asynchronous operation is performed and one of the following holds:</p>
<ul>
<li>The application calls an operation on a session that is no longer alive/valid</li>
<li>The ZooKeeper client disconnects from a server when there are pending operations to that server, i.e., there is a pending asynchronous call.</li>
</ul>
<hr>
<pre><code>Added in 3.2.0 -- SessionMovedException.
</code></pre><p>There is an internal exception that is generally not seen by clients called the <code>SessionMovedException</code>. This exception occurs because a request was received on a connection for a session which has been reestablished on a different server. The normal cause of this error is a client that sends a request to a server, but the network packet gets delayed, so the client times out and connects to a new server. When the delayed packet arrives at the first server, the old server detects that the session has moved, and closes the client connection.</p>
<p>Clients normally do not see this error since they do not read from those old connections. (Old connections are usually closed.) One situation in which this condition can be seen is when two clients try to reestablish the same connection using a saved session id and password. One of the clients will reestablish the connection and the second client will be disconnected (causing the pair to attempt to re-establish its connection/session indefinitely).</p>
<hr>
<h2 id="Updating-the-List-of-Servers"><a href="#Updating-the-List-of-Servers" class="headerlink" title="Updating the List of Servers"></a>Updating the List of Servers</h2><p>Updating the list of servers. We allow a client to update the connection string by providing a new comma separated list of <code>host:port</code> pairs, each corresponding to a ZooKeeper server.</p>
<p>The function invokes a probabilistic load-balancing algorithm which may cause the client to disconnect from its current host with the goal to achieve expected uniform number of connections per server in the new list. In case the current host to which the client is connected is not in the new list this call will always cause the connection to be dropped. Otherwise, the decision is based on whether the number of servers has increased or decreased and by how much.</p>
<p>For example, if the previous connection string contained 3 hosts and now the list contains these 3 hosts and 2 more hosts, 40% of clients connected to each of the 3 hosts will move to one of the new hosts in order to balance the load. The algorithm will cause the client to drop its connection to the current host to which it is connected with probability 0.4 and in this case cause the client to connect to one of the 2 new hosts, chosen at random.</p>
<p>Another example – suppose we have 5 hosts and now update the list to remove 2 of the hosts, the clients connected to the 3 remaining hosts will stay connected, whereas all clients connected to the 2 removed hosts will need to move to one of the 3 hosts, chosen at random. If the connection is dropped, the client moves to a special mode where he chooses a new server to connect to using the probabilistic algorithm, and not just round robin.</p>
<p>In the first example, each client decides to disconnect with probability 0.4 but once the decision is made, it will try to connect to a random new server and only if it cannot connect to any of the new servers will it try to connect to the old ones. After finding a server, or trying all servers in the new list and failing to connect, the client moves back to the normal mode of operation where it picks an arbitrary server from the <code>connectString</code> and attempt to connect to it. If that fails, is will continue trying different random servers in round robin. (see above the algorithm used to initially choose a server)</p>
<hr>
<p>Reference: <a href="https://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#ch_zkSessions" target="_blank" rel="external">https://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#ch_zkSessions</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How did I develop a crypto service for Tableau Server]]></title>
      <url>https://phoenixjiangnan.github.io/2016/09/14/system%20design/project%20experience/How-did-I-develop-a-crypto-service-for-Tableau-Server/</url>
      <content type="html"><![CDATA[<p>For more information about Tableau Server, you can read my blogs <a href="http://phoenixjiangnan.github.io/categories/system-design/project-experience/">here</a></p>
<h2 id="What-is-this-project-about"><a href="#What-is-this-project-about" class="headerlink" title="What is this project about?"></a>What is this project about?</h2><p>Tableau Server is an on-premise data analytics and visualization platform. Customer can deploy bits in their own data center, or in AWS, Azure, and GCP.</p>
<p>There are two categories of passwords within a Tableau Server cluster:</p>
<ul>
<li><p>User input passwords, which are entered by users</p>
<ul>
<li>AWS key</li>
<li>smtp passwords</li>
<li>Windows runas user password</li>
<li>…</li>
</ul>
</li>
<li><p>Server managed passwords, which are randomly generated by server</p>
<ul>
<li>jdbc password</li>
<li>Postgres admin password</li>
<li>ZooKeeper password</li>
<li>…</li>
</ul>
</li>
</ul>
<p>So the passwords I’m talking about is not the password for someone’s server account. The latter ones live in a table of the cluster’s PostgreSQL database and are already encrypted.</p>
<p>The current version of Tableau Server (v10) stores all the passwords in <code>plain text</code> in a configuration file, which is distributed among machines.</p>
<p>The new version of Tableau Server also stores all passwords in <code>plain text</code>, but in a <code>Znode</code> in ZooKeeper, as I described in <a href="http://phoenixjiangnan.github.io/2016/08/16/system%20design/project%20experience/How-did-I-build-a-custom-dynamic-ZooKeeper-management-and-migration-framework-and-an-asynchronous-job-framework-for-Tableau-Server-11/">this blog</a>.</p>
<blockquote>
<p>The project is about developing a crypto service that encrypts passwords before persisting them somewhere, and decrypts passwords into memory when server uses them, so that no more clear text secrets live in Tableau Server. The new service should support both our old monolith JRuby app and our new service-oriented server architecture.</p>
</blockquote>
<a id="more"></a>
<h2 id="Why-are-we-developing-this-feature"><a href="#Why-are-we-developing-this-feature" class="headerlink" title="Why are we developing this feature?"></a>Why are we developing this feature?</h2><p>Tableau Server is for enterprise customers, and the top 3 things that enterprise IT cares about are SECURITY, SECURITY, SECURITY.</p>
<p>According to our sales team, keeping secrets in clear text has been one of the biggest sales blockers for Tableau Server. Our customers have also been bringing up many times that either their huge concerns w.r.t the potential password leaks, or the friction they’ve experienced to buy Tableau Server - they need to get an exception from IT since Tableau Server is the only app in house that don’t encrypt passwords.</p>
<p>In a nutshell, Tableau Server is not <code>enterprise-ready</code> as long as it doesn’t support password encryption.</p>
<h2 id="Trade-offs"><a href="#Trade-offs" class="headerlink" title="Trade-offs"></a>Trade-offs</h2><p>There’s no doubt that we are gonna build the crypto service for new Tableau Server, a service-oriented server architecture that will come out in 2017. The biggest trade-off we faced was whether to put efforts on enabling this feature in our old monolith JRuby server app.</p>
<p>The downsides of doing that are:</p>
<ul>
<li>Lots of efforts required. Our old server architecture is a monolith JRuby app with messy logic (yeah, everyone agrees on it! It’s totally messed up because people have been keeping on adding new stuff here and there for <code>9 years</code> - the ruby app started on 2007). The crypto service will be written in Java and incorporate it into old server can be really hard.</li>
<li>Uncertain schedule. Because of the large amount of work expected, no one is certain whether we can finish this feature, fully test it, and ship it on time. If it comes out too late, say only three months before new server gets shipped, it’s probably much less valuable.</li>
<li>We are not sure if it worths it. If our customers have been living with plain text passwords for 9 years, they probably can wait for the new server for another six months?</li>
<li>Developer frastruction. Not only because it’s a messy job, but also because you know your code will be deleted a year later.</li>
</ul>
<p>The upsides of doing that are:</p>
<ul>
<li>Removes the sales blocker as soon as possible</li>
<li>Relieves customers pain and complaints as soon as possible</li>
<li>Or at least demonstrate to our customers that we have heard of their requirements and we are executing on it (this is sounds very much self-comforting, but it’s been brought up serveral time. Yeah, it’s all about ATTITUDE)</li>
</ul>
<p>The team eventually decided to do it.</p>
<h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p>Compared to the complicated integration of crypto service and our ruby app, the design of crypto service itself is actually much more straightforward.</p>
<p>The core idea is:</p>
<blockquote>
<p>Encrpt actual secrets with an encryption key, and encrypt the encryption key with a master key</p>
</blockquote>
<h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">File System / Config Dir / Config File</div><div class="line">    ------yml file</div><div class="line">    | inputs</div><div class="line">    |    - master key algorithm</div><div class="line">    |    - encryption key algorithm</div><div class="line">    |    - keystore location</div><div class="line">    |</div><div class="line">    | generated values</div><div class="line">    |    - master key id</div><div class="line">    |    - encryption key</div><div class="line">    |    - encryption key id</div><div class="line">    ------</div><div class="line">    </div><div class="line">File System / Config Dir / Java KeyStore (JKS)</div><div class="line">    -----------</div><div class="line">    |  Master |</div><div class="line">    |   key   |</div><div class="line">    -----------</div></pre></td></tr></table></figure>
<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><ol>
<li><p>Provide the following three args:</p>
<ul>
<li>master key algorithm</li>
<li>encryption key algorithm</li>
<li>keystore location</li>
</ul>
</li>
<li><p>Use <code>master key algorithm</code> to create a master key, and put it in <code>Java Keystore (JKS)</code> in <code>keystore location</code>. JKS will be in Tableau Server’s config directory, and will be guarded by the dir’s access permission.</p>
</li>
<li><p>Create encryption key using <code>encryption key algorithm</code>, encrypt it with master key, and put the encrypted value in config file.</p>
</li>
<li><p>Encrypt all existing passwords in config file</p>
</li>
</ol>
<h3 id="When-encrypting-passwords"><a href="#When-encrypting-passwords" class="headerlink" title="When encrypting passwords"></a>When encrypting passwords</h3><p>Whenever a new key-value pair is requested to be put into config file:</p>
<ol>
<li>Check if the key is in our encryption list. If true, proceed; otherwise, break out and just put them as clear text in config file</li>
<li>Get encrypted encryption key value, decrypt it with master key to get the actual encryption key. You need to have access to the JKS file to read master key.</li>
<li>Encrypt passwords with encryption key</li>
</ol>
<h3 id="When-decrypting-passwords"><a href="#When-decrypting-passwords" class="headerlink" title="When decrypting passwords"></a>When decrypting passwords</h3><ol>
<li>Get encrypted encryption key value, decrypt it with master key to get the actual encryption key. You need to have access to the JKS file to read master key.</li>
<li>Decrypt passwords with encryption key</li>
</ol>
<h3 id="Key-rolling"><a href="#Key-rolling" class="headerlink" title="Key-rolling"></a>Key-rolling</h3><p>I made key rolling an atmoic transaction, so that it can recover from any failure.</p>
<ol>
<li>Take a backup of the current config file and the JKS, put them in a temp dir which shares the same access permission as the config dir</li>
<li>Roll all <code>server-managed</code> passwords, encrypt them with existing crypto service, and persist new values in config file</li>
<li>Decrypt all passwords <code>(both server-managed and user-managed)</code> in config file, and hold them as clear text in memory</li>
<li>Force creating a new JKS with new master key</li>
<li>Create a new encyption key</li>
<li>Reinitialize crypto service with new crypto properties</li>
<li>Use the new crypto service to encrypt all password held in memory</li>
<li>Put all new crypto properties and all encrypted passwords into the config file</li>
<li>If any error happens, force restoring the config file and the JKS in your backup</li>
</ol>
<h3 id="When-to-roll-keys"><a href="#When-to-roll-keys" class="headerlink" title="When to roll keys"></a>When to roll keys</h3><p>Here are some best practices I recommend:</p>
<ul>
<li>When a worker machine is removed/decommissioned from your cluster</li>
<li>Every a few months</li>
<li>Whenever the admin think is necessary</li>
</ul>
<h2 id="My-Role-in-this-project"><a href="#My-Role-in-this-project" class="headerlink" title="My Role in this project"></a>My Role in this project</h2><p>I played two major roles in this project</p>
<h3 id="1-Fireman"><a href="#1-Fireman" class="headerlink" title="1. Fireman"></a>1. Fireman</h3><p>I was not an orginal team member of this project. This project was started in parallel with <a href="http://phoenixjiangnan.github.io/2016/08/16/system%20design/project%20experience/How-did-I-build-a-custom-dynamic-ZooKeeper-management-and-migration-framework-and-an-asynchronous-job-framework-for-Tableau-Server-11/">my ZooKeeper project</a>. When I finished mine, my manager asked me to join my colleague in this project.</p>
<p>At that point, probably some time in June, everyone was positive about the project progress and thought it was on schedule. Adding me is just to help the project move faster. After I joined, and gave an estimation of all backlogs, I realized that we were actually far behind the schedule, even two of us were not able to finish it on time.</p>
<p>I brought this up to my manager, and had all our devs, testers, and PM sit down and evaluate our backlogs together. It turned out we WERE at an extreme risky schedule. I didn’t know why my colleague (the only original developer for this project) didn’t warn everybody.</p>
<h3 id="2-One-of-the-Key-Contributor"><a href="#2-One-of-the-Key-Contributor" class="headerlink" title="2. One of the Key Contributor"></a>2. One of the Key Contributor</h3><p>I am one of the main contributors, and finish the following works:</p>
<ul>
<li>crypto service bootstapping in both old Jruby app and new service-oriented Java app</li>
<li>key rolling</li>
<li>most Java-Ruby integration</li>
<li>enabling unit and integration tests</li>
<li>all customer-facing commands</li>
</ul>
<h2 id="Most-Important-Stuff-I-learned-from-this-project"><a href="#Most-Important-Stuff-I-learned-from-this-project" class="headerlink" title="Most Important Stuff I learned from this project"></a>Most Important Stuff I learned from this project</h2><p>Project Management:</p>
<ul>
<li>Always keep an eye on the project schedule, and don’t be shy to alert everybody when you cannot finish your work on time</li>
</ul>
<p>Tech:</p>
<ul>
<li>Learned quite a lot crypto architecture and related knowledge</li>
<li>Learned a lot Ruby and JRuby</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to compare float numbers]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/27/best%20practices/How-to-compare-float-numbers/</url>
      <content type="html"><![CDATA[<p>The reason I want to have a special blog talking about this problem is that, many people I know tend to think that float number comparison is the same as integer comparison. </p>
<p>They usually write code like</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">somefunction() &#123;</div><div class="line">	<span class="keyword">double</span> threeTenths1 = <span class="number">0.3</span>;</div><div class="line">	<span class="keyword">double</span> threeTenths2 = <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span>;</div><div class="line">	    </div><div class="line">	<span class="keyword">if</span> (threeTenths1 == threeTenths2) &#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>then their unit tests fail and they don’t know what’s wrong until I helped them to print out the boolean </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">somefunction() &#123;</div><div class="line">	<span class="keyword">double</span> threeTenths1 = <span class="number">0.3</span>;</div><div class="line">	<span class="keyword">double</span> threeTenths2 = <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span>;</div><div class="line">	</div><div class="line">	System.out.println(threeTenths1);</div><div class="line">	System.out.println(threeTenths2);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (threeTenths1 == threeTenths2) &#123;</div><div class="line">	    System.out.println(<span class="string">"Math is a world of absolute truth."</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	    System.out.println(<span class="string">"This is not logical!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0.3</div><div class="line">0.30000000000000004</div><div class="line">This is not logical!</div></pre></td></tr></table></figure>
<p>which turned out to be <code>false</code>.</p>
<h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Due to rounding errors, most floating-point numbers end up being slightly imprecise. As long as this imprecision stays small, it can usually be ignored.</p>
<p>However, it also means that numbers expected to be equal (e.g. when calculating the same result through different correct methods) often differ slightly, and a simple equality test fails. For example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> a = <span class="number">0.15</span> + <span class="number">0.15</span></div><div class="line"><span class="keyword">float</span> b = <span class="number">0.1</span> + <span class="number">0.2</span></div><div class="line"><span class="keyword">if</span>(a == b) <span class="comment">// can be false!</span></div><div class="line"><span class="keyword">if</span>(a &gt;= b) <span class="comment">// can also be false!</span></div></pre></td></tr></table></figure>
<h2 id="What-do-you-mean-‘imprecise’"><a href="#What-do-you-mean-‘imprecise’" class="headerlink" title="What do you mean ‘imprecise’ ?"></a>What do you mean ‘imprecise’ ?</h2><p>Before we can continue I need to make clear the difference between 0.1, float(0.1), and double(0.1). In C/C++ the numbers 0.1 and double(0.1) are the same thing, but when I say “0.1” in text I mean the exact base-10 number, whereas float(0.1) and double(0.1) are rounded versions of 0.1. And, to be clear, float(0.1) and double(0.1) don’t have the same value, because float(0.1) has fewer binary digits, and therefore has more error.</p>
<p>Here are the exact values for 0.1, float(0.1), and double(0.1):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Number	    Value</div><div class="line">0.1	        0.1 (of course)</div><div class="line">float(.1)	0.100000001490116119384765625</div><div class="line">double(.1)	0.1000000000000000055511151231257827021181583404541015625</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Don’t-use-absolute-error-margins"><a href="#Don’t-use-absolute-error-margins" class="headerlink" title="Don’t use absolute error margins"></a>Don’t use absolute error margins</h2><p>The solution is to check not whether the numbers are exactly the same, but whether their difference is very small. The error margin that the difference is compared to is often called epsilon. The most simple form:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( Math.abs(a-b) &lt; <span class="number">0.00001</span>) <span class="comment">// wrong - don't do this</span></div></pre></td></tr></table></figure>
<p>This is a bad way to do it because a fixed epsilon chosen because it “looks small” could actually be way too large when the numbers being compared are very small as well. The comparison would return “true” for numbers that are quite different. And when the numbers are very large, the epsilon could end up being smaller than the smallest rounding error, so that the comparison always returns “false”. </p>
<h2 id="Look-out-for-edge-cases"><a href="#Look-out-for-edge-cases" class="headerlink" title="Look out for edge cases"></a>Look out for edge cases</h2><p>Therefore, it is necessary to see whether the relative error is smaller than epsilon:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( Math.abs((a-b)/b) &lt; <span class="number">0.00001</span> ) <span class="comment">// still not right!</span></div></pre></td></tr></table></figure>
<p>There are some important special cases where this will fail:</p>
<ul>
<li><p>When both a and b are zero. 0.0/0.0 is “not a number”, which causes an exception on some platforms, or returns false for all comparisons.</p>
</li>
<li><p>When only b is zero, the division yields “infinity”, which may also cause an exception, or is greater than epsilon even when a is smaller.</p>
</li>
<li><p>It returns false when both a and b are very small but on opposite sides of zero, even when they’re the smallest possible non-zero numbers.</p>
</li>
</ul>
<h2 id="The-Recommended-Way-of-Float-Number-Comparison-from-Me"><a href="#The-Recommended-Way-of-Float-Number-Comparison-from-Me" class="headerlink" title="The Recommended Way of Float Number Comparison from Me"></a>The Recommended Way of Float Number Comparison from Me</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> maxRelDiff = FLOAT_EPSILON; <span class="comment">// Can be 1/100,000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">almostEqualRelatively</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</div><div class="line">    <span class="comment">// Calculate the difference.</span></div><div class="line">    <span class="keyword">float</span> diff = Math.abs(a - b);</div><div class="line">    a = Math.abs(a);</div><div class="line">    b = Math.abs(b);</div><div class="line">    </div><div class="line">    <span class="comment">// Find the largest</span></div><div class="line">    <span class="keyword">float</span> largest = (b &gt; a) ? b : a;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (diff &lt;= largest * maxRelDiff) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>References:</p>
<ul>
<li><a href="http://floating-point-gui.de/errors/comparison/" target="_blank" rel="external">http://floating-point-gui.de/errors/comparison/</a></li>
<li><a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/" target="_blank" rel="external">https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</a></li>
<li><a href="http://stackoverflow.com/questions/1088216/whats-wrong-with-using-to-compare-floats-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/1088216/whats-wrong-with-using-to-compare-floats-in-java</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to test a program involving probability - take an algorithm that shuffles array as example]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/26/data%20structures%20and%20algorithms/probability/How-to-test-a-program-involving-probability-take-an-algorithm-that-shuffles-array-as-example/</url>
      <content type="html"><![CDATA[<p>This article is about some inspirations I got from another blog pasted below.</p>
<blockquote>
<p>That post discusses which algorithm is truly correct to randomly shuffle an array of integers (or shuffle pokers), and how to test an algorithm to make sure it’s the right one.</p>
<p>The core idea is that: when it comes to probability problem, there’s only one way to actually test that - statistics.</p>
</blockquote>
<p>For example, if a function can randomly return a number from 1 - 10, it means the probability of occurance of each individual number is 1/10. Therefore, if we run this function a huge amount of times (let’s say 1 million times), the distribution of returned values should be uniform.</p>
<p>At least, the error rate should be reasonable, say 5% but not 20%. We can define ‘reasonable’ as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Sample: 1 million times</div><div class="line">Max error rate: 10%</div><div class="line">The 95% Percentile: over 90% error rate is less than 5%</div></pre></td></tr></table></figure>
<blockquote>
<p>Don’t use average error rate here as the post mentioned! I personally really hate using average of something. What’s the problem with ‘average’? You might ask. My question is: the average personal assets between you and Mark Zuckerburgh is pretty huge, so you a billinaire.</p>
</blockquote>
<p>And the corresponding test plan is:</p>
<blockquote>
<ul>
<li>a test unit should run this function 100 thousand times (100 samples)</li>
<li>run this test unit 1 million times for each sample</li>
<li>if over 95% percentile of the 1m sample tests has an error rate less than 5%, we say this function is truly random</li>
</ul>
<p>(From my point of view, there’s actually another way if the function given to you is not in a black box - you are able to give out the math probability equation)</p>
</blockquote>
<a id="more"></a>
<hr>
<p>The following content is from <a href="http://coolshell.cn/articles/8593.html" target="_blank" rel="external">http://coolshell.cn/articles/8593.html</a></p>
<p>Use Google Translate if necessary</p>
<hr>
<p>我希望本文有助于你了解测试软件是一件很重要也是一件不简单的事。</p>
<p>我们有一个程序，叫<code>ShuffleArray()</code>，是用来洗牌的，我见过N多千变万化的<code>ShuffleArray()</code>，但是似乎从来没人去想过怎么去测试这个算法。所以，我在面试中我经常会问应聘者如何测试<code>ShuffleArray()</code>，没想到这个问题居然难倒了很多有多年编程经验的人。对于这类的问题，其实，测试程序可能比算法更难写，代码更多。而这个问题正好可以加强一下我在<code>《我们需要专职的QA吗？》</code>中我所推崇的——开发人员更适合做测试的观点。</p>
<h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><p>我们先来看几个算法（第一个用递归二分随机抽牌，第二个比较偷机取巧，第三个比较通俗易懂）</p>
<h3 id="1-递归二分随机抽牌"><a href="#1-递归二分随机抽牌" class="headerlink" title="1. 递归二分随机抽牌"></a>1. 递归二分随机抽牌</h3><p>有一次是有一个朋友做了一个网页版的扑克游戏，他用到的算法就是想模拟平时我们玩牌时用手洗牌的方式，是用递归+二分法，我说这个程序恐怕不对吧。他觉得挺对的，说测试了没有问题。他的程序大致如下（原来的是用Javascript写的，我在这里凭记忆用C复现一下）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归二分方法</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> MAXLEN = <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> TestArr[MAXLEN] = &#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> RecurArr[MAXLEN]=&#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuffleArray_Recursive_Tmp</span><span class="params">(<span class="keyword">char</span>* arr, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(cnt &gt; MAXLEN || len &lt;=<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> pos = rand() % len;</div><div class="line">    RecurArr[cnt++] = arr[pos];</div><div class="line">    <span class="keyword">if</span> (len==<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    ShuffleArray_Recursive_Tmp(arr, pos);</div><div class="line">    ShuffleArray_Recursive_Tmp(arr+pos+<span class="number">1</span>, len-pos<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuffleArray_Recursive</span><span class="params">(<span class="keyword">char</span>* arr, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(RecurArr, <span class="number">0</span>, <span class="keyword">sizeof</span>(RecurArr));</div><div class="line">    cnt=<span class="number">0</span>;</div><div class="line">    ShuffleArray_Recursive_Tmp(arr, len);</div><div class="line">    <span class="built_in">memcpy</span>(arr, RecurArr, len);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> temp[MAXLEN]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="built_in">strncpy</span>(temp, TestArr, MAXLEN);</div><div class="line">        ShuffleArray_Recursive((<span class="keyword">char</span>*)temp, MAXLEN);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随便测试几次，还真像那么回事：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第一次：D C A B H E G F I J</div><div class="line">第二次：A G D B C E F J H I</div><div class="line">第三次：A B H F C E D G I J</div><div class="line">第四次：J I F B A D C E H G</div><div class="line">第五次：F B A D C E H G I J</div></pre></td></tr></table></figure>
<h3 id="2-快排Hack法"><a href="#2-快排Hack法" class="headerlink" title="2. 快排Hack法"></a>2. 快排Hack法</h3><p>让我们再看一个hack快排的洗牌程序（只看算法，省去别的代码）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> rand() % <span class="number">3</span><span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuffleArray_Sort</span><span class="params">(<span class="keyword">char</span>* arr, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    qsort( (<span class="keyword">void</span> *)arr, (<span class="keyword">size_t</span>)len, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), compare );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行个几次，感觉得还像那么回事：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第一次：H C D J F E A G B I</div><div class="line">第二次：B F J D C E I H G A</div><div class="line">第三次：C G D E J F B I A H</div><div class="line">第四次：H C B J D F G E I A</div><div class="line">第五次：D B C F E A I H G J</div></pre></td></tr></table></figure>
<p>看不出有什么破绽。</p>
<h3 id="3-大多数人的实现"><a href="#3-大多数人的实现" class="headerlink" title="3. 大多数人的实现"></a>3. 大多数人的实现</h3><p>下面这个算法是大多数人的实现，就是<code>for</code>循环一次，然后随机交换两个数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuffleArray_General</span><span class="params">(<span class="keyword">char</span>* arr, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> suff_time = len;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;suff_time; idx++) &#123;</div><div class="line">        <span class="keyword">int</span> i = rand() % len;</div><div class="line">        <span class="keyword">int</span> j = rand() % len;</div><div class="line">        <span class="keyword">char</span> temp = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跑起来也还不错，洗得挺好的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第一次：G F C D A J B I H E</div><div class="line">第二次：D G J F E I A H C B</div><div class="line">第三次：C J E F A D G B H I</div><div class="line">第四次：H D C F A E B J I G</div><div class="line">第五次：E A J F B I H G D C</div></pre></td></tr></table></figure>
<p>但是上述三个算法哪个的效果更好？好像都是对的。一般的QA或是程序员很有可能就这样把这个功能Pass了。但是事情并没有那么简单……</p>
<h2 id="如何测试-How-to-test"><a href="#如何测试-How-to-test" class="headerlink" title="如何测试 How to test"></a>如何测试 How to test</h2><p>在做测试之前，我们还需要了解一下一个基本知识——PC机上是做不出真随机数的，只能做出伪随机数。真随机数需要硬件支持。但是不是这样我们就无法测试了呢，不是的。我们依然可以测试。</p>
<blockquote>
<p>我们知道，洗牌洗得好不好，主要是看是不是够随机。那么如何测试随机性呢？</p>
<p>一到概率问题，我们只有一个方法来做测试，那就是用统计的方式.</p>
</blockquote>
<p>试想，我们有个随机函数<code>rand()</code>返回 1 到 10 中的一个数，如果够随机的话，每个数返回的概率都应该是一样的，也就是说每个数都应该有10分之1的概率会被返回。</p>
<p>也就是说，你调用<code>rand()</code>函数100次，其中，每个数出现的次数大约都在10次左右。（注意：我用了左右，这说明概率并不是很准确的）不应该有一个数出现了15次以上，另一个在5次以下，要是这样的话，这个函数就是错的。</p>
<p>举一反三，测试洗牌程序也一样，需要通过概率的方式来做统计，是不是每张牌出现在第一个位置的次数都是差不多的。</p>
<p>于是，这样一来上面的程序就可以很容易做测试了。</p>
<h2 id="Test-Result"><a href="#Test-Result" class="headerlink" title="Test Result"></a>Test Result</h2><p>下面是测试结果（测试样本1000次——列是每个位置出现的次数，行是各个字符的统计，出现概率应该是1/10，也就是100次）：</p>
<h3 id="1-递归随机抽牌的方法"><a href="#1-递归随机抽牌的方法" class="headerlink" title="1. 递归随机抽牌的方法"></a>1. 递归随机抽牌的方法</h3><p>很明显，这个洗牌程序太有问题。算法是错的！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">     1    2    3    4    5    6    7    8    9    10</div><div class="line">----------------------------------------------------</div><div class="line">A | 101  283  317  208   65   23    3    0    0    0</div><div class="line">B | 101  191  273  239  127   54   12    2    1    0</div><div class="line">C | 103  167  141  204  229  115   32    7    2    0</div><div class="line">D | 103  103   87  128  242  195  112   26    3    1</div><div class="line">E | 104   83   62   67  116  222  228   93   22    3</div><div class="line">F |  91   58   34   60   69  141  234  241   65    7</div><div class="line">G |  93   43   35   19   44  102  174  274  185   31</div><div class="line">H |  94   28   27   27   46   68   94  173  310  133</div><div class="line">I | 119   27   11   30   28   49   64   96  262  314</div><div class="line">J |  91   17   13   18   34   31   47   88  150  511</div></pre></td></tr></table></figure>
<h3 id="2-快排Hack法-1"><a href="#2-快排Hack法-1" class="headerlink" title="2. 快排Hack法"></a>2. 快排Hack法</h3><p>看看对角线（从左上到右下）上的数据，很离谱！所以，这个算法也是错的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      1    2    3    4    5    6    7    8    9    10</div><div class="line">-----------------------------------------------------</div><div class="line">A |   74  108  123  102   93  198   40   37   52  173</div><div class="line">B |  261  170  114   70   49   28   37   76  116   79</div><div class="line">C |  112  164  168  117   71   37   62   96  116   57</div><div class="line">D |   93   91  119  221  103   66   91   98   78   40</div><div class="line">E |   62   60   82   90  290  112   95   98   71   40</div><div class="line">F |   46   60   63   76   81  318   56   42   70  188</div><div class="line">G |   72   57   68   77   83   39  400  105   55   44</div><div class="line">H |   99   79   70   73   87   34  124  317   78   39</div><div class="line">I |  127  112  102   90   81   24   57   83  248   76</div><div class="line">J |   54   99   91   84   62  144   38   48  116  264</div></pre></td></tr></table></figure>
<h3 id="3-大多数人的算法"><a href="#3-大多数人的算法" class="headerlink" title="3. 大多数人的算法"></a>3. 大多数人的算法</h3><p>我们再来看看大多数人的算法。还是对角线上的数据有问题，所以，还是错的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      1    2    3    4    5    6    7    8    9    10</div><div class="line">-----------------------------------------------------</div><div class="line">A |  178   98   92   82  101   85   79  105   87   93</div><div class="line">B |   88  205   90   94   77   84   93   86  106   77</div><div class="line">C |   93   99  185   96   83   87   98   88   82   89</div><div class="line">D |  105   85   89  190   92   94  105   73   80   87</div><div class="line">E |   97   74   85   88  204   91   80   90  100   91</div><div class="line">F |   85   84   90   91   96  178   90   91  105   90</div><div class="line">G |   81   84   84  104  102  105  197   75   79   89</div><div class="line">H |   84   99  107   86   82   78   92  205   79   88</div><div class="line">I |  102   72   88   94   87  103   94   92  187   81</div><div class="line">J |   87  100   90   75   76   95   72   95   95  215</div></pre></td></tr></table></figure>
<h2 id="正确的算法-The-correct-algorithm"><a href="#正确的算法-The-correct-algorithm" class="headerlink" title="正确的算法 The correct algorithm"></a>正确的算法 The correct algorithm</h2><p>下面，我们来看看性能高且正确的算法—— <code>Fisher_Yates算法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void ShuffleArray_Fisher_Yates(char* arr, int len)</div><div class="line">&#123;</div><div class="line">    int i = len, j;</div><div class="line">    char temp;</div><div class="line"> </div><div class="line">    if ( i == 0 ) return;</div><div class="line">    while ( i-- ) &#123;</div><div class="line">        j = rand() % (i+1);</div><div class="line">        temp = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个算法不难理解，看看测试效果（效果明显比前面的要好）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      1    2    3    4    5    6    7    8    9    10</div><div class="line">-----------------------------------------------------</div><div class="line">A |  107   98   83  115   89  103  105   99   94  107</div><div class="line">B |   91  106   90  102   88  100  102   97  112  112</div><div class="line">C |  100  107   99  108  101   99   86   99  101  100</div><div class="line">D |   96   85  108  101  117  103  102   96  108   84</div><div class="line">E |  106   89  102   86   88  107  114  109  100   99</div><div class="line">F |  109   96   87   94   98  102  109  101   92  102</div><div class="line">G |   94   95  119  110   97  112   89  101   89   94</div><div class="line">H |   93  102  102  103  100   89  107  105  101   98</div><div class="line">I |   99  110  111  101  102   79  103   89  104  102</div><div class="line">J |  105  112   99   99  108  106   95   95   99   82</div></pre></td></tr></table></figure>
<p>但是我们可以看到还是不完美。因为我们使用的<code>rand()</code>是伪随机数，不过已经很不错的。最大的误差在20%左右。</p>
<p>我们再来看看洗牌100万次的统计值，你会看到误差在6%以内了。这个对于伪随机数生成的程序已经很不错了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      1       2     3       4      5      6      7      8     9      10</div><div class="line">-------------------------------------------------------------------------</div><div class="line">A | 100095  99939 100451  99647  99321 100189 100284  99565 100525  99984</div><div class="line">B |  99659 100394  99699 100436  99989 100401  99502 100125 100082  99713</div><div class="line">C |  99938  99978 100384 100413 100045  99866  99945 100025  99388 100018</div><div class="line">D |  99972  99954  99751 100112 100503  99461  99932  99881 100223 100211</div><div class="line">E | 100041 100086  99966  99441 100401  99958  99997 100159  99884 100067</div><div class="line">F | 100491 100294 100164 100321  99902  99819  99449 100130  99623  99807</div><div class="line">G |  99822  99636  99924 100172  99738 100567 100427  99871 100125  99718</div><div class="line">H |  99445 100328  99720  99922 100075  99804 100127  99851 100526 100202</div><div class="line">I | 100269 100001  99542  99835 100070  99894 100229 100181  99718 100261</div><div class="line">J | 100268  99390 100399  99701  99956 100041 100108 100212  99906 100019</div></pre></td></tr></table></figure>
<h2 id="如何写测试案例"><a href="#如何写测试案例" class="headerlink" title="如何写测试案例"></a>如何写测试案例</h2><p>测试程序其实很容易写了。就是，设置一个样本大小，做一下统计，然后计算一下误差值是否在可以容忍的范围内。比如：</p>
<blockquote>
<p>样本：100万次<br>最大误差：10%以内<br>平均误差：5%以内 （或者：90%以上的误差要小于5%)</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>其实，以上的测试只是测试了牌在各个位置的概率。这个还不足够好。因为还可能会现在有Pattern的情况。如：每次洗牌出来的都是一个循环顺序数组。这完全可以满足我上面的测试条件。但是那明显是错的。所以，还需要统计每种排列的出现的次数，看看是不是均匀。但是，如果这些排列又是以某种规律出现的呢？看来，这没完没了了。</p>
<p>测试的确是一个很重要，并不简单的事情。谢谢所有参与讨论的人。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>之前忘贴了一个模拟我们玩牌洗牌的算法，现补充如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuffleArray_Manual</span><span class="params">(<span class="keyword">char</span>* arr, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> mid = len / <span class="number">2</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">5</span>; n++)&#123;</div><div class="line"> </div><div class="line">        <span class="comment">//两手洗牌</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;mid; i+=<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">char</span> tmp = arr[i];</div><div class="line">            arr[i] = arr[mid+i];</div><div class="line">            arr[mid+i] = tmp;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">//随机切牌</span></div><div class="line">        <span class="keyword">char</span> *buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*len);</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) &#123;</div><div class="line">            <span class="keyword">int</span> start= rand() % (len<span class="number">-1</span>) + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> numCards= rand()% (len/<span class="number">2</span>) + <span class="number">1</span>;</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (start + numCards &gt; len )&#123;</div><div class="line">                numCards = len - start;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="built_in">memset</span>(buf, <span class="number">0</span>, len);</div><div class="line">            <span class="built_in">strncpy</span>(buf, arr, start);</div><div class="line">            <span class="built_in">strncpy</span>(arr, arr+start, numCards);</div><div class="line">            <span class="built_in">strncpy</span>(arr+numCards, buf, start);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(buf);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来看看测试结果：（10万次）效果更好一些，误差在2%以内了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      1       2     3       4      5      6      7      8     9      10</div><div class="line">-------------------------------------------------------------------------</div><div class="line">A |  10002   9998   9924  10006  10048  10200   9939   9812  10080   9991</div><div class="line">B |   9939   9962  10118  10007   9974  10037  10149  10052   9761  10001</div><div class="line">C |  10054  10100  10050   9961   9856   9996   9853  10016   9928  10186</div><div class="line">D |   9851   9939   9852  10076  10208  10003   9974  10052   9992  10053</div><div class="line">E |  10009   9915  10050  10037   9923  10094  10078  10059   9880   9955</div><div class="line">F |  10151  10115  10113   9919   9844   9896   9891   9904  10225   9942</div><div class="line">G |  10001  10116  10097  10030  10061   9993   9891   9922   9889  10000</div><div class="line">H |  10075  10033   9866   9857  10170   9854  10062  10078  10056   9949</div><div class="line">I |  10045   9864   9879  10066   9930   9919  10085  10104  10095  10013</div><div class="line">J |   9873   9958  10051  10041   9986  10008  10078  10001  10094   9910</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Facebook User Group and Bipartite Graph]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/26/data%20structures%20and%20algorithms/interview/Facebook-User-Group-and-Bipartite-Graph/</url>
      <content type="html"><![CDATA[<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>大家都知道Facebook用户都是双向的好友，a是b的好友，那么b一定是a的好友，现在给定一个用户列表，其中有些用户是好友，有些不是，请判断，这些用户是否可以划分为两组，并且每组内的用户，互相都不是好友。如果能，请给出这个划分。</p>
<p>例子1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户：&#123;1, 2, 3&#125;</div><div class="line">好友关系：1-2， 2-3</div><div class="line">划分：&#123;1,3&#125; &#123;2&#125;</div></pre></td></tr></table></figure>
<p>例子2:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户&#123;1,2,3,4&#125;</div><div class="line">好友关系：1-2， 2-3， 3-4，4-1</div><div class="line">划分：&#123;1, 3&#125; &#123;2, 4&#125;</div></pre></td></tr></table></figure>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>有很多面试题比较直接，看到题目，面试者很自然的就想到用什么方法，这时候，往往面试官要的是bug-free的code；还有一些问题，不那么直接，那就是考察，应试者的分析问题、分解问题的能力。往往是一个相对复杂的问题，分解为我们见过的、相对简单的问题；还有一类问题，从实际当中来，这就需要有建模的能力，也可以说是把问题抽象出来的能力，然后才是分解成小的问题等。这样的题目，能够全面的考察应试者的能力。例如Facebook这个题目。</p>
<p>这个面试题来自Facebook的实际问题。像在我们国内，有很多同学在做新浪微博的数据挖掘，好友推荐、关系预测、圈子发现、转发分析、影响力分析等等，这些都是很实际、很有用的问题，每一个问题，都可以作为一个值得深入探讨的面试题。大家可以思考一下：这个问题可以归结为一个什么问题？排序？查找？树？图？确定这个，大概的解决方法，也基本可以确认。</p>
<p>相对而言，这个面试题目比较简单。因为建模的部分，已经在题目中给出了。简单思考，就发现是一个图分割的问题，既然是图，无非也就是深度优先，或者宽度优先遍历了，递归或者非递归的实现。Facebook的好友关系是双向的，意味着是无向图（新浪微博，twitter都是有向图）。然后，要把图划分为两组，这两组满足什么条件呢？组内没有边，组间有边。了解图结构的，立刻会想到，这就是一个二分图。</p>
<p>那问题很明显了，就是判断Facebook好友关系构成的图，是否是一个二分图？如果是，请找到这个划分。就是二分图判断+找到一个划分即可。</p>
<p>根据二分图的特性，一条边上的两个点，肯定是属于不同的组。如果它们出现在同一个组中，肯定就不是二分图了。怎么判断，一条边上的两个点，分属于不同的组呢？我们需要遍历图，如果找到一条边，两个节点，都在同一组，则不是二分图；如果图遍历完成之后，没有找到这样的边，则是二分图。我们在遍历的过程中，我们需要区分，一条边的两个节点分属于不同的组，这里我们用到了染色法。核心思想如下：</p>
<p>从某一个点开始，将这个节点染色为白色，并且开始广度优先遍历，找到与其相邻的节点，如果是二分图，相邻节点的颜色都应该不同。如果是黑色，则不变；如果是无色，则染成黑色；如果是白色，也就是同色，程序退出。当图遍历完毕时，没有相邻节点同色的，则是二分图，标记为白色和黑色的两组就是一个划分。</p>
<a id="more"></a>
<h2 id="Step-by-Step-Explanation"><a href="#Step-by-Step-Explanation" class="headerlink" title="Step by Step Explanation"></a>Step by Step Explanation</h2><p>E.g.1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户&#123;1,2,3,4&#125;</div><div class="line">好友关系：1-2， 2-3， 3-4，4-1</div><div class="line">划分：&#123;1, 3&#125; &#123;2, 4&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>steps</th>
<th>vertex visiting</th>
<th>neighbours</th>
<th>queue</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1: white</td>
<td>2: black, 4: black</td>
<td>2, 4</td>
</tr>
<tr>
<td>2</td>
<td>2: black</td>
<td>1: white, 3: white</td>
<td>4, 3</td>
</tr>
<tr>
<td>3</td>
<td>4: black</td>
<td>1: white, 3: white</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>3: white</td>
<td>2: black, 4: black</td>
<td>empty</td>
</tr>
</tbody>
</table>
<p>队列空，结束遍历。找到划分{1,3}白 {2,4}黑。</p>
<p>E.g.2<br>再看一个不是二分图的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">用户&#123;1，2，3，4&#125;</div><div class="line">关系：1-2，1-3，1-4，2-3，3-4</div></pre></td></tr></table></figure>
<p>判断步骤如下：</p>
<table>
<thead>
<tr>
<th>steps</th>
<th>vertex visiting</th>
<th>neighbours</th>
<th>queue</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1: white</td>
<td>2: black, 3: black, 4: black</td>
<td>2, 3, 4</td>
</tr>
<tr>
<td>2</td>
<td>2: black</td>
<td>1: white, 3: white (but is already black)</td>
<td>3, 4</td>
</tr>
</tbody>
</table>
<p>发现3矛盾了，则上面的关系，不够成二分图。</p>
<hr>
<p>借鉴于’待字闺中’的微信公众号</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java - Concurrency - Multi-Thread 1 - Implements Runnable or Extends Thread]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/23/java/concurrency/Java-Concurrency-Multi-Thread-1-Implements-Runnable-or-Extends-Thread/</url>
      <content type="html"><![CDATA[<h2 id="1-Difference-between-Process-and-Thread"><a href="#1-Difference-between-Process-and-Thread" class="headerlink" title="1. Difference between Process and Thread"></a>1. Difference between Process and Thread</h2><ul>
<li><code>Threads</code> are used for small tasks, whereas <code>processes</code> are used for more ‘heavyweight’ tasks – basically the execution of applications. </li>
<li><code>Threads</code> within the same process share the same address space, whereas different <code>processes</code> do not.</li>
<li>A process can have multiple threads, and at least one</li>
</ul>
<h2 id="2-Pros-and-Cons-for-Multi-Threads"><a href="#2-Pros-and-Cons-for-Multi-Threads" class="headerlink" title="2. Pros and Cons for Multi-Threads"></a>2. Pros and Cons for Multi-Threads</h2><ul>
<li>Pro: resolves the problem to run multiple parts at the same time</li>
<li>Cons: too many multi-threads will decrease the efficiency</li>
</ul>
<h2 id="3-JVM-multi-thread"><a href="#3-JVM-multi-thread" class="headerlink" title="3. JVM multi-thread"></a>3. JVM multi-thread</h2><p>There are at least <code>two threads</code> when JVM starts up</p>
<ul>
<li>the <code>main function thread</code></li>
<li>the <code>garbage collection thread</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subobj</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"subobj destroyed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Subobj();</div><div class="line">        <span class="keyword">new</span> Subobj();</div><div class="line"></div><div class="line">        System.gc();  <span class="comment">//启动系统垃圾回收器</span></div><div class="line"></div><div class="line">        <span class="keyword">new</span> Subobj();</div><div class="line">        sop(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="4-Thread-Class-in-Java"><a href="#4-Thread-Class-in-Java" class="headerlink" title="4. Thread Class in Java"></a>4. <code>Thread</code> Class in Java</h2><p>Java’s <code>Thread</code> class also implements <code>Runnable</code> interface.</p>
<h2 id="5-How-to-create-a-Java-Thread"><a href="#5-How-to-create-a-Java-Thread" class="headerlink" title="5. How to create a Java Thread"></a>5. How to create a Java Thread</h2><h3 id="1-Extends-Thread-class-and-Override-run-method"><a href="#1-Extends-Thread-class-and-Override-run-method" class="headerlink" title="1. Extends Thread class and Override run() method"></a>1. Extends <code>Thread</code> class and Override <code>run()</code> method</h3><ol>
<li>Define a class <code>MyThread</code> extends <code>Thread</code> class </li>
<li><code>Override</code> <code>run()</code> methods in <code>MyThread</code> class</li>
<li>Create an object <code>t</code> of <code>MyThread</code> class</li>
<li>Call <code>start()</code> method to start the thread, which results in executing <code>run()</code> method</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="comment">// 2.</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> avoid anotherMethod &#123;</div><div class="line">	<span class="comment">// 3.</span></div><div class="line">	MyThread t = <span class="keyword">new</span> MyThread();</div><div class="line">	</div><div class="line">	<span class="comment">// 4.</span></div><div class="line">	t.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-Implements-Runnable-interface-and-Override-run-method-Most-Frequently-Used"><a href="#2-Implements-Runnable-interface-and-Override-run-method-Most-Frequently-Used" class="headerlink" title="2. Implements Runnable interface and Override run() method (Most Frequently Used)"></a>2. Implements <code>Runnable</code> interface and Override <code>run()</code> method (Most Frequently Used)</h3><ol>
<li>Define a class that implements <code>Runnable</code> interface</li>
<li>Override <code>run()</code> methods in the impl class, which basically encapsulates the business logic to <code>run()</code> method</li>
<li><p>Create a new <code>Thread</code> object, and pass in the impl class to that instance as constructor parameter </p>
<p> Why? Because the business logic of a thread is all well encapsulated in the <code>run()</code> method, a <code>Thread</code> instance needs to be specified how it should run when initialized</p>
</li>
<li><p>Call <code>start()</code> method of that <code>Thread</code> instance</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">// 1.</div><div class="line">class MyRunnable implements Runnable &#123;</div><div class="line">	// 2.</div><div class="line">	@Override</div><div class="line">	public void run() &#123;</div><div class="line">		// ...</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void anotherMethod &#123;</div><div class="line">	// 3.</div><div class="line">	Thread t = new Thread(new MyRunnable());</div><div class="line">	</div><div class="line">	// 4.</div><div class="line">	t.start();</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"> </div><div class="line"></div><div class="line">## 6. Advantages to `implements Runnable` over `extends Thread`</div><div class="line"></div><div class="line">1. Separate and encapsulate the business logic of a thread from subclasses of `Thread`, which conforms to the core idea of object oriented programming</div><div class="line"></div><div class="line">2. Avoided the limitation of Java's single extension mechanism. </div><div class="line"></div><div class="line">    - When you `extends Thread` class, after that you can’t extend any other class which you required. (As you know, Java does not allow inheriting more than one class).</div><div class="line">    - When you `implements Runnable`, you can save a space for your class to extend any other class in future or now.</div><div class="line"></div><div class="line">3. `implements Runnable` allows sharing the same instance</div><div class="line"></div><div class="line">    - When you extends Thread class, each of your thread creates unique object and associate with it.</div><div class="line">    - When you implements Runnable, it shares the same object to multiple threads.</div><div class="line">    </div><div class="line">    </div><div class="line">The following example helps you to understand more clearly.</div><div class="line"></div><div class="line">```java</div><div class="line">class ImplementsRunnable implements Runnable &#123;</div><div class="line"></div><div class="line">    private int counter = 0;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        counter++;</div><div class="line">        System.out.println("ImplementsRunnable : Counter : " + counter);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ExtendsThread extends Thread &#123;</div><div class="line"></div><div class="line">    private int counter = 0;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        counter++;</div><div class="line">        System.out.println("ExtendsThread : Counter : " + counter);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ThreadVsRunnable &#123;</div><div class="line"></div><div class="line">    public static void main(String args[]) throws Exception &#123;</div><div class="line">        //Multiple threads share the same object.</div><div class="line">        ImplementsRunnable rc = new ImplementsRunnable();</div><div class="line">        Thread t1 = new Thread(rc);</div><div class="line">        t1.start();</div><div class="line">        Thread.sleep(1000); // Waiting for 1 second before starting next thread</div><div class="line">        Thread t2 = new Thread(rc);</div><div class="line">        t2.start();</div><div class="line">        Thread.sleep(1000); // Waiting for 1 second before starting next thread</div><div class="line">        Thread t3 = new Thread(rc);</div><div class="line">        t3.start();</div><div class="line"></div><div class="line">        //Creating new instance for every thread access.</div><div class="line">        ExtendsThread tc1 = new ExtendsThread();</div><div class="line">        tc1.start();</div><div class="line">        Thread.sleep(1000); // Waiting for 1 second before starting next thread</div><div class="line">        ExtendsThread tc2 = new ExtendsThread();</div><div class="line">        tc2.start();</div><div class="line">        Thread.sleep(1000); // Waiting for 1 second before starting next thread</div><div class="line">        ExtendsThread tc3 = new ExtendsThread();</div><div class="line">        tc3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Output of the above program.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ImplementsRunnable : Counter : 1</div><div class="line">ImplementsRunnable : Counter : 2</div><div class="line">ImplementsRunnable : Counter : 3</div><div class="line">ExtendsThread : Counter : 1</div><div class="line">ExtendsThread : Counter : 1</div><div class="line">ExtendsThread : Counter : 1</div></pre></td></tr></table></figure>
<p>In the <code>Runnable</code> interface approach, only one instance of a class is being created and it has been shared by different threads. So the value of counter is incremented for each and every thread access.</p>
<p>Whereas, <code>Thread</code> class approach, you must have to create separate instance for every thread access. Hence different memory is allocated for every class instances and each has separate counter, the value remains same, which means no increment will happen because none of the object reference is same.</p>
<blockquote>
<p>So, use <code>Runnable</code> interface when you want to access the same resource from the group of threads. Avoid using <code>Thread</code> class here, because multiple objects creation consumes more memory and it becomes a big performance overhead.</p>
</blockquote>
<p>Reference: <a href="https://manikandanmv.wordpress.com/tag/extends-thread-vs-implements-runnable/" target="_blank" rel="external">https://manikandanmv.wordpress.com/tag/extends-thread-vs-implements-runnable/</a></p>
<h2 id="Methods-in-Thread-class"><a href="#Methods-in-Thread-class" class="headerlink" title="Methods in Thread class"></a>Methods in Thread class</h2><p>We can get the name of a <code>Thread</code> via <code>getName()</code>.</p>
<p>Thread’s naming convention is like <code>Thread-#(start from 0)</code>  </p>
<p>The main thread’s name is <code>main</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(Thread.currentThread().getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</div><div class="line">        </div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(myRunnable);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(myRunnable);</div><div class="line">        Thread t3 = <span class="keyword">new</span> Thread(myRunnable);</div><div class="line">        Thread t4 = <span class="keyword">new</span> Thread(myRunnable);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">        t4.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Thread-0</div><div class="line">Thread-2</div><div class="line">Thread-1</div><div class="line">Thread-3</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - What is dependency injection and how it works in Spring]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/21/spring/Spring-What-is-dependency-injection-and-how-it-works-in-Spring/</url>
      <content type="html"><![CDATA[<h2 id="How-Dependency-Injection-works"><a href="#How-Dependency-Injection-works" class="headerlink" title="How Dependency Injection works"></a>How Dependency Injection works</h2><p>Traditionally, each object is responsible for obtaining its own references to the objects it collaborates with (its dependencies). This can lead to highly coupled and hard-to-test code.</p>
<p>E.g.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DamselRescueKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> RescueDamselQuest quest;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DamselRescueKnight</span><span class="params">()</span> </span>&#123;</div><div class="line">		quest = <span class="keyword">new</span> RescueDamselQuest();  <span class="comment">// Tightly coupled to RescueDamselQuest!</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarkOnQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">		quest.embark();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With DI, objects are given their dependencies at creatiion time by some third party that coordinates each object in the system. Objects aren’t expected to create or obtain their dependencies.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Quest quest;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest q)</span> </span>&#123;  <span class="comment">// Quest is injected</span></div><div class="line">		quest = q;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarkOnQuest</span><span class="params">()</span> </span>&#123;</div><div class="line">		quest.embark();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>BraveKnight</code> is given a quest at construction time as a constructor argument, instead of creating its own. This is a <code>constructor injection</code>.</p>
<p>What’s more, the quest he’s given is typed as <code>Quest</code>, <code>an interface that all quests implement</code>. So <code>BraveKnight</code> could embark on a <code>RescueDamselQuest</code>, a <code>SlayDragonQuest</code>, a <code>MakeRoundTableRounderQuest</code>, or any other Quest implementation he’s given.</p>
<p>The point is that <code>BraveKnight</code> isn’t coupled to any specific implementation of Quest. It doesn’t matter to him what kind of quest he’s asked to embark on, as long as it implements the <code>Quest</code> interface. </p>
<blockquote>
<p>One of the most common ways a dependency is swapped out is with a mock implementation during testing</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnightTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">knightShouldEmbarkQuest</span><span class="params">(@Mocked <span class="keyword">final</span> Quest q)</span> </span>&#123;</div><div class="line">		BraveKnight bk = <span class="keyword">new</span> BraveKnight(q);</div><div class="line">		bk.embarkOnQuest();</div><div class="line">		<span class="keyword">new</span> Verifications &#123;&#123;</div><div class="line">		    q.embark(); times = <span class="number">1</span>;</div><div class="line">	    &#125;&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Injecting-a-Quest-into-a-Knight-Wiring"><a href="#Injecting-a-Quest-into-a-Knight-Wiring" class="headerlink" title="Injecting a Quest into a Knight - Wiring"></a>Injecting a Quest into a Knight - Wiring</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlayDragonQuest</span> <span class="keyword">implements</span> <span class="title">Quest</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> PrintStream ps;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SlayDragonQuest</span><span class="params">(PrintStream p)</span> </span>&#123;</div><div class="line">		ps = p;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embark</span><span class="params">()</span> </span>&#123;</div><div class="line">		ps.println(<span class="string">"Embarking on quest to slay dragon!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SlayDragonQuest</code> implements the <code>Quest</code> interface, making it a good fit for <code>BraveKnight</code>. But how can you give <code>SlayDragonQuest</code> to <code>BrageKnight</code>?</p>
<p>The act of creating associations between application components is commonly referred to as <code>wiring</code>. </p>
<h3 id="Java-based-configuration"><a href="#Java-based-configuration" class="headerlink" title="Java-based configuration"></a>Java-based configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnightConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Quest <span class="title">quest</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SlayDragonQuest(System.out);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Knight <span class="title">knight</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> BraveKnight(quest());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Whether you use <code>XML-based</code> or <code>Java-based</code> configuration, the  benefits are: although <code>BraveKnight</code> depends on a <code>Quest</code>, it doesn’t know what type of <code>Quest</code> it will be given or where that Quest will come from. This makes it possible to change those dependencies with no changes to the depending classes.</p>
<h2 id="Seeing-it-work"><a href="#Seeing-it-work" class="headerlink" title="Seeing it work"></a>Seeing it work</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfigurationMain</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		AbstractApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(KnightConfig.class);</div><div class="line">        <span class="comment">// AbstractApplicationContext context = new ClassPathXmlApplicationContext("app-context.xml");</span></div><div class="line">		Knight knight = context.getBean(Knight.class);</div><div class="line">		knight.embarkOnQuest();</div><div class="line">		context.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In a Spring application, an <code>application context</code> loads bean definitions and wired them together. The Spring <code>application context</code> is fully responsible for the creation of and wiring of the objects that make up the application.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How did I build a custom dynamic ZooKeeper management and migration framework and an asynchronous job framework for Tableau Server 11]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/16/system%20design/project%20experience/How-did-I-build-a-custom-dynamic-ZooKeeper-management-and-migration-framework-and-an-asynchronous-job-framework-for-Tableau-Server-11/</url>
      <content type="html"><![CDATA[<p>First of all, Tableau Server 11 is not out yet. Tableau Server 10 is just released yesterday.</p>
<h2 id="Product-Strategy-Overview"><a href="#Product-Strategy-Overview" class="headerlink" title="Product Strategy Overview"></a>Product Strategy Overview</h2><p>Tableau Server is an enterpise data analytics and visualization platform, and our customers are business people. In order to make the project usage experience as smooth as possible, we believe we should enable business people to manage Tableau Server on their own without any help from enterprise IT. </p>
<p>Therefore, one of the most critical goals for developing Tableau Server is that Tableau will provide GUIs and built-in workflows to automate as many managing processes as possible.  </p>
<h2 id="Project-and-Feature-Requirements"><a href="#Project-and-Feature-Requirements" class="headerlink" title="Project and Feature Requirements"></a>Project and Feature Requirements</h2><p>Tableau core server team is building a new Java-based Tableau Server architecutre for Tableau Server 11 (target release, might change in the future) to replace the old jruby one.</p>
<p>Notably, old jruby Tabadmin persisting cluster-wide configuration and topology information in a local file (workgroup.yml). The role of ZooKeeper (referenced as ZK) is only used a distributed lock and a temp data store - it keeps some vilatile data that can be lost or wiped out and no one cares about it. This characteristic also makes managing and migrating ZooKeeper very very easy - you only need to clean up all data in existing ZooKeeper nodes, deploy the ZooKeeper bits to new nodes, and bring the new cluster up. </p>
<p>Unlike the old world, new Tabadmin will persist all essential configuration and topology data in ZK as a single source of truth, which makes managing, expanding, and migrating ZK much harder than before. </p>
<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>The problem we are facing is how to maintain ZK’s data and expand/shrink ZK cluster, as well as making this process super reliable and easy for users.</p>
<p>Let’s elaborate more about the problem.</p>
<p>Say we start with a single Tableau Server node A, which has a single node ZK cluster runs on it. Then we want to expand the Tableau Server cluster from 1 node (A) to 3 nodes (A, B, C), as well as the ZK cluster runs on top of it. How to achieve that?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(A) -&gt; (A, B, C)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Non-Goal"><a href="#Non-Goal" class="headerlink" title="Non-Goal"></a>Non-Goal</h3><p>For customers who already have a ZK cluster in house and want to reuse that cluster, Tableau Server provides configurations that enable them to do so. That is not part of the project, and will not be discussed here. This project is focusing on smoothing the experience of managing Tableau Server’s built-in ZooKeeper cluster.</p>
<h3 id="Naive-Approach"><a href="#Naive-Approach" class="headerlink" title="Naive Approach"></a>Naive Approach</h3><p>The naive approach is to shut down (A), deploy ZK bits on B and C, change their configuration files, and bring up (A, B, C). Well, this can lead to disasters. The reason being that ZK runs on a quorum mode, means that if more than half nodes in a ZK cluster form a quorum, their decision will be the final decision that all nodes should follow. In this case, if B and C come up first and form a quorum, their decision will be “there’s no data in our cluster”. When A joins them, B and C will force A to delete its data, causing data loss.</p>
<h3 id="ZooKeeper’s-built-in-Approach"><a href="#ZooKeeper’s-built-in-Approach" class="headerlink" title="ZooKeeper’s built-in Approach"></a>ZooKeeper’s built-in Approach</h3><p>Actually all developers using ZooKeeper faces the same problem. Think about running a ZooKeeper in your data center. If a ZooKeeper node fails, the common practice is that admin will try to bring it back manually/through scripts. If the machine dies, admins have to bring up a new machine, change its IP to match the failed one, and join it to the cluster. And you must know that machine failure is more than normal.</p>
<p>So ZooKeeper 3.5 starts to build a native rolling based approach to solve this common problem. The principle is to bring up a new node each time, join it to the existing cluster, wait them to sync up and become stable, bring up another new node.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(A) -&gt; (A, B) -&gt; (A, B, C)</div></pre></td></tr></table></figure>
<p>The problem is that ZK is not originally developed to support this use case. It involves lots of refactoring, produces lots of bugs, and is not stable for production.</p>
<p>Take a look at ZK’s <a href="https://zookeeper.apache.org/" target="_blank" rel="external">release page</a>. 3.5.0 was released around 3 years ago. Apache then release 3.5.1 and 3.5.2, both are alpha version. They themselves even don’t recommend using it for production.</p>
<h3 id="Other-Open-Sourced-Approach-Framework"><a href="#Other-Open-Sourced-Approach-Framework" class="headerlink" title="Other Open-Sourced Approach / Framework"></a>Other Open-Sourced Approach / Framework</h3><p>The closet solution we found online is Netflix’s Exebitor library. Exhibitor is a Java supervisor system for ZooKeeper built and <a href="https://github.com/Netflix/exhibitor/wiki" target="_blank" rel="external">opensourced by Netflix</a></p>
<p>Though Exhibitor is an off-the-shelf zookeeper-managing library from Netflix, we found Exhibitor does not fit our needs because it also takes the way of rolling reconfiguration. What’s worse is that it’s not even a native solution, it’s only a wrapper. It’s so prone to errors that even Netflix doesn’t recommend using it.</p>
<blockquote>
<p>Netflix has warned users “Experience has shown that rolling config changes can lead to runtime problems with the ZooKeeper ensemble.” as stated <a href="https://github.com/Netflix/exhibitor/wiki/Configuration-UI" target="_blank" rel="external">here</a></p>
</blockquote>
<p>Our conclusion is that Exhibitor is more of a monitoring tool with good UI, rather than a true automated ZK management framework.</p>
<h3 id="Our-Tableau-Approach"><a href="#Our-Tableau-Approach" class="headerlink" title="Our Tableau Approach"></a>Our Tableau Approach</h3><p>We took a completely new approach that is different from any solution on the market.</p>
<p>The core idea behind the scene is that Tableau Server will run two ZooKeeper clusters side by side to facilitate migration. If they overlap on a machine, they will run on different ports. Besides, this migration framework relies on our async job framework on top of ZooKeeper.</p>
<h4 id="Our-New-Asynchronous-Job-Framework-in-Tableau-Server-11"><a href="#Our-New-Asynchronous-Job-Framework-in-Tableau-Server-11" class="headerlink" title="Our New Asynchronous Job Framework in Tableau Server 11"></a>Our New Asynchronous Job Framework in Tableau Server 11</h4><p>First thing first, the new <code>Async Job</code> Framework that I’m talking about is different from <code>Async Background Jobs</code>.</p>
<p><code>Async Background Jobs</code> are taken care of by backgrounder processes in Tableau Server. Those jobs are all kinds of scheduled jobs that can be run in parallel by multiple backgrounders.</p>
<p><code>Async Jobs</code> in new Tableau Server are a serial of configuring and initializing jobs that have to be executed in order and one at a time, to perform changes to cluster Configuration and Topology.</p>
<p>Each of our Async Job is created as <code>PERSISTENT_SEQUENTIAL</code> node under a ZK node <code>/asyncjobs</code>, so that name of each async job node looks like <code>asyncjob00000000001</code>, <code>asyncjob00000000002</code>, and keep on increasing. How that works is discussed <a href="http://phoenixjiangnan.github.io/2016/07/07/distributed%20system/zookeeper/How-does-ZooKeeper-s-persistent-sequential-id-work/">here</a>.</p>
<p>Other Components involved are:</p>
<ul>
<li><p>Configuration / Topology</p>
<ul>
<li>key-values pairs stored as string binary in a ZK node</li>
</ul>
</li>
<li><p>Agent </p>
<ul>
<li>Runs on every machine    . All Agents are the same.</li>
<li>Does NOT make any decision but execute whatever commands it receives, from either Configuration/Topology in ZooKeeper or commands issued by users on terminal</li>
<li><p>Controls the actual life cycle of ZK</p>
<ul>
<li>Start/stop local ZK instance on a given port</li>
<li>Create/delete/update zoo.cfg and myid files to support cluster migration</li>
<li>Restart itself when a new ZK connection string appear in Configuration </li>
</ul>
</li>
</ul>
</li>
<li><p>Controller</p>
<ul>
<li>Runs on every machine. Only one Controller across the cluster is the Controller Leader (selected by Leader Election with Curator).</li>
<li>Any Controller can create Async Jobs, but only Controller Leader can execute Async Jobs</li>
<li><p>The Controller Leader will curate the whole ZK migration process</p>
<ul>
<li>Read/write Topology (which machines run ZK) and Configuration (ZK connection string) from/to both old and new ZK clusters</li>
<li>Trigger rollback or recover from a broken situation if anything goes wrong</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="High-Level-Steps"><a href="#High-Level-Steps" class="headerlink" title="High Level Steps"></a>High Level Steps</h4><p>The high level steps for migrating from (A) to (A, B, C) are like this: </p>
<ol>
<li><p>Take a global lock of ZK, so that no one can write/update important data during migration</p>
</li>
<li><p>First identify the machines where new cluster is targeted to sit on, and create a new Async Job to cluster (A1) - say <code>AsyncJob(A, B, C)</code> in our case. The async job is composed of several substeps</p>
</li>
<li><p>Substep 1. Controller Leader will add the target cluster as a config key to Configuration in ZooKeeper. Deploy ZK bits to B and C, and create data dirs and configurations for (A2, B2, C2)</p>
</li>
<li><p>Substep 2. Bring up new ZK cluster (A2, B2, C2), migrate all data (all persisitent data excluding async jobs. Will discuss in detail later in this post) from (A1) to (A2, B2, C2)</p>
</li>
<li><p>Substep 3. Migrate all persistent data excluding asyncjobs by backup() and restore(). Do a live check by iterating trees in both ZK cluster. At the end, create the same <code>AsyncJob(A, B, C)</code> in new ZK cluster</p>
</li>
<li><p>Substep 4. Begin a two phase commmit</p>
<ol>
<li>Ask all clients to try to connect to the new ZK cluster. If anyone is missing, roll back</li>
<li>If all shows up, update all clients’ ZK connection string. Clients have built-in mechanism to watch its configuration file, and will restart automatically when its ZK connection string is updated</li>
<li>If any client doesn’t show up in new ZK after the switch, manual intervention is required. Will discuss later in the post. </li>
</ol>
</li>
<li><p>When Controller Leader restarts and comes up, it ensures all clients show up in new ZK (A2, B2, C2). </p>
<ol>
<li>If so, it proceed to substep 5 to clean up the old ZK cluster (A1), and mark the migration as <code>Succeed</code>.</li>
<li>If not, an error message will be shown to users to ask for manual intervention. The old ZK cluster won’t be deleted.</li>
</ol>
</li>
<li><p>Release the global lock so clients can resume operations</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(A1) -&gt; ((A1, A2), B2, C2)</div></pre></td></tr></table></figure>
<h4 id="More-Details-that-are-Important-to-Keep-In-Mind"><a href="#More-Details-that-are-Important-to-Keep-In-Mind" class="headerlink" title="More Details that are Important to Keep In Mind"></a>More Details that are Important to Keep In Mind</h4><ul>
<li><p>Controller Leader need to lock() both ZK cluster to prevent data being modified during the migration, and releases locks after the migration finishes.</p>
</li>
<li><p>The # of ZK instances is required to be an odd number less or equal to 7, because 1) ZK quorum mechanism so that even number of ZK instances doesn’t make sense 2) too many ZK will not improve the stability of TS and may bring troubles (thinking of fsync issue).</p>
<p>  So ZK migration scenarios are as followed:</p>
<pre><code>The # of old ZK cluster &lt;-&gt; # of new ZK cluster (machines here may overlap or be totally different ones)  
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 &lt;-&gt; 3</div><div class="line">1 &lt;-&gt; 5</div><div class="line">3 &lt;-&gt; 3</div><div class="line">3 &lt;-&gt; 5</div><div class="line">5 &lt;-&gt; 5</div></pre></td></tr></table></figure>
<ul>
<li>Why Not migrate all async jobs?<ul>
<li>Old jobs are not necessary to be there. As I mentioned above, <code>Async Jobs</code> in new Tableau Server are a serial of configuring and initializing jobs that have to be executed in order and one at a time, to perform changes to cluster Configuration and Topology. Thus, anytime you migrate ZK, it means the Topology has changed, and you need to rerun all those serial jobs again. Thus, there’s no need to migrate them.</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How did I build a Facebook Messenger chatbot for Tableau's 'VizOfTheDay' feed]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/10/system%20design/project%20experience/How-did-I-build-a-Facebook-Messenger-chatbot-for-Tableau-s-VizOfTheDay-feed/</url>
      <content type="html"><![CDATA[<h2 id="What-is-Viz-Of-The-Day"><a href="#What-is-Viz-Of-The-Day" class="headerlink" title="What is Viz Of The Day"></a>What is <em>Viz Of The Day</em></h2><p>It’s a Tableau Public product used mainly for promoting Tableau as a brand.</p>
<p><a href="https://public.tableau.com/s/gallery" target="_blank" rel="external">https://public.tableau.com/s/gallery</a></p>
<h2 id="What-is-Facebook-Messenger-chatbot"><a href="#What-is-Facebook-Messenger-chatbot" class="headerlink" title="What is Facebook Messenger chatbot"></a>What is Facebook Messenger chatbot</h2><p><a href="https://developers.facebook.com/blog/post/2016/04/12/bots-for-messenger/" target="_blank" rel="external">https://developers.facebook.com/blog/post/2016/04/12/bots-for-messenger/</a></p>
<h2 id="What-can-my-bot-do"><a href="#What-can-my-bot-do" class="headerlink" title="What can my bot do?"></a>What can my bot do?</h2><ul>
<li>Users can query VizOfTheDay on any date through either a hardcoded format, or natural language (which will be processed by wit.ai). If the bot doesn’t find that or cannot recognize the message, it will return a random one for users.</li>
<li>Users can subscribe to VizOfTheDay, so that when a new viz is published on Tableau Public, users will be notified on Messenger App by a push notification. Of course, they can also unsubscribe it.</li>
</ul>
<h2 id="How-does-the-system-look-like"><a href="#How-does-the-system-look-like" class="headerlink" title="How does the system look like"></a>How does the system look like</h2><ul>
<li>Backend running on a single AWS EC2</li>
<li>ELB as gateway, to bind a domain name for https</li>
<li>Using DynamoDB for storage</li>
<li>Calling Facebook Messenger API to create UI</li>
<li>Taking advantages of wit.ai for some natural language processing</li>
</ul>
<h2 id="Modules-and-their-Responsibilities"><a href="#Modules-and-their-Responsibilities" class="headerlink" title="Modules and their Responsibilities:"></a>Modules and their Responsibilities:</h2><ul>
<li>FeedProcessor<ul>
<li>periodically retrieves VizOfTheDay from a Tableau Public endpoint</li>
<li>serves queries of viz on a specified date (can be today or any date before)</li>
</ul>
</li>
<li>Controller<ul>
<li>receives, processes, and interprets requests from Facebook Messenger</li>
<li>distributes interpretted requests to corresponding services</li>
</ul>
</li>
<li>Response Service<ul>
<li>Takes responsibilities of replying requests</li>
<li>Supports different kind of templates, from pure text, pure thumbnails, to a combination of text thumbnails, and multiple tabs</li>
</ul>
</li>
<li>User Service<ul>
<li>Stores and serves queries on users’ meta data (id, first and last name, etc) and subscription options (subscribed or not)</li>
<li>Data is cached in memory for faster access to properties like first name and subscription option</li>
<li>Data is persisted in DynamoDB</li>
</ul>
</li>
<li>Profile Querying Service<ul>
<li>Takes a user id and query its meta data against Facebook Graph API</li>
</ul>
</li>
<li>Push Notifier Service<ul>
<li>Runs daily</li>
<li>Once detects a new viz from FeedProcessor, push it to all subscribed users by getting users from User Service</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">            Facebook Messenger API</div><div class="line">                    |</div><div class="line">                    |</div><div class="line">                 AWS ELB</div><div class="line">                    |</div><div class="line">                    |</div><div class="line">                 AWS EC2</div><div class="line">                    |</div><div class="line">                    |      for interpretation</div><div class="line">                Controller ----------- wit.ai</div><div class="line">                    |                   |</div><div class="line">                    |                   |</div><div class="line">                ------------------------|</div><div class="line">     enqueue id |                       |</div><div class="line">                |                       |</div><div class="line">                |                       |</div><div class="line">DynamoDB -- User Service  ------  Response Service</div><div class="line">                |            |                |</div><div class="line">                |            |                |</div><div class="line">Profile Querying Serivce     |                |</div><div class="line">                             |                |</div><div class="line">                        Push Notifier         |</div><div class="line">                             |                |</div><div class="line">                             |                |</div><div class="line">                             |                |</div><div class="line">                       Feed Processor----------</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Some-Design-Tradeoffs"><a href="#Some-Design-Tradeoffs" class="headerlink" title="Some Design Tradeoffs"></a>Some Design Tradeoffs</h2><h3 id="Whether-to-cache-users-in-memory"><a href="#Whether-to-cache-users-in-memory" class="headerlink" title="Whether to cache users in memory"></a>Whether to cache users in memory</h3><ul>
<li>Pros: faster queries, better performance</li>
<li><p>Concerns: </p>
<ul>
<li><p>Can the data fit in memory?<br>  Yes, and it’s based on an estimation of user numbers * data size. </p>
<p>  E.g. let’s assume the number of uses is 100,000, which is already much more than enough. For each single user, the metadata and its size are </p>
<ul>
<li>user id - long, 64 bit = 8 byte</li>
<li>user names - string, assume it’s of 20 chars = 20 * 16 bits = 40 byte</li>
<li>total size = 100,000 <em> (40 + 8) byte ~ 100,000 </em> 50 byte = 5,000,000 byte = 5 mb</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Single-machine-or-multiple"><a href="#Single-machine-or-multiple" class="headerlink" title="Single machine or multiple"></a>Single machine or multiple</h3><ul>
<li>A single machine is enough, based on estimation of memory size, network IO, disk, etc</li>
<li>Developing a monolith code running on a single box is really agile</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Inverted Index]]></title>
      <url>https://phoenixjiangnan.github.io/2016/08/10/machine%20learning/Inverted-Index/</url>
      <content type="html"><![CDATA[<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>In computer science, an <code>inverted index</code> (also referred to as postings file or inverted file) is an index data structure storing a mapping from content, such as words or numbers, to its locations in a database file, or in a document or a set of documents (named in contrast to a Forward Index, which maps from documents to content). </p>
<p>The purpose of an inverted index is to allow fast full text searches, at a cost of increased processing when a document is added to the database. The inverted file may be the database file itself, rather than its index. It is the most popular data structure used in document retrieval systems, used on a large scale for example in search engines. Additionally, several significant general-purpose mainframe-based database management systems have used inverted list architectures.</p>
<blockquote>
<p>The inverted index data structure is a central component of a typical search engine indexing algorithm. A goal of a search engine implementation is to optimize the speed of the query: <code>find the documents where word X occurs</code>. </p>
</blockquote>
<p>Once a forward index is developed, which stores lists of words per document, it is next inverted to develop an inverted index. Querying the forward index would require sequential iteration through each document and to each word to verify a matching document. The time, memory, and processing resources to perform such a query are not always technically realistic. Instead of listing the words per document in the forward index, the inverted index data structure is developed which lists the documents per word.</p>
<p>With the inverted index created, the query can now be resolved by jumping to the word id (via random access) in the inverted index.</p>
<h2 id="Core-Concept-Explained"><a href="#Core-Concept-Explained" class="headerlink" title="Core Concept Explained"></a>Core Concept Explained</h2><blockquote>
<p><code>Inverted Index</code> is designed to allow very fast full-text searches. </p>
</blockquote>
<p>An <code>inverted index</code> consists of </p>
<blockquote>
<ul>
<li>a list of all the unique words that appear in any document, and</li>
<li>for each word, a list of the documents in which it appears.</li>
</ul>
</blockquote>
<p>For example, let’s say we have two documents, each with a <code>content</code> field containing the following:</p>
<ul>
<li>The quick brown fox jumped over the lazy dog</li>
<li>Quick brown foxes leap over lazy dogs in summer</li>
</ul>
<p>To create an inverted index, we first split the <code>content</code> field of each document into separate words (which we call terms, or tokens), create a sorted list of all the unique terms, and then list in which document each term appears. The result looks something like this:</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Doc_1</th>
<th>Doc_2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Quick</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>The</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>brown</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>dog</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>dogs</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>fox</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>foxes</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>in</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>jumped</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>lazy</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>leap</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>over</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>quick</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>summer</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>the</td>
<td>X</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>Now, if we want to search for <code>quick brown</code>, we just need to find the documents in which each term appears:</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Doc_1</th>
<th>Doc_2</th>
</tr>
</thead>
<tbody>
<tr>
<td>brown</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>quick</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Both documents match, but the first document has more matches than the second. If we apply a naive <code>similarity algorithm</code> that just counts the number of matching terms, then we can say that the first document is a better match—is <code>more relevant</code> to our query—than the second document.</p>
<p>But there are a few problems with our current inverted index:</p>
<ul>
<li><code>Quick</code> and <code>quick</code> appear as separate terms, while the user probably thinks of them as the same word.</li>
<li><code>fox</code> and <code>foxes</code> are pretty similar, as are <code>dog</code> and <code>dogs</code>; They share the same root word.</li>
<li><code>jumped</code> and <code>leap</code>, while not from the same root word, are similar in meaning. They are synonyms.</li>
</ul>
<p>With the preceding index, a search for <code>+Quick +fox</code> wouldn’t match any documents. (Remember, a preceding <code>+</code> means that the word must be present.) Both the term <code>Quick</code> and the term <code>fox</code> have to be in the same document in order to satisfy the query, but the first doc contains <code>quick fox</code> and the second doc contains <code>Quick foxes</code>.</p>
<p>Our user could reasonably expect both documents to match the query. We can do better.</p>
<p>If we normalize the terms into a standard format, then we can find documents that contain terms that are not exactly the same as the user requested, but are similar enough to still be relevant. For instance:</p>
<ul>
<li><code>Quick</code> can be lowercased to become <code>quick</code>.</li>
<li><code>foxes</code> can be stemmed–reduced to its root form—to become <code>fox</code>. Similarly, <code>dogs</code> could be stemmed to <code>dog</code>.</li>
<li><code>jumped</code> and <code>leap</code> are synonyms and can be indexed as just the single term <code>jump</code>.</li>
</ul>
<p>Now the index looks like this:</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Doc_1</th>
<th>Doc_2</th>
</tr>
</thead>
<tbody>
<tr>
<td>brown</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>dog</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>fox</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>in</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>jump</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>lazy</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>over</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>quick</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>summer</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>the</td>
<td>X</td>
<td>X</td>
</tr>
</tbody>
</table>
<p>But we’re not there yet. Our search for <code>+Quick +fox</code> would still fail, because we no longer have the exact term <code>Quick</code> in our index. However, if we apply the same normalization rules that we used on the content field to our query string, it would become a query for <code>+quick +fox</code>, which would match both documents!</p>
<blockquote>
<p><strong>Note</strong><br>This is very important. You can find only terms that exist in your index, so both the indexed text and the query string must be normalized into the same form.</p>
</blockquote>
<p>This process of 1tokenization1 and 1normalization1 is called <code>analysis</code>, which we discuss in the next section.</p>
<hr>
<p>Reference: </p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/inverted-index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/guide/current/inverted-index.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How did I reduce Tableau Server's downtime in a Postgres failover from 3 min to 1 sec]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/26/system%20design/project%20experience/How-did-I-reduce-Tableau-Server-s-downtime-in-a-Postgres-failover-from-3-min-to-1-sec/</url>
      <content type="html"><![CDATA[<p>Another project I did in the middle of last year is to reduce the downtime of Tableau Server during a Postgres failover. I was able to significantly cut the downtime from 3 min to 1 sec. Here is how I did it.</p>
<h2 id="Background-How-does-Tableau-Server-failover-on-Postgres-before"><a href="#Background-How-does-Tableau-Server-failover-on-Postgres-before" class="headerlink" title="Background - How does Tableau Server failover on Postgres before?"></a>Background - How does Tableau Server failover on Postgres before?</h2><p>Previously, Tableau Server uses a properties config file to store connection information of the Active Postgres. The file contains something like this,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//.properties file</div><div class="line">primary.postgres: &lt;DNS name&gt;</div><div class="line">primary.port: &lt;port&gt;</div></pre></td></tr></table></figure>
<p>When <code>PostgresManager</code>, the class that manages Postgres, determines the Active Postgres is dead, it overrides the old config file with new properties pointing to the new Active Postgres, which is just promoted from Passive Postgres.</p>
<p>All other components (distributed file store, backgrounders, web portal, data servers) that talks to Postgres watch that config file. When that file changes, components reload the file, and will restart themselves if the new key-values pairs.</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>There are a bunch of issues with this approach:</p>
<ul>
<li>There’s a huge downtime gap, which can be as big as three minutes for all those components to restart. All active sessions will be kicked out, and users cannot do anything before the new Postgres come up</li>
<li>Lots of services lose their state during restart, especially cached data</li>
</ul>
<a id="more"></a>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The most straightforward question is, “is it possible to switch connections between Postgres at runtime without having to restart each process?”</p>
<p>The answer is yes!</p>
<p>Most Tableau Server services are written in Spring. Spring has a nice datasource class called <code>AbstractRoutingDataSource</code>, which is kind of a proxy that can dynamically route db requests based on a key. In our case, the key is the <code>&lt;DNS name&gt;</code> of <code>primary.posgres</code> in the config file.</p>
<p>What I did is to make each process watch the config file and update their internal key upon file updates. Therefore, now the db requests can be immediately routed to the new active postgres during a failover within 1 sec, rather than being down for more than 3 mins.</p>
<p>How <code>AbstractRoutingDataSource</code> works is presented <a href="http://phoenixjiangnan.github.io/2016/03/25/spring/Spring-Dynamic-Datasource/">here</a></p>
<p>Some information about how we monitor Postgres is covered <a href="http://phoenixjiangnan.github.io/2016/07/23/system%20design/How-did-I-improved-our-system-monitoring-accuracy-from-40-50-to-99/">here</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How did I improved our system monitoring accuracy from ~40%/50% to ~99%]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/23/system%20design/project%20experience/How-did-I-improved-our-system-monitoring-accuracy-from-40-50-to-99/</url>
      <content type="html"><![CDATA[<p>Here is some experience of the work I did last year. When I first got assigned to bugs to this area, the stream of bugs seem never end - due to bad design, bugs kept coming. The accuracy is as low as around 50%, and QA generaously filed bugs to me without any hesitation. </p>
<p>Suffered from it for a while, I eventually determined to refactor the design. I ended up raising the accuracy significantly up to ~99%, and I haven’t heard any bugs since then, which was 1 year ago. </p>
<p>So I’m gonna talk about how the original system works, what the problems it had, and how I improved our system monitoring accuracy from 50% to ~99%.</p>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Tableau Server is on-premise solution for enterprise business intelligence and data visualization. A cluster of Tableau Server runs like this:</p>
<ol>
<li>Processes like <code>gateways</code>, <code>filestores</code>, <code>vizportals</code> (our web portal), <code>backgrounders</code>, and other processes are scattered across nodes</li>
<li>There’s a <code>Cluster Controller</code> runs on each node within the cluster, and only one of them is the <code>Leader</code></li>
<li>We run <code>Postgres</code> as our database. Users need to specify a few configurations for <code>Postgres</code>, like which two machines will run the active <code>Postgres</code> and the standby <code>Postgres</code>, and which machine runs the preferred active <code>Postgres</code>. For machines where <code>Postgres</code> reside, <code>Cluster Controller</code> runs <code>PostgresManager</code> to control the lifecycle of the database. <code>Active PostgresManager</code> runs active <code>Postgres</code>, and <code>passive PostgresManager</code> manages standby <code>Postgres</code> </li>
</ol>
<a id="more"></a>
<h2 id="How-the-original-monitoring-service-perform"><a href="#How-the-original-monitoring-service-perform" class="headerlink" title="How the original monitoring service perform"></a>How the original monitoring service perform</h2><p>Monitoring Service only runs on <code>Leader of Cluster Controller</code></p>
<h3 id="Polled-Service"><a href="#Polled-Service" class="headerlink" title="Polled Service"></a>Polled Service</h3><ul>
<li>Monitoring Service periodically query all components across the cluster every 10 sec. So it would be idealy 6 queries/min regardless of clock shift. The query state would be either <code>UP</code> or <code>DOWN</code>.</li>
<li>Monitoring Service maintains only the latest 6 query results. If 50% or more percentage results are DOWN, Monitoring will take the component as <code>DOWN</code>; otherwise, <code>UP</code>.</li>
</ul>
<h3 id="Event-Driven-Service-How-did-we-monitor-Postgres"><a href="#Event-Driven-Service-How-did-we-monitor-Postgres" class="headerlink" title="Event Driven Service - How did we monitor Postgres:"></a>Event Driven Service - How did we monitor <code>Postgres</code>:</h3><ul>
<li>Upon starting Postgres, <code>Active PostgresManager</code> creates a PersistentEphermal node <code>/Active</code> in <code>ZooKeeper</code>, and <code>Passive PostgresManager</code> starts to stand by and tries to sync with the master</li>
<li>Once fully started, <code>PostgresManager</code> sent “Postgres is UP” to Monitoring Service, for both Active and Passive Postgres</li>
<li><code>PostgresManager</code> updates a timestamp in <code>Postgres</code> every 15 sec, if succeed, it will update another timestamp node in zookeeper, which is used to determine t</li>
<li>if the update fails in 6 consecutive times, PostgresManager takes it as <code>DOWN</code>, then it will trigger a failover by removing the PersistentEphermal node <code>/Active</code> and send a failover message to Monitoring Service</li>
<li>Upon receiving the failover command, the Passive Postgres will take control as the Active, and everything returns to step 1</li>
</ul>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="Problems-for-Polled-Services"><a href="#Problems-for-Polled-Services" class="headerlink" title="Problems for Polled Services"></a>Problems for Polled Services</h3><ul>
<li>the threshold of 50% is too low. Component can be busy, and network can be congested and have longer latency. For example, for gateway, unresponsive for half a min is very easy to reach. This will lead to a <code>false positive</code> conclusion that the component is DOWN<ul>
<li>Solution<ul>
<li><ol>
<li>extend the calculation period to 3 mins</li>
</ol>
</li>
<li><ol>
<li>upgrade the threshold to 100%. So we will only regard it as DOWN if all status queris fail, which is a much stronger support</li>
</ol>
</li>
</ul>
</li>
<li>Result: greatly reduced the false positive alerts for all most components</li>
</ul>
</li>
</ul>
<h3 id="Problems-for-Event-Driven-Service"><a href="#Problems-for-Event-Driven-Service" class="headerlink" title="Problems for Event Driven Service"></a>Problems for Event Driven Service</h3><ul>
<li><p>Postgres can take a long time to start sometimes. For example, when first initialized or when the passive is promoted to active. The startup speed is also impacted by network IO and disk IO. It essentially is because we excluded <code>startup time</code> from <code>UP time</code>. Therefore, no <code>UP</code> message is sent to users for a long time. This makes it look like that Postgres is dead, which also generates false positive alerts.</p>
<ul>
<li>Solution<ul>
<li>Decoupled monitoring service with PostgresManager. Monitoring service directly watches the zookeeper node for all the UP, DOWN, and FAILOVER alerts, by listening to <code>CHILD_ADDED</code>, <code>CHILD_UPDATED</code>, and <code>CHILD_REMOVED</code> events and do corresponding actions. This made getting status much faster, not until Postgres is fully UP</li>
</ul>
</li>
<li>Result: accuracy for monitoring Postgres improved a lot</li>
</ul>
</li>
<li><p>Because of limited disk IO, Postgres may not execute an <code>UPDATE SQL</code> in time, which is also a false positive case to make PostgresManager think it’s dead</p>
<ul>
<li>Solution<ul>
<li>Used both a <code>SELECT SQL</code> and a <code>UPDATE SQL</code> to check Postgres’s status. Take it as DOWN only when both SQL executions fail.</li>
</ul>
</li>
<li>Result: accuracy for monitoring Postgres improved a lot</li>
</ul>
</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h2><ul>
<li>Significantly improved components monitoring accuracy</li>
<li>Never received a bug for service monitoring since then</li>
</ul>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A:"></a>Q &amp; A:</h2><ul>
<li><p>How do you measure it’s 99%.</p>
<ul>
<li>We have <code>automated testing</code> and <code>long-haul testings</code>, and they will do some random process killing like Chaos the percentage is generated on test results. QA engineers also play an role in testing. Haven’t heard them filing any bugs in server monitoring since then</li>
</ul>
</li>
<li><p>Why 99%? Not 100%?</p>
<ul>
<li>We are an on-premise solution, and cannot afford a true microservice architecture because each process will take memory and IO. So monitoring service is running as part of <code>Cluster Controller</code>. When cluster controller dies, occasionally due to various reasons, monitoring service won’t work anymore.</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning - some of my academic machine learning related projects]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/19/machine%20learning/Machine-Learning-some-of-my-academic-machine-learning-related-projects/</url>
      <content type="html"><![CDATA[<p>The following are a few of all my academic machine learning related projects in my last two semesters (2014) in Carnegie Mellon U. </p>
<ul>
<li>Learning to Rank (LETOR) Implementation (Nov 2014)<ul>
<li>Using self-implemented RLR and SVM implementation from CITESEER to perform learning to rank experiments on a dataset from Microsoft Research</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Regularized Logistic Regression (RLR) Implementation (Oct 2014)<ul>
<li>Implemented RLR with gradient ascent to predict labels for a set of paper abstracts from the CITESEER dataset</li>
<li>Achieved MACRO-AVG Precision, Recall, and F1 scores over 0.65, and compared it with SVM from CITESEER</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Collaborative Filtering with Netflix Prize dataset (Sep 2014)<ul>
<li>Implemented weighted memory-based method and model-based methods to predict the ratings of movies</li>
<li>Evaluated the results with a subset of Netflix Prize dataset and achieved RMSE of 1.0</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Bipartite Reinforcement Clustering (Sep 2014)<ul>
<li>Implemented bipartite reinforcement clustering with Mahout and SciPy to discover the latent clusters of both words and documents</li>
<li>Evaluated result sets with internal evaluation metrics (RSS and sum of cosine similarity) and human annotated external metrics (Macro F1)</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Parallel K-Means Clustering with MPI for 2D data points and DNA strands (Nov 2014)<ul>
<li>Developed parallel k-means clustering algorithms with MPI to categorize 2D data points and DNA strands for distributed processing</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Twitter Analytics Web Service with AWS (Feb 2014)<ul>
<li>Developed REST web services that retrieve data from HBase cluster and respond to various types of queries</li>
<li>Desgined HBase schema, and joined the extract, transform and load (ETL) process of a 200GB tweets dataset using MapReduce on AWS EMR</li>
<li>Passed the full performance tests, ranking 6th in the final live test among 59 teams</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Input Text Predictor on AWS (Apr 2014)<ul>
<li>Built a Input Text Predictor</li>
<li>Generated inverted index, n-grams tokens ranking, and a statistical language model by MapReduce based on 6000+ books from Project Gutenberg, and store all data in HBase</li>
<li>Created a GUI with autocomplete predictions for possible search terms</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Big Data Analytics of Wikipedia Pageviews with AWS (Mar 2014)<ul>
<li>Utilized AWS Elastic MapReduce to analyze Wikipedia daily/monthly pageviews dataset (~65GB in S3)</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Automobile Accident Predictions and Heat Maps (Capstone Project Aug 2014 – Dec 2014)<ul>
<li>Integrating public datasets including weather, nearby businesses, and accident data</li>
<li>Predicting accident propensity with Regression and Bayesian methods</li>
<li>Identifying key risk indicators using Association Rules, Information Gain, and Clustering</li>
<li>Authored client reports establishing business case for actuaries and urban planners</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - How to write Singleton in Ruby]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/16/ruby/Ruby-How-to-write-Singleton-in-Ruby/</url>
      <content type="html"><![CDATA[<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ul>
<li>require ‘singleton’ module</li>
<li><code>include Singleton</code> in your class</li>
<li>create the instance of your class by assigning <code>MyClass.instance</code> to a variable</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># appconfig_factory.rb</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'singleton'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppConfigFactory</span></span></div><div class="line">  <span class="keyword">include</span> Singleton</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">    _init_appconfig</div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:config_dir</span></div><div class="line">  </div><div class="line">private</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_init_appconfig</span></span></div><div class="line">    <span class="keyword">unless</span> Object.const_defined?(<span class="string">'AppConfig'</span>)</div><div class="line">      Object.const_set(<span class="string">'AppConfig'</span>, OpenStruct.new)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">AppConfigInstance = AppConfigFactory.instance</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test.rb</span></div><div class="line"><span class="keyword">require</span> <span class="string">'appconfig_factory'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span></div><div class="line">        puts <span class="string">"<span class="subst">#&#123;AppConfigInstance.config_dir&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[System Design - Design Task Scheduling System in Distributed System]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/14/system%20design/task%20queue/System-Design-Design-Task-Scheduling-System-in-Distributed-System/</url>
      <content type="html"><![CDATA[<h2 id="Distributed-Architecture"><a href="#Distributed-Architecture" class="headerlink" title="Distributed Architecture"></a>Distributed Architecture</h2><blockquote>
<p>A set of workers on distributed machines grab tasks from a <code>task queue</code>.</p>
</blockquote>
<p>This is exactly how <code>Hadoop MapReduce</code> works.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">                   task queue</div><div class="line">                   ---------</div><div class="line">                   | taskN |</div><div class="line">                   | ------|</div><div class="line">                   |  ...  |</div><div class="line">                   | ------|</div><div class="line">                   | task1 |</div><div class="line">                   | ------|</div><div class="line">                   | task0 |</div><div class="line">                   ---------</div><div class="line">                /      |       \</div><div class="line">              /        |         \</div><div class="line">            /          |           \</div><div class="line">-----------     -----------          -----------     </div><div class="line">| worker0 |     | worker1 |    ...   | workerM |</div><div class="line">-----------     -----------          -----------</div></pre></td></tr></table></figure>
<h2 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h2><h3 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h3><ul>
<li>Fully parallel</li>
<li>Non-blocking in a system level, even though a single machine might be blocked</li>
</ul>
<h3 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h3><ul>
<li>A lot of overhead if each task is too small and inexpensive, because of cost to parallelize work and communicate between nodes will increase and overcome the benefits of parallelization</li>
</ul>
<h2 id="How-to-keep-a-task-queue-within-a-cluster"><a href="#How-to-keep-a-task-queue-within-a-cluster" class="headerlink" title="How to keep a task queue within a cluster:"></a>How to keep a task queue within a cluster:</h2><h3 id="1-Maintain-a-task-queue-in-memory-in-the-primary-node"><a href="#1-Maintain-a-task-queue-in-memory-in-the-primary-node" class="headerlink" title="1) Maintain a task queue in memory in the primary node."></a>1) Maintain a task queue in memory in the primary node.</h3><p>Cons:</p>
<ul>
<li>hard to recover from primary machine’s failure</li>
</ul>
<h3 id="1-1-Improvement-Have-a-standby-secondary-machine-that-consistently-replicate-states-from-the-primary-machine"><a href="#1-1-Improvement-Have-a-standby-secondary-machine-that-consistently-replicate-states-from-the-primary-machine" class="headerlink" title="1.1) Improvement - Have a standby secondary machine that consistently replicate states from the primary machine"></a>1.1) Improvement - Have a standby secondary machine that consistently replicate states from the primary machine</h3><h3 id="2-Use-message-queue-system-like-Kafka-or-RabbitQueue-to-persist-task-queue"><a href="#2-Use-message-queue-system-like-Kafka-or-RabbitQueue-to-persist-task-queue" class="headerlink" title="2) Use message queue system like Kafka or RabbitQueue to persist task queue"></a>2) Use message queue system like Kafka or RabbitQueue to persist task queue</h3><h3 id="3-Use-ZooKeeper-to-persist-task-queue"><a href="#3-Use-ZooKeeper-to-persist-task-queue" class="headerlink" title="3) Use ZooKeeper to persist task queue"></a>3) Use ZooKeeper to persist task queue</h3><p>ZooKeeper is highly available, and can create nodes with PERSISTENT_SEQUENTIAL ids</p>
<h3 id="4-Use-a-task-table-in-SQL-database-PostgreSQL-or-MySQL-to-persisit-task-queue-Most-commonly-used-approach"><a href="#4-Use-a-task-table-in-SQL-database-PostgreSQL-or-MySQL-to-persisit-task-queue-Most-commonly-used-approach" class="headerlink" title="4) Use a task table in SQL database (PostgreSQL or MySQL) to persisit task queue - Most commonly used approach"></a>4) Use a task table in SQL database (PostgreSQL or MySQL) to persisit task queue - Most commonly used approach</h3><p>An general architecture like this:</p>
<table>
<thead>
<tr>
<th>task_id</th>
<th>type</th>
<th>task_state</th>
<th>priority</th>
<th>params</th>
<th>available_time</th>
<th>end_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>taskType1</td>
<td>completed</td>
<td>0</td>
<td>{…}</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>taskType2</td>
<td>running</td>
<td>1</td>
<td>{…}</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h2><p>Some priority mechanism is required in such system design. Tasks of higher priority need to be executed first, and those of lower priority can be postponed.</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Example-1-Hadoop-MapReduce"><a href="#Example-1-Hadoop-MapReduce" class="headerlink" title="Example 1: Hadoop MapReduce"></a>Example 1: Hadoop MapReduce</h3><p>In Hadoop MapReduce, the Master node maintains a task queue (a.k.a. <code>JobTracker</code>) for all the workers in its cluster, and has a standby node to consistently replicate <code>JobTracker</code>‘s state.</p>
<p>When a worker finishes its work, it retrieves a new unit of work (e.g. a Map operation) from the Master</p>
<p>Here’s the reference (<a href="http://hortonworks.com/blog/apache-hadoop-yarn-background-and-an-overview/" target="_blank" rel="external">http://hortonworks.com/blog/apache-hadoop-yarn-background-and-an-overview/</a>) from Hortonworks, explaining it in Hadoop 1:</p>
<blockquote>
<p>The current Apache Hadoop MapReduce System is composed of the <code>JobTracker</code>, which is the master, and the per-node slaves called <code>TaskTrackers</code>.</p>
<p>The Master does not assign more than one task per worker. If there is more work to be done than workers available, the Master will hold onto it until some Worker becomes idle and can immediately accept it. By keeping the work queue at the Master, rather than on the Workers, the Master is able to improve load balancing. This is because Workers will likely finish at unpredictable and different times, making it hard to optimally allocate all work initially.</p>
</blockquote>
<h3 id="Example-2-Retrieve-10-000-machines’-status-and-show-on-a-web-UI"><a href="#Example-2-Retrieve-10-000-machines’-status-and-show-on-a-web-UI" class="headerlink" title="Example 2: Retrieve 10,000 machines’ status and show on a web UI"></a>Example 2: Retrieve 10,000 machines’ status and show on a web UI</h3><p>This is an interview question I got when interviewing with Palantir.</p>
<p>The question was presented like this: How to retrieve 10,000 machines’ health status (can be as simple as live or dead, or as complicated as checking a service is functioning or not) and show all status on a web UI.</p>
<p>The answer is to 1) maintain a queue of 10,000 jobs, each one is to query a machine’s status 2) have a bunch of worker machines run in parallel, retrieving and executing one status querying job at a time.</p>
<p>I’ll post another blog and analyze this problem in detail</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Spring's Core Concepts]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/12/spring/Spring-Spring-s-Core-Concepts/</url>
      <content type="html"><![CDATA[<h2 id="1-Spring-and-IoC-Inversion-of-Control-反转控制"><a href="#1-Spring-and-IoC-Inversion-of-Control-反转控制" class="headerlink" title="1. Spring and IoC (Inversion of Control) 反转控制"></a>1. Spring and IoC (Inversion of Control) 反转控制</h2><blockquote>
<p>The main idead behind Inversion of Control as a concept is: <strong>component dependencies, lifecycle events, and configuration reside outside of the components themselves but in the framework.</strong> It sounds like giving up too much control, but in fact makes your code more manageable, testable, and portable.</p>
</blockquote>
<h3 id="Dependency-Inversion-Precursor-to-Dependency-Injection"><a href="#Dependency-Inversion-Precursor-to-Dependency-Injection" class="headerlink" title="Dependency Inversion: Precursor to Dependency Injection"></a>Dependency Inversion: Precursor to Dependency Injection</h3><p>In <em>The Dependency Inversion Principle</em> (or DIP), the author states the three defining factors of “bad code”:</p>
<blockquote>
<ol>
<li>It is hard to change because every change affects too many other parts of the system (Rigidity)</li>
<li>When you make a change, unexpected parts of the system break (Fragility)</li>
<li>It is hard to reuse in another application because it cannot be disentangled from the current application (Immobility) [3]</li>
</ol>
</blockquote>
<p>According to Martin, interdependency causes these coding problems (we’ll call them RFI for Rigidity, Fragility, and Immobility). To fix RFI issues in your OO code, DIP has two basic rules:</p>
<hr>
<blockquote>
<p>1) High level modules should not depend upon low level modules, both should depend upon abstractions. 高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口</p>
</blockquote>
<p>In other words, high level modules – which contain your business logic and all of the important meat of your application – should not depend on lower level components. The reason for this is if these lower level components were to change, the changes might affect the higher level components as well. This is the defining concept behind dependency inversion, that the prevailing wisdom of having higher-level modules dependent on lower-level modules is in fact a bad idea.</p>
<hr>
<blockquote>
<p>2) Abstractions should not depend upon details, details should depend upon abstractions.<br>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口</p>
</blockquote>
<p>This is another way to say that before you begin coding to the abstraction – <code>the interface or abstract class</code> – you should find the common behaviors in the code and work backwards. Your interface /abstraction should cater to the intersection between the needs of your business logic and the common behaviors of the lower level modules. You should also leave the details of how these behaviors are implemented to the implementation classes.</p>
<hr>
<a id="more"></a>
<p>This simple example of a voting booth program shows a <strong><em>non-DIP</em></strong> compliant program.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VotingBooth</span> </span>&#123;</div><div class="line">    VoteRecorder voteRecorder = <span class="keyword">new</span> VoteRecorder();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vote</span><span class="params">(Candidate candidate)</span> </span>&#123;</div><div class="line">        voteRecorder.record(candidate);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">VoteRecorder</span> </span>&#123;</div><div class="line">        Map hVotes = <span class="keyword">new</span> HashMap();</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(Candidate candidate)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (hVotes.containsKey(candidate))&#123;</div><div class="line">                count = hVotes.get(candidate);</div><div class="line">            &#125;</div><div class="line">            count++;</div><div class="line">            hVotes.put(candidate, count);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In this example, the <code>VotingBooth</code> class is directly dependent on <code>VoteRecorder</code>, which has no abstractions and is the implementing class.</p>
<hr>
<p>A dependency “inverted” version of this code might look a little different. First, we would define our <code>VoteRecorder</code> interface.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VoteRecorder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(Candidate candidate)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And our implementing classes. The <code>LocalVoteRecorder</code>, which implements the <code>VoteRecorder</code> interface:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVoteRecorder</span> <span class="keyword">implements</span> <span class="title">VoteRecorder</span> </span>&#123;</div><div class="line">    Map hVotes = <span class="keyword">new</span> HashMap();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(Candidate candidate)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (hVotes.containsKey(candidate))&#123;</div><div class="line">            count = hVotes.get(candidate);</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">        hVotes.put(candidate, count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And the <code>VotingBooth</code> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VotingBooth</span> </span>&#123;</div><div class="line">    VoteRecorder recorder = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVoteRecorder</span><span class="params">(VoteRecorder recorder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.recorder = recorder;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vote</span><span class="params">(Candidate candidate)</span> </span>&#123;</div><div class="line">        recorder.record(candidate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now the <code>LocalVoteRecorder</code> class – the implementing class of the <code>VoteRecorder</code> interface – is completely decoupled from the <code>VotingBooth</code> class. We have removed all hard-coded references to lower level classes. According to the rules of DIP, this is all we need to do in order to rid our code of RFI.</p>
<hr>
<p>However, there is one problem with this implementation. We don’t have a main method. We definitely need one in order to run our application, and somewhere in this main method we will need to instantiate the <code>LocalVoteRecorder</code>.</p>
<p>By instantiating the LocalVoteRecorder in our main method, we would break Rule #1 of Dependency Inversion (**High level modules should not depend upon low level modules, both should depend upon abstractions). We have coded to the abstraction, we have integrated our changes, but our application would still have a dependency on a lower level class.</p>
<h2 id="2-Dependency-Injection-to-the-rescue"><a href="#2-Dependency-Injection-to-the-rescue" class="headerlink" title="2. Dependency Injection to the rescue"></a>2. Dependency Injection to the rescue</h2><p>Dependency Injection takes the level of decoupling that began with the Dependency Inversion Principle one step further. Dependency injection has the concept of an <code>assembler</code> – or what in Java is commonly referred to as a <code>Factory</code> – that instantiates the objects required by an application and “injects” them into their dependent objects.</p>
<pre><code>In the case of a dependency injection-informed framework such as Spring, components are coded to interfaces, just as in the DIP example above. But now the IoC container manages the instantiation, management, and class casting of the implemented objects so that the application doesn&apos;t have to. This removes any true dependencies on low-level implemented classes.
</code></pre><p>There are three types of Dependency Injection employed by IoC container providers.</p>
<pre><code>Table 1. Dependency Injection Types
</code></pre><table>
<thead>
<tr>
<th>DI Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Constructor Injection</td>
<td>The constructor arguments are injected during instance instantiation.</td>
</tr>
<tr>
<td>Setter Injection</td>
<td>This is the most favored method of dependency injection in Spring. Dependencies are “set” in the objects through setter methods defined in a Spring configuration file.</td>
</tr>
<tr>
<td>Interface Injection</td>
<td>This is not implemented in Spring currently, but by Avalon. It’s a different type of DI that involves mapping items to inject to specific interfaces.</td>
</tr>
</tbody>
</table>
<p>Spring uses the concept of a <code>BeanFactory</code> as its assembler, and it is the <code>BeanFactory</code> that manages the JavaBeans you have configured to run within it. In the next section we will discuss Spring’s IoC container and how it makes use of dependency injection patterns to make your code, well, RFI-free, and just better.</p>
<hr>
<p>The example in my intern project.</p>
<p>1) create RepositoryServiceFactory</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryServiceFactory</span> </span>&#123;</div><div class="line">    IApp app;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepositoryServiceFactory</span><span class="params">(IApp app)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.app = app;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// A factory method that handle off-switch feature</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IRepositoryService <span class="title">createRepositoryService</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(app.getBoolWithDefault(<span class="string">"service.enabled"</span>, <span class="keyword">false</span>))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ScalableRepositoryServiceImpl();</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RepositoryServiceImpl();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2) add Bean injection in xx.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"IRepositoryService"</span></span></div><div class="line">         <span class="attr">factory-bean</span>=<span class="string">"repositoryServiceFactory"</span></div><div class="line">         <span class="attr">factory-method</span>=<span class="string">"createRepositoryService"</span></div><div class="line"> /&gt;</div></pre></td></tr></table></figure>
<p>in config.yml add<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service.enabled: true</div></pre></td></tr></table></figure></p>
<h2 id="3-Bean-management-through-IoC"><a href="#3-Bean-management-through-IoC" class="headerlink" title="3. Bean management through IoC"></a>3. Bean management through IoC</h2><p>Through its factory, Spring’s IoC container manages the objects that it is configured to instantiate. Spring’s management of the container objects adds flexibility and control to your application, and provides a central place of configuration management for your Plain Old Java Objects (POJO).</p>
<blockquote>
<p>For example, through Spring IoC you can configure the number of instances of the component – whether the component is a singleton or not – and at what point the component is created and destroyed in memory. In Spring, the initialization of a bean by the framework is exactly equivalent to using the new keyword to instantiate an object in Java code. Once the framework has instantiated the object, it manages the scope of the bean, based on its configuration.</p>
</blockquote>
<p>Because the IoC container is managing the beans, JNDI (Java Naming and Directory Interface) lookups that are typical in Java EE containers are no longer required, leaving your code container-agnostic and easier to unit test both inside and outside of the framework. And while you are coding to interfaces as part of good OO practice, Spring allows you to manage what implementations are used by leveraging dependency injection, resulting in cleaner, decoupled components.</p>
<p>The IoC container can also be configured to receive instantiation and destruction callback events for a particular bean. Certain components such as a database connection pool obviously need to be initialized and destroyed when the application is shutdown. Instead of using your custom code, Spring can manage these lifecycle events.</p>
<h2 id="4-A-practical-example-of-Inversion-of-Control"><a href="#4-A-practical-example-of-Inversion-of-Control" class="headerlink" title="4. A practical example of Inversion of Control"></a>4. A practical example of Inversion of Control</h2><p>As we may have mentioned, the core of the Spring Framework is its Inversion of Control (Ioc) container. The IoC container manages java objects – from instantiation to destruction – through its BeanFactory. Java components that are instantiated by the IoC container are called <code>beans</code>, and <code>the IoC container manages a bean&#39;s scope, lifecycle events, and any AOP features for which it has been configured and coded.</code></p>
<h3 id="4-1-Basic-Bean-Creation"><a href="#4-1-Basic-Bean-Creation" class="headerlink" title="4.1. Basic Bean Creation"></a>4.1. Basic Bean Creation</h3><p>A Spring bean in the IoC container can typically be any POJO (plain old java object). POJOs in this context are defined simply as reusable modular components – they are complete entities unto themselves and the IoC container will resolve any dependencies they may need. </p>
<p>Creating a Spring bean is as simple as coding your POJO and adding a bean configuration element to the Spring XML configuration file or annotating the POJO, although XML based configuration will be covered first.</p>
<p>To start our tutorial, we’ll use a simple POJO, a class called <code>Message</code> which does not have an explicit constructor, just a getMessage() and setMessage(String message) method. Message has a zero argument constructor and a default message value.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMessage</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message = <span class="string">"Spring is fun."</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"message"</span> <span class="attr">class</span> = <span class="string">"xml.DefaultMessage"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-Basic-Constructor-Injection"><a href="#2-Basic-Constructor-Injection" class="headerlink" title="2. Basic Constructor Injection"></a>2. Basic Constructor Injection</h2><p><code>Through the Spring beans XML file you can configure your bean to initialize with an argument for the constructor, and then assign the arguments. Spring essentially “injects” the argument into your bean.</code> This is referred to as <code>constructor injection</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xml;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorMessage</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String message = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConstructorMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		message = msg;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		message = msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The following example passes in the String message using a constructor. The class is the same as the one in Basic Bean Creation except the default message on the message variable has been cleared and is now set to null. A single parameter constructor has been added to set a message.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"message"</span> <span class="attr">class</span> = <span class="string">"xml.ConstructorMessage"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> = <span class="string">"Hello, Spring, from John!"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The configuration for this bean is exactly the same as in the previous example, but now we have a new element, the constructor-arg. <code>The constructor-arg element injects a message into the bean using the constructor-arg element&#39;s value attribute.</code></p>
<h2 id="3-Basic-Setter-Injection"><a href="#3-Basic-Setter-Injection" class="headerlink" title="3. Basic Setter Injection"></a>3. Basic Setter Injection</h2><p>The Spring IoC container also supports setter injection, which is the preferred method of dependency injection in Spring. Setter injection uses the set* methods in a class file to garner property names that are configurable in the spring XML config.</p>
<p>From a configuration standpoint, setter injection is easier to read because the property name being set is assigned as an attribute to the bean, along with the value being injected.</p>
<h3 id="Property-naming-tradition"><a href="#Property-naming-tradition" class="headerlink" title="Property naming tradition"></a>Property naming tradition</h3><pre><code>In most cases, Spring will lowercase the first letter after “set” in the method name and use the rest of the method name as-is for deducing the property name.
</code></pre><p>So for example if there is a <code>setMessage() method</code> in your class, the property name you would use when setting <code>that property on a bean in the XML config is &#39;message&#39;</code>. If there is a <code>setFirstName() method</code> in your class, <code>the property name you would use when setting the value is &#39;firstName&#39;</code>.</p>
<p>In cases where the letters after “set” are all uppercase, Spring will leave the property name as uppercase. So if you have <code>setXML() method</code> on a class, <code>the property name would be &#39;XML&#39;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetterInjectionMessage</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String message = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		message = msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"message"</span> <span class="attr">class</span> = <span class="string">"xml.SetterInjectionMessage"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"message"</span> <span class="attr">value</span> = <span class="string">"setter injection bean of message!"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4-Reference-Injection"><a href="#4-Reference-Injection" class="headerlink" title="4. Reference Injection"></a>4. Reference Injection</h2><p>So far we have only injected constructor and property values with static values, which is useful if you want to eliminate configuration files. </p>
<p><code>Values can also be injected by reference -- one bean definition can be injected into another</code>. To do this, you use the constructor-arg or property’s <code>ref</code> attribute instead of the value attribute. <code>The ref attribute then refers to another bean definition&#39;s id</code>.</p>
<p>In the following example, the first bean definition is a java.lang.String with the id springMessage. It is injected into the second bean definition by reference using the property element’s ref attribute.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"springMessage"</span> <span class="attr">class</span> = <span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> = <span class="string">"Reference Injection Bean Message!"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"message"</span> <span class="attr">class</span> = <span class="string">"xml.SetterInjectionMessage"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"message"</span> <span class="attr">ref</span> = <span class="string">"springMessage"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="5-A-Spring-Application"><a href="#5-A-Spring-Application" class="headerlink" title="5. A Spring Application"></a>5. A Spring Application</h2><p>Spring can be used in standard applications, web applications, full Java EE applications, and other containers, the only requirement is that you run a standard JVM. <code>Spring&#39;s resource abstraction allows you to load configuration files from wherever you&#39;d like -- the classpath, the file system, FTP, and HTTP locations</code>. You can also use Spring’s resource abstraction for loading other files required for your application.</p>
<p>Once the IoC container is initialized, you can retrieve your Spring beans. By delegating as much bean creation as possible to Spring, there should only be a few key points where the application code needs to directly access the IoC container, and this is true even for legacy applications. If you’re developing a web application, you may not need to directly access the IoC container at all since it will automatically handle instantiation of your controller and any beans it requires.</p>
<p>The lowest level implementation of the IoC container is the <code>BeanFactory</code>, but it is recommended to use an <code>ApplicationContext</code> for your application. The <code>ApplicationContext</code> is a subclass of the <code>BeanFactory</code> interface so it has all the functionality a <code>BeanFactory</code> has and more.` </p>
<p>Unless you are writing an application that needs an extremely small memory footprint, <code>BeanFactory</code> shouldn’t be used directly.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper Data Model - Znode, Time, and Stat]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/12/distributed%20system/zookeeper/ZooKeeper-Data-Model-Znode-Time-and-Stat/</url>
      <content type="html"><![CDATA[<p>In distributed application engineering, the word <code>node</code> can refer to a generic host machine, a server, a member of an ensemble, a client process, etc. In the ZooKeeper documentatin, </p>
<ul>
<li><code>znodes</code> refer to the <code>data nodes</code></li>
<li><code>Servers</code> to refer to <code>machines that make up the ZooKeeper service</code></li>
<li><code>quorum peers</code> refer to the <code>servers that make up an ensemble</code>;</li>
<li><code>client</code> refers to <code>any host or process which uses a ZooKeeper service</code>.</li>
</ul>
<p>ZooKeeper has a hierarchal namespace, much like a distributed file system. The only difference is that each node in the namespace can have data associated with it as well as children. It is like having a file system that allows a file to also be a directory. Paths to nodes are always expressed as canonical, absolute, slash-separated paths; there are no relative reference. Any unicode character can be used in a path subject to the following constraints:</p>
<blockquote>
<ul>
<li>The “.” character can be used as part of another name, but “.” and “..” cannot alone be used to indicate a node along a path, because ZooKeeper doesn’t use relative paths. The following would be invalid: “/a/b/./c” or “/a/b/../c”.</li>
<li>The token “zookeeper” is reserved.</li>
</ul>
</blockquote>
<h2 id="1-ZNodes"><a href="#1-ZNodes" class="headerlink" title="1. ZNodes"></a>1. ZNodes</h2><p>Every node in a <code>ZooKeeper tree</code> is refered to as a <code>znode</code>. <code>Znodes</code> maintain a <code>stat structure</code> that includes <code>version numbers for data changes</code>, <code>acl changes</code>, and <code>timestamps</code>. The version number, together with the timestamp allow ZooKeeper to validate the cache and to coordinate updates. </p>
<p>Each time a <code>znode</code>‘s data changes, the version number increases. For instance, whenever a client retrieves data, it also receives the version of the data. And when a client performs an update or a delete, it must supply the version of the data of the znode it is changing. If the version it supplies doesn’t match the actual version of the data, the update will fail. </p>
<p><code>Znodes</code> are the main enitity that a programmer access. They have several characteristics that are worth mentioning here.</p>
<h3 id="1-Watches"><a href="#1-Watches" class="headerlink" title="1) Watches"></a>1) Watches</h3><p>Clients can set <code>watches</code> on znodes. Changes to that <code>znode</code> trigger the <code>watch</code> and then clear the <code>watch</code>. When a <code>watch</code> triggers, ZooKeeper sends the client a notification. More information about watches can be found in the section ZooKeeper Watches.</p>
<h3 id="2-Data-Access"><a href="#2-Data-Access" class="headerlink" title="2) Data Access"></a>2) Data Access</h3><p>The data stored at each znode in a namespace is read and written atomically. Reads get all the data bytes associated with a znode and a write replaces all the data. Each node has an <code>Access Control List (ACL)</code> that restricts who can do what.</p>
<h3 id="3-Ephemeral-Nodes"><a href="#3-Ephemeral-Nodes" class="headerlink" title="3) Ephemeral Nodes"></a>3) Ephemeral Nodes</h3><p>ZooKeeper also has the notion of <code>ephemeral</code> nodes. </p>
<p><code>These znodes exists as long as the session that created the znode is active. When the session ends the znode is deleted.</code> </p>
<p>Because of this behavior, <code>ephemeral znodes are not allowed to have children</code>.</p>
<h3 id="4-Sequence-Nodes-–-Unique-Naming"><a href="#4-Sequence-Nodes-–-Unique-Naming" class="headerlink" title="4) Sequence Nodes – Unique Naming"></a>4) Sequence Nodes – Unique Naming</h3><p>When creating a znode you can also request that ZooKeeper append a monotonicly increasing counter to the end of path. This counter is unique to the parent znode. The counter has a format of <code>%010d</code> – that is 10 digits with 0 (zero) padding (the counter is formatted in this way to simplify sorting), i.e. <code>&quot;&lt;path&gt;0000000001&quot;</code>. See Queue Recipe for an example use of this feature. Note: the counter used to store the next sequence number is a signed int (4bytes) maintained by the parent node, the counter will overflow when incremented beyond 2147483647 (resulting in a name “<path></path>-2147483647”).</p>
<a id="more"></a>
<h2 id="2-Time-in-ZooKeeper"><a href="#2-Time-in-ZooKeeper" class="headerlink" title="2. Time in ZooKeeper"></a>2. Time in ZooKeeper</h2><p>ZooKeeper tracks time multiple ways:</p>
<h3 id="1-Zxid-ZooKeeper-Transaction-Id"><a href="#1-Zxid-ZooKeeper-Transaction-Id" class="headerlink" title="1) Zxid (ZooKeeper Transaction Id)"></a>1) Zxid (ZooKeeper Transaction Id)</h3><p>Every change to the ZooKeeper state receives a stamp in the form of a <code>zxid</code>. This exposes the total ordering of all changes to ZooKeeper. Each change will have a unique <code>zxid</code> and if <code>zxid1</code> is smaller than <code>zxid2</code> then <code>zxid1</code> happened before <code>zxid2</code>.</p>
<h3 id="2-Version-numbers"><a href="#2-Version-numbers" class="headerlink" title="2) Version numbers"></a>2) Version numbers</h3><p>Every change to a a node will cause an increase to one of the version numbers of that node. The three version numbers are </p>
<ul>
<li><code>version</code> - number of changes to the data of a znode</li>
<li><code>cversion</code> - number of changes to the children of a znode</li>
<li><code>aversion</code> - number of changes to the ACL of a znode</li>
</ul>
<h3 id="3-Ticks"><a href="#3-Ticks" class="headerlink" title="3) Ticks"></a>3) Ticks</h3><p>When using multi-server ZooKeeper, servers use ticks to define timing of events such as status uploads, session timeouts, connection timeouts between peers, etc. The tick time is only indirectly exposed through the minimum session timeout (2 times the tick time); if a client requests a session timeout less than the minimum session timeout, the server will tell the client that the session timeout is actually the minimum session timeout.</p>
<h3 id="4-Real-time"><a href="#4-Real-time" class="headerlink" title="4) Real time"></a>4) Real time</h3><p>ZooKeeper doesn’t use real time, or clock time, at all except to put timestamps into the stat structure on znode creation and znode modification.</p>
<h2 id="3-Stat"><a href="#3-Stat" class="headerlink" title="3. Stat"></a>3. Stat</h2><p>The <code>Stat</code> structure for each znode in ZooKeeper is made up of the following fields:</p>
<h3 id="1-czxid-created-ZooKeeper-Transaction-ID"><a href="#1-czxid-created-ZooKeeper-Transaction-ID" class="headerlink" title="1) czxid (created ZooKeeper Transaction ID)"></a>1) czxid (created ZooKeeper Transaction ID)</h3><p>The zxid of the change that caused this znode to be created.</p>
<h3 id="2-mzxid-modified-ZooKeeper-Transaction-ID"><a href="#2-mzxid-modified-ZooKeeper-Transaction-ID" class="headerlink" title="2) mzxid (modified ZooKeeper Transaction ID)"></a>2) mzxid (modified ZooKeeper Transaction ID)</h3><p>The zxid of the change that last modified this znode.</p>
<h3 id="3-ctime-created-time"><a href="#3-ctime-created-time" class="headerlink" title="3) ctime (created time)"></a>3) ctime (created time)</h3><p>The time in milliseconds from epoch when this znode was created.</p>
<h3 id="4-mtime-modified-time"><a href="#4-mtime-modified-time" class="headerlink" title="4) mtime (modified time)"></a>4) mtime (modified time)</h3><p>The time in milliseconds from epoch when this znode was last modified.</p>
<h3 id="5-version"><a href="#5-version" class="headerlink" title="5) version"></a>5) version</h3><p>The number of changes to the data of this znode.</p>
<h3 id="6-cversion-children-version"><a href="#6-cversion-children-version" class="headerlink" title="6) cversion (children version)"></a>6) cversion (children version)</h3><p>The number of changes to the children of this znode.</p>
<h3 id="7-aversion-ACL-version"><a href="#7-aversion-ACL-version" class="headerlink" title="7) aversion (ACL version)"></a>7) aversion (ACL version)</h3><p>The number of changes to the ACL of this znode.</p>
<h3 id="8-ephemeralOwner"><a href="#8-ephemeralOwner" class="headerlink" title="8) ephemeralOwner"></a>8) ephemeralOwner</h3><p>The session id of the owner of this znode if the znode is an ephemeral node. If it is not an ephemeral node, it will be zero.</p>
<h3 id="9-dataLength"><a href="#9-dataLength" class="headerlink" title="9) dataLength"></a>9) dataLength</h3><p>The length of the data field of this znode.</p>
<h3 id="10-numChildren"><a href="#10-numChildren" class="headerlink" title="10) numChildren"></a>10) numChildren</h3><p>The number of children of this znode.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper - Watches]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/11/distributed%20system/zookeeper/ZooKeeper-Watches/</url>
      <content type="html"><![CDATA[<p>All of the read operations in ZooKeeper - <code>getData()</code>, <code>getChildren()</code>, and <code>exists()</code> - have the option of setting a watch as a side effect. Here is ZooKeeper’s definition of a watch: </p>
<blockquote>
<p>a watch event is one-time trigger, sent to the client that set the watch, which occurs when the data for which the watch was set changes.</p>
</blockquote>
<p>There are <code>three key points</code> to consider in this definition of a watch:</p>
<h3 id="1-One-time-trigger"><a href="#1-One-time-trigger" class="headerlink" title="1.  One-time trigger"></a>1.  One-time trigger</h3><p>One watch event will be sent to the client if the data has changed. </p>
<p>For example, if a client does a <code>getData(&quot;/znode1&quot;, true)</code> and later the data for <code>/znode1</code> is changed or deleted, the client will get a watch event for <code>/znode1</code>. If <code>/znode1</code> changes again, no watch event will be sent unless the client has done another read that sets a new watch.</p>
<h3 id="2-Sent-to-the-client"><a href="#2-Sent-to-the-client" class="headerlink" title="2. Sent to the client"></a>2. Sent to the client</h3><p>This implies that an event is on the way to the client, but may not reach the client before the successful return code to the change operation reaches the client that initiated the change - Watches are sent asynchronously to watchers.</p>
<p>ZooKeeper provides an ordering guarantee: a client will never see a change for which it has set a watch until it first sees the watch event. Network delays or other factors may cause different clients to see watches and return codes from updates at different times. The key point is that everything seen by the different clients will have a consistent order.</p>
<h3 id="3-The-data-for-which-the-watch-was-set"><a href="#3-The-data-for-which-the-watch-was-set" class="headerlink" title="3. The data for which the watch was set"></a>3. The data for which the watch was set</h3><p>This refers to the different ways a node can change. It helps to think of ZooKeeper as maintaining two lists of watches: <code>data watches</code> and <code>child watches</code>.</p>
<p><code>getData()</code> and <code>exists()</code> set data watches. <code>getChildren()</code> sets child watches. Alternatively, it may help to think of watches being set according to the kind of data returned. <code>getData()</code> and <code>exists()</code> return information about the data of the node, whereas <code>getChildren()</code> returns a list of children. Thus, <code>setData()</code> will trigger data watches for the znode being set (assuming the set is successful). A successful <code>create()</code> will trigger a data watch for the znode being created and a child watch for the parent znode. A successful <code>delete()</code> will trigger both a data watch and a child watch (since there can be no more children) for a znode being deleted as well as a child watch for the parent znode.</p>
<hr>
<a id="more"></a>
<blockquote>
<p>Watches are maintained locally at the ZooKeeper server to which the client is connected.</p>
</blockquote>
<p>This allows watches to be light weight to set, maintain, and dispatch. When a client connects to a new server, the watch will be triggered for any session events. Watches will not be received while disconnected from a server. When a client reconnects, any previously registered watches will be reregistered and triggered if needed. In general this all occurs transparently. There is one case where a watch may be missed: a watch for the existance of a znode not yet created will be missed if the znode is created and deleted while disconnected.</p>
<h2 id="Semantics-of-Watches"><a href="#Semantics-of-Watches" class="headerlink" title="Semantics of Watches"></a>Semantics of Watches</h2><p>We can set watches with the three calls that read the state of ZooKeeper: <code>exists</code>, <code>getData</code>, and <code>getChildren</code>. The following list details the events that a watch can trigger and the calls that enable them:</p>
<ul>
<li><p>Created event: Enabled with a call to <code>exists</code>.</p>
</li>
<li><p>Deleted event: Enabled with a call to <code>exists</code>, <code>getData</code>, and <code>getChildren</code>.</p>
</li>
<li><p>Changed event: Enabled with a call to <code>exists</code> and <code>getData</code>.</p>
</li>
<li><p>Child event: Enabled with a call to <code>getChildren</code>.</p>
</li>
</ul>
<h2 id="Remove-Watches"><a href="#Remove-Watches" class="headerlink" title="Remove Watches"></a>Remove Watches</h2><p>We can remove the watches registered on a znode with a call to <code>removeWatches</code>. Also, a ZooKeeper client can remove watches locally even if there is no server connection by setting the local flag to true. The following list details the events which will be triggered after the successful watch removal.</p>
<ul>
<li>Child Remove event: Watcher which was added with a call to <code>getChildren</code>.</li>
<li>Data Remove event: Watcher which was added with a call to <code>exists</code> or <code>getData</code>.</li>
</ul>
<h2 id="What-ZooKeeper-Guarantees-about-Watches"><a href="#What-ZooKeeper-Guarantees-about-Watches" class="headerlink" title="What ZooKeeper Guarantees about Watches"></a>What ZooKeeper Guarantees about Watches</h2><p>With regard to watches, ZooKeeper maintains these guarantees:</p>
<blockquote>
<ul>
<li>Watches are ordered with respect to other events, other watches, and asynchronous replies. The ZooKeeper client libraries ensures that<br>everything is dispatched in order.</li>
<li>A client will see a watch event for a znode it is watching before seeing the new data that corresponds to that znode.</li>
<li>The order of watch events from ZooKeeper corresponds to the order of the updates as seen by the ZooKeeper service.</li>
</ul>
</blockquote>
<h2 id="Things-to-Remember-about-Watches"><a href="#Things-to-Remember-about-Watches" class="headerlink" title="Things to Remember about Watches"></a>Things to Remember about Watches</h2><ul>
<li><p><code>Watches are one time triggers</code></p>
<p>  if you get a watch event and you want to get notified of future changes, you must set another watch.</p>
<p>  Because watches are one time triggers and there is latency between getting the event and sending a new request to get a watch,  you cannot reliably see every change that happens to a node in ZooKeeper. Be prepared to handle the case where the znode changes multiple times between getting the event and setting the watch again. (You may not care, but at least realize it may happen.)</p>
</li>
<li><p>A watch object, or function/context pair, will only be triggered once for a given notification.</p>
<p>  For example, if the same watch object is registered for an <code>exists()</code> and a <code>getData()</code> call for the same file and that file is then deleted, the watch object would only be invoked once with the deletion notification for the file.</p>
</li>
<li><p>When you disconnect from a server (for example, when the server fails), you will not get any watches until the connection is reestablished.</p>
<p>  For this reason, session events are sent to all outstanding watch handlers. Use session events to go into a safe mode: you will not be receiving events while disconnected, so your process should act conservatively in that mode.</p>
</li>
</ul>
<hr>
<p>Reference:</p>
<ul>
<li><a href="https://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#ch_zkWatches" target="_blank" rel="external">https://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#ch_zkWatches</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - @Autowired for List Types]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/10/spring/Spring-Autowired-for-List-Types/</url>
      <content type="html"><![CDATA[<p>How to use Spring to autowire list types? How to autowired all subclasses of a parent class, or all implementations of an interface.</p>
<p>Let’s see an example - we have three pets that we’d like to register them on the public animal registry.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>The question is - how to register all my animals?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalRegistry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, Animal&gt; registry;</div><div class="line">    </div><div class="line">    <span class="comment">// How to register all my animals to the registry?</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Naive-Approach"><a href="#Naive-Approach" class="headerlink" title="Naive Approach"></a>Naive Approach</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalRegistry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Registry&lt;Animal&gt; registry;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * This is naive because if you have more animals,</div><div class="line">    * you have to specify them explicitly here</div><div class="line">    */</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimalRegistry</span> <span class="params">(MyDog dog, MyCat cat, MyBird bird)</span></span>&#123;</div><div class="line">        registry.register(dog);</div><div class="line">        registry.register(cat);</div><div class="line">        registry.register(bird);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Have-Spring-Autowire-All-Subclass"><a href="#Have-Spring-Autowire-All-Subclass" class="headerlink" title="Have Spring Autowire All Subclass"></a>Have Spring Autowire All Subclass</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalRegistry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Registry&lt;Animal&gt; registry;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">		* The problem with this approach is that</div><div class="line">		* if you don't have any animals, there's no bean to be autowired here, </div><div class="line">		* and Spring will report bean initialization error</div><div class="line">		*/</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimalRegistry</span> <span class="params">(List&lt;Animal&gt; myAnimals)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(myAnimals != <span class="keyword">null</span> &amp;&amp; !myAnimals.isEmpty()) &#123;</div><div class="line">            myAnimals.forEach(a -&gt; registry.register(a));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Better-Usage-of-Autowired"><a href="#Better-Usage-of-Autowired" class="headerlink" title="Better Usage of @Autowired"></a>Better Usage of <code>@Autowired</code></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalRegistry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Registry&lt;Animal&gt; registry;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line">    List&lt;Animal&gt; myAnimals;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">		* This ensures that Spring can still successfully run</div><div class="line">		* even when there's no bean to be autowired to 'myAnimals' </div><div class="line">		*/</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(myAnimals != <span class="keyword">null</span> &amp;&amp; !myAnimals.isEmpty()) &#123;</div><div class="line">            myAnimals.forEach(a -&gt; registry.register(a));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="This-tip-should-work-well-w-r-t-interfaces"><a href="#This-tip-should-work-well-w-r-t-interfaces" class="headerlink" title="This tip should work well w.r.t interfaces"></a>This tip should work well w.r.t interfaces</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> inteface Provider &#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BirdProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderRegistry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Registry&lt;Provider&gt; registry;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line">    List&lt;Provider&gt; providers;</div><div class="line">    </div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(providers != <span class="keyword">null</span> &amp;&amp; !providers.isEmpty()) &#123;</div><div class="line">            providers.forEach(a -&gt; registry.register(a));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - Understanding class_eval and instance_eval]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/10/ruby/Ruby-Understanding-class-eval-and-instance-eval/</url>
      <content type="html"><![CDATA[<p>Two Ruby methods seem to cause more confusion than any others, particularly due to the way they are explained. These two are <code>class_eval</code> and <code>instance_eval</code>. The names are very similar, and their behavior is counterintuitive. The bottom line is this:</p>
<ul>
<li>Use <code>ClassName.instance_eval</code> to define a class method (one associated with the class object but not visible to instances other than the instance itself).</li>
<li>Use <code>ClassName.class_eval</code> to define an instance method (one that applies to all of the instances of ClassName).</li>
</ul>
<p>To understand why this is true, let’s go through some examples, starting with the following code:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(num)</span></span></div><div class="line">    @num = num</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">a = MyClass.new(<span class="number">1</span>)</div><div class="line">b = MyClass.new(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>Before we get going, remember that in Ruby everything is an object. That means classes are objects too (just like Java’s <code>Class</code> objects). When you define <code>MyClass</code>, Ruby will create a global variable with the name <code>MyClass</code>, which is the class object for <code>MyClass</code>. When you write <code>MyClass.new</code> you are getting the class object <code>MyClass</code> and then calling the new method on that object, which gives you a new instance of <code>MyClass</code>. Instances are the actual objects of the class that you would normally use. There is one class with many instances.</p>
<a id="more"></a>
<p>So we have two objects that are both of the same class. Of course, this class isn’t very useful because it doesn’t do anything. There is no way to access <code>@num</code> becasuse we did not define any getter or setter methods.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">irb&gt; a.num</div><div class="line"><span class="symbol">NoMethodError:</span> undefined method <span class="string">`num' for #&lt;MyClass:0x007fba5c02c858 @num="1"&gt;</span></div></pre></td></tr></table></figure>
<p>Let’s look briefly at <code>instance_eval</code>. What can we do with it? We can run code as if we were inside a method of the specific object we call it on. That means we can access instance variables and private methods. Let’s evaluate an expression in the instances of <code>MyClass</code> so that we get the values out.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">irb&gt; a.instance_eval &#123; @num &#125;</div><div class="line">=&gt; <span class="number">1</span></div><div class="line">irb&gt; b.instance_eval &#123; @num &#125;</div><div class="line">=&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<p>That’s great, but it would be a real pain to do that a lot. Let’s define a method to do it for us.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">irb&gt; a.instance_eval do</div><div class="line">irb&gt;   def num</div><div class="line">irb&gt;     @num</div><div class="line">irb&gt;   end</div><div class="line">irb&gt; end</div><div class="line">=&gt; nil</div><div class="line">irb&gt; a.num</div><div class="line">=&gt; 1</div><div class="line">irb&gt; b.num</div><div class="line">NoMethodError: undefined method `num&apos; for #&lt;MyClass:0x007fba5c08e5f8 @num=&quot;2&quot;&gt;</div></pre></td></tr></table></figure>
<p>Whoops! We used <code>instance_eval</code>, which only evaluates in the context of one object. We defined a method, but only on the particular object a. How do we make a method that is shared by all objects of that class? Perhaps we should define a method on the class object?</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">irb&gt; MyClass.instance_eval <span class="keyword">do</span></div><div class="line">irb&gt;   <span class="function"><span class="keyword">def</span> <span class="title">num</span></span></div><div class="line">irb&gt;     @num</div><div class="line">irb&gt;   <span class="keyword">end</span></div><div class="line">irb&gt; <span class="keyword">end</span></div><div class="line">=&gt; nil</div><div class="line">irb&gt; b.num</div><div class="line"><span class="symbol">NoMethodError:</span> undefined method <span class="string">`num' for #&lt;MyClass:0x007fba5c08e5f8 @num="2"&gt;</span></div></pre></td></tr></table></figure>
<p>Oops, that didn’t work either. What happened? Well, we did the same thing as above, but on a class object! That means we defined a method on the class object; this is not the same thing as a method that gets inherited by the objects of that class. It’s just the same as if we defined a method in the class with def <code>self.num</code>, which is similar to a class <code>static</code> method in Java. This method would have to be invoked as <code>MyClass.num</code>, not <code>a.num</code>, and it won’t work anyway:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">irb&gt; MyClass.num</div><div class="line">=&gt; nil</div></pre></td></tr></table></figure>
<p>We get nil here because there is no variable <code>@num</code> in the <code>MyClass</code> object. Undefined variables have a default value of <code>nil</code>.<br>Alright, so what’s the right way to do it? The answer is <code>class_eval</code>:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">irb&gt; MyClass.class_eval <span class="keyword">do</span></div><div class="line">irb&gt;   <span class="function"><span class="keyword">def</span> <span class="title">num</span></span></div><div class="line">irb&gt;     @num</div><div class="line">irb&gt;   <span class="keyword">end</span></div><div class="line">irb&gt; <span class="keyword">end</span></div><div class="line">=&gt; nil</div><div class="line">irb&gt; b.num</div><div class="line">=&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<p>Horray! That worked. We defined a method for the class, not on the class object, and that method is then available for all objects of that class.</p>
<p>Note that we called <code>class_eval</code> on <code>MyClass</code>, not on one of the instances. Invoking <code>class_eval</code> on an instance wouldn’t work because <code>class_eval</code> isn’t a method of arbitrary objects, only of class objects like <code>MyClass</code>. But you can get an object’s class dynamically with the class method:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">irb&gt; a.class_eval</div><div class="line"><span class="symbol">NoMethodError:</span> undefined method <span class="string">`class_eval' for #&lt;MyClass:0x007fba5c02c858 @num="1"&gt;</span></div><div class="line">irb&gt; a.class.class_eval &#123;&#125;</div><div class="line">=&gt; nil</div></pre></td></tr></table></figure>
<blockquote>
<p>Another way to think about this is that <code>class_eval</code> is equivalent to typing the code inside a class statement:</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MyClass.class_eval <span class="keyword">do</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num</span></span></div><div class="line">    @num</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>behaves exactly the same as the following code:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num</span></span></div><div class="line">    @num</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>References:</p>
<ul>
<li><a href="http://web.stanford.edu/~ouster/cgi-bin/cs142-winter15/classEval.php" target="_blank" rel="external">http://web.stanford.edu/~ouster/cgi-bin/cs142-winter15/classEval.php</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Wiring Beans]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/09/spring/Spring-Wiring-Beans/</url>
      <content type="html"><![CDATA[<h2 id="Spring-Bean-Annotation"><a href="#Spring-Bean-Annotation" class="headerlink" title="Spring Bean Annotation"></a>Spring Bean Annotation</h2><ul>
<li><code>@Repository</code> - a bean as DAO Component on persistence layer</li>
<li><code>@Service</code> - a bean as Service Component on business layer</li>
<li><code>@Controller</code> - a bean as Controller Component on Presentation layer</li>
<li><code>@Configuration</code> - a bean as Configuration Component.</li>
<li><code>@Component</code> - General purpose annotation, can be used as a replacement for above annotations.</li>
</ul>
<p>In Spring, objects aren’t responsible for finding or creating the other objects that they need to do their jobs. Instead, the container gives them references to the objects that they collaborate with.</p>
<p>The act of creating associations between application objects is <code>the essence of dependency injection (DI)</code> and is commonly referred to as <code>wiring</code>. </p>
<h2 id="Spring’s-configuration-options"><a href="#Spring’s-configuration-options" class="headerlink" title="Spring’s configuration options"></a>Spring’s configuration options</h2><p>Spring offers three primary wiring mechanisms:</p>
<ol>
<li>Implicit bean discovery and automatic wiring</li>
<li>Explicit configuration in Java.</li>
<li>Explicit configuration in XML.</li>
</ol>
<p>The first two options are the most commonly-used ones. I will not talk about XML-based config because it’s old and hard to read and maintain.</p>
<h2 id="1-Automatically-wiring-beans"><a href="#1-Automatically-wiring-beans" class="headerlink" title="1. Automatically wiring beans"></a>1. Automatically wiring beans</h2><p>Springs attacks automatic wiring from two angles:</p>
<blockquote>
<ul>
<li>Component scanning - Spring automatically discovers beans to be created in the application context.</li>
<li>Autowiring - Spring automatically satisfies bean dependencies</li>
</ul>
</blockquote>
<p><code>Working together, component scanning and autowiring can keep explicit configuration to a minimum.</code></p>
<h3 id="1-1-Component-Creating-discoverable-beans"><a href="#1-1-Component-Creating-discoverable-beans" class="headerlink" title="1.1 @Component - Creating discoverable beans"></a>1.1 <code>@Component</code> - Creating discoverable beans</h3><p>Annotation <code>@Component</code> identifies this class as a component class and serves as a clue to Spring that a bean should be created for this class. There is no need to explicitly configure a AnAlbum bean in XML or JavaConfig, Spring will do it for you because this class is annotated with <code>@Component</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CD</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnAlbum</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String title = <span class="string">"An album from Scorpions"</span>;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Playing "</span> + title);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-2-Naming-a-component-scanned-bean"><a href="#1-2-Naming-a-component-scanned-bean" class="headerlink" title="1.2 Naming a component-scanned bean"></a>1.2 Naming a component-scanned bean</h3><p>All beans in a Spring application context are given an <code>id</code>. When you didn’t explicitly give the bean an id, Spring will given it one derived from its class name by <code>lowering the first letter of the class name</code>.</p>
<h4 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h4><p>If you’d rather give the bean a different ID, all you have to do is pass the desired ID as a value to the <code>@Component</code> annotation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"anotherAlbum"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnAlbum</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach 2"></a>Approach 2</h4><p>Use <code>@Named</code> annotation</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Named</span>(<span class="string">"anotherAlbum"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnAlbum</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-ComponentScan-Automatic-component-scan-amp-Setting-a-base-package-for-component-scanning"><a href="#1-3-ComponentScan-Automatic-component-scan-amp-Setting-a-base-package-for-component-scanning" class="headerlink" title="1.3 @ComponentScan - Automatic component scan &amp; Setting a base package for component scanning"></a>1.3 <code>@ComponentScan</code> - Automatic component scan &amp; Setting a base package for component scanning</h3><p>Component scanning isn’t turned on by default. You still need an explicit configuration to tell Spring to seek out classes annotated with <code>@Component</code> and to create beans from them.</p>
<blockquote>
<p>When using <code>@ComponentScan</code> with no attributes, it will default to the configuration class’s package as its base packege to scan for components.</p>
</blockquote>
<h4 id="Style-1"><a href="#Style-1" class="headerlink" title="Style 1"></a>Style 1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.xxx.package_name"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutomaticWiringConfig</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the above example, <code>AutomaticWiringConfig</code> class defines a Spring wiring specification, expressed in Java. It’s annotated with <code>@ComponentScan</code> to enable component scanning in Spring.</p>
<h4 id="Style-2-use-basePackages-attribute"><a href="#Style-2-use-basePackages-attribute" class="headerlink" title="Style 2 - use basePackages attribute"></a>Style 2 - use <code>basePackages</code> attribute</h4><p>If you’d rather it be clear that you’re setting the base package, you can do so with the <code>basePackages</code> attribute</p>
<p>Here’s an example of component scan with multiple package names</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.xxx.p1"</span>, <span class="string">"com.xxx.p2"</span>&#125;)</div></pre></td></tr></table></figure>
<p>equals to</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.xxx.p1"</span>, <span class="string">"com.xxx.p2"</span>&#125;)</div></pre></td></tr></table></figure>
<h4 id="Style-3-Specify-classes-or-interfaces-with-basePackageClasses"><a href="#Style-3-Specify-classes-or-interfaces-with-basePackageClasses" class="headerlink" title="Style 3 - Specify classes or interfaces with basePackageClasses"></a>Style 3 - Specify classes or interfaces with <code>basePackageClasses</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = &#123;CDPlayer.class, DVDPlayer.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutomaticWiringConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>I personally don’t like component scan very much, because it’s easy to fail since people are always forgetting to explicitly add packages. Besides, settings in the base packages are expressed as String values. If programmers want to refactor the package names, the specified base packages would be wrong.</p>
<p>But component scanning is necessary when the POJO classes that you want to define beans don’t live in the same package as your Spring config class</p>
</blockquote>
<h3 id="1-4-Autowired-Annotating-beans-to-be-automatically-wired"><a href="#1-4-Autowired-Annotating-beans-to-be-automatically-wired" class="headerlink" title="1.4 @Autowired - Annotating beans to be automatically wired"></a>1.4 <code>@Autowired</code> - Annotating beans to be automatically wired</h3><p>Autowiring is a means of letting Spring automatically satisfy a bean’s dependencies by finding other beans in the application context that are a match to the bean’s needs.</p>
<p>Here’s an example in JUnit</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = AutomaticWiringConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> CD cd;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span> </span>&#123;</div><div class="line">		assertNotNull(cd);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>CDPlayerTest</code> takes advantage of Spring’s <code>SpringJUnit4ClassRunner</code> to have a Spring application context automatically created when the test starts. The <code>@ContextConfiguration</code> annotation tells it to load its configuration from where. </p>
<blockquote>
<p>Spring will attempt to satisfy the dependency expressed in the method’s parameters, in three typical styles:</p>
<ul>
<li>constructor</li>
<li>setter method</li>
<li>any other method</li>
</ul>
</blockquote>
<p>Assuming that one and only one bean matches, that bean will be wired in!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> CD cd;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 1. The constructor is annotated with <span class="doctag">@Autowired</span>, indicating that when</div><div class="line">	 * Spring creates the CDPlayer bean, it should instantiate it via that </div><div class="line">	 * constructor and pass in a bean that is assignable to CD</div><div class="line">	 * */</div><div class="line">	<span class="meta">@Autowired</span>(required = <span class="keyword">true</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CD cd)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cd =cd;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 2. <span class="doctag">@Autowired</span> can also be used on a property's setter method</div><div class="line">	 * */</div><div class="line">	<span class="meta">@Autowired</span> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCD</span><span class="params">(CD cd)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cd = cd;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 3. <span class="doctag">@Autowired</span> can also be applied to any method on the class</div><div class="line">	 * */</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCD</span><span class="params">(CD cd)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cd = cd;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">		cd.play();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If there’s no matching beans, Spring will throw an exception as the application context is being created. To avoid that exception, you can set the <code>&#39;required&#39;</code> attribute on <code>@Autowired</code> to <code>false</code> </p>
<h3 id="1-5-Verifying-automatic-configuration"><a href="#1-5-Verifying-automatic-configuration" class="headerlink" title="1.5 Verifying automatic configuration"></a>1.5 Verifying automatic configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = AutomaticWiringConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Rule</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> StandardOutputStreamLog log = <span class="keyword">new</span> StandardOutputStreamLog();</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span> <span class="keyword">private</span> MediaPlayer player;</div><div class="line">	<span class="meta">@Autowired</span> <span class="keyword">private</span> CD cd;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdShouldNotBeNull</span><span class="params">()</span> </span>&#123;</div><div class="line">		assertNotNull(cd);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playTest</span><span class="params">()</span> </span>&#123;</div><div class="line">		player.play();</div><div class="line">		assertEquals(<span class="string">"Playing An album from Scorpions."</span>, log.getLog());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Wiring-beans-with-JavaConfig"><a href="#2-Wiring-beans-with-JavaConfig" class="headerlink" title="2. Wiring beans with JavaConfig"></a>2. Wiring beans with JavaConfig</h2><p>Although Spring configuration with component scanning and autowiring is preferred, there are times when automatic configuration isn’t an option and you must configure Spring explicitly.</p>
<blockquote>
<p>E.g. wiring components from some third-party library into the application. You don’t have the source code for that library, thus you cannot annotate its classes with <code>@Component</code> and <code>@Autowired</code>.</p>
</blockquote>
<p>In that case, you must turn to explicit configuration. You have two choices for explicit configuration: <code>Java</code> and <code>XML</code>. <code>JavaConfig</code> is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly</p>
<p>JavaConfig code isn’t just any other Java code. It’s conceptually set apart from the business logic and domain code in your application. <code>JavaConfig is configuration code.</code> This means it shouldn’t contain any business log, nor should JavaConfig invade any code where business logic resides. </p>
<p>JavaConfig is often set apart in a separate package from the rest of an application’s logic so there’s no confusion as to its purpose.</p>
<h3 id="2-1-Creating-a-configuration-class-with-Configuration-and-Bean"><a href="#2-1-Creating-a-configuration-class-with-Configuration-and-Bean" class="headerlink" title="2.1 Creating a configuration class with @Configuration and @Bean"></a>2.1 Creating a configuration class with <code>@Configuration</code> and <code>@Bean</code></h3><p><code>@Bean</code> annotation tells Spring that this method will return an object that should be registered as a bean in the Spring application context. The body contains logic that ultimately results in the creation of the bean instance</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span> <span class="comment">// this bean's id is `cd`</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CD <span class="title">cD</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AnAlbum();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span>(name = <span class="string">"anotherCd"</span>)  <span class="comment">// this bean's id is `anotherCd`</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CD <span class="title">cD</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AnAlbum();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> MediaPlayer <span class="title">mediaPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(cD());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What’s wrong with the above JavaConfig? Notice that the creation of bean <code>mediaPlayer</code> depends on the creation of bean <code>cd</code> which lives in the same class. How can we improve it?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CD <span class="title">cD</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AnAlbum();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> MediaPlayer <span class="title">mediaPlayer</span><span class="params">(CD cd)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(cd);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above improved example is a much better choice!! Because it doesn’t depend on the <code>cd</code> bean declared in the same configuration class.</p>
<p>By default, all beans in Spring are singletons, and there’s no reason you need to create a duplicate instance for the second bean. Thus, both above <code>mediaPlayer()</code> method is given the same instance of bean <code>cd</code>.</p>
<h2 id="An-Example-to-close-this-tutorial-Bean-Autowiring-and-Factory-Pattern"><a href="#An-Example-to-close-this-tutorial-Bean-Autowiring-and-Factory-Pattern" class="headerlink" title="An Example to close this tutorial - Bean Autowiring and Factory Pattern"></a>An Example to close this tutorial - Bean Autowiring and Factory Pattern</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Template interface to generate emails for different type of notifications</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Generate email subject</div><div class="line">     * */</div><div class="line">    <span class="function">String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Generate email body</div><div class="line">     * */</div><div class="line">    <span class="function">String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TimeZone timeZone;</div><div class="line">    <span class="keyword">private</span> Date lastCheckTime;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralEmailTemplate</span><span class="params">(TimeZone timeZone, Date lastCheckTime)</span> </span>&#123;</div><div class="line">        timeZone = timeZone;</div><div class="line">        lastCheckTime = lastCheckTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerEmailTemplate</span> <span class="keyword">extends</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerHealthEmailTemplate</span><span class="params">(TimeZone timeZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(timeZone, <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server health"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskSpaceEmailTemplate</span> <span class="keyword">extends</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiskSpaceEmailTemplate</span><span class="params">(TimeZone timeZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(timeZone, <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"disk"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"disk space"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.xxx"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailTemplateFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ServerHealth"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getServerHealthEmailTemplate</span><span class="params">(TimeZone timeZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerHealthEmailTemplate(timeZone);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"DiskSpace"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getDiskSpaceEmailTemplate</span><span class="params">(TimeZone timeZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiskSpaceEmailTemplate(timeZone);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> appropriate email template according to given NotificationType</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getEmailTemplate</span><span class="params">(NotificationType notificationType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(notificationType == NotificationType.ServerHealth) &#123;</div><div class="line">            <span class="keyword">return</span> getServerHealthEmailTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(notificationType == NotificationType.LowDiskSpace) &#123;</div><div class="line">            <span class="keyword">return</span> getLowDiskSpaceEmailTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IEmailTemplate() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - Ruby blocks and yield statement]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/08/ruby/Ruby-Ruby-blocks-and-yield-statement/</url>
      <content type="html"><![CDATA[<h2 id="Ruby-Blocks"><a href="#Ruby-Blocks" class="headerlink" title="Ruby Blocks"></a>Ruby Blocks</h2><p>Ruby has a concept of Block.</p>
<ul>
<li>A block consists of chunks of code.</li>
<li>You assign a name to a block.</li>
<li>The code in the block is always enclosed within braces <code>{}</code>.</li>
<li>A block is always invoked from a function with the same name as that of the block. This means that if you have a block with the name test, then you use the function test to invoke this block.</li>
<li>You invoke a block by using the <code>yield</code> statement.</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">block_name &#123;</div><div class="line">   statement1</div><div class="line">   statement2</div><div class="line">   ..........</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="The-yield-Statement"><a href="#The-yield-Statement" class="headerlink" title="The yield Statement"></a>The yield Statement</h2><p><code>yield</code> is a statement in ruby that is widely used in order to share common logic. </p>
<p>Imagine that you have two huge business logic that is only different from each other in a few couple lines. How to avoid checking in the 95% shared logic twice? You definitely don’t want to write code like the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def handle_A</div><div class="line">    // 1000 lines logic X</div><div class="line">    </div><div class="line">    param_A.special_logic_A</div><div class="line"></div><div class="line">    // 1000 lines logic Y</div><div class="line">end</div><div class="line"></div><div class="line">def handle_B </div><div class="line">    // 1000 lines logic X</div><div class="line">    </div><div class="line">    param_B.special_logic_B</div><div class="line"></div><div class="line">    // 1000 lines logic Y</div><div class="line">end</div></pre></td></tr></table></figure>
<p>Wouldn’t it nice to be</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def handle_A</div><div class="line">    handle(special_logic_of_A)</div><div class="line">end</div><div class="line"></div><div class="line">def handle_B</div><div class="line">    handle(special_logic_of_B)</div><div class="line">end</div><div class="line"></div><div class="line">def handle(logic)</div><div class="line">    // 1000 lines logic X</div><div class="line">    </div><div class="line">    run_special_logic(logic)</div><div class="line"></div><div class="line">    // 1000 lines logic Y</div><div class="line">end</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>In Java, you can a chieve it either with Java 8 new lambda feature (highly recommended, because it gives you much more flexibility) or executing methods in interface/abstract class defined in both classes (old style before lambda is available). </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle_A</span><span class="params">()</span> </span>&#123;</div><div class="line">    handle(t -&gt; t.doSomething());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle_B</span><span class="params">()</span> </span>&#123;</div><div class="line">    handle(t -&gt; t.doSomethingElse());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Consumer&lt;T&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// 1000 lines logic X</span></div><div class="line">    </div><div class="line">    c.accept();</div><div class="line">    </div><div class="line">    <span class="comment">// 1000 lines logic Y</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>How can you achieve this in Ruby? With <code>yield</code>!</p>
<p>From the name you can tell that, just like yielding to people in a highway traffic, it’s about yielding to an inserted/passed-in statement when program hit this key word. <code>yeild</code> statement can take either no params or any number of params.</p>
<h3 id="yield-with-no-params"><a href="#yield-with-no-params" class="headerlink" title="yield with no params"></a>yield with no params</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span></div><div class="line">   puts <span class="string">"xxx"</span></div><div class="line">   </div><div class="line">   <span class="keyword">yield</span></div><div class="line">   </div><div class="line">   puts <span class="string">"yyy"</span></div><div class="line">   </div><div class="line">   <span class="keyword">yield</span></div><div class="line"><span class="keyword">end</span></div><div class="line">test &#123; puts <span class="string">"000"</span> &#125;</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxx</div><div class="line">000</div><div class="line">yyy</div><div class="line">000</div></pre></td></tr></table></figure>
<p>You can see that <code>yield</code> will be replaced by statement <code>puts &quot;000&quot;</code></p>
<h3 id="yield-with-params"><a href="#yield-with-params" class="headerlink" title="yield with params"></a>yield with params</h3><p>Here’s a simple example of <code>yield</code> taking 1 param</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span></div><div class="line">   <span class="keyword">yield</span> <span class="string">"xxx"</span></div><div class="line"></div><div class="line">   puts <span class="string">"000"</span></div><div class="line"></div><div class="line">   <span class="keyword">yield</span> <span class="string">"yyy"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">test &#123;<span class="params">|i|</span> puts <span class="string">"<span class="subst">#&#123;i&#125;</span>"</span>&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx</div><div class="line">000</div><div class="line">yyy</div></pre></td></tr></table></figure>
<p>The format to rake two params is:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">yield</span> a, b</div></pre></td></tr></table></figure>
<p>and the block is:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test &#123;<span class="params">|a, b|</span> statement&#125;</div></pre></td></tr></table></figure>
<p>Here’s an example to encrypt and decrypt a yaml file. Most logic is the same between processes of encrypting and decrypting. So we use <code>yield</code> to abstract that and maintain the common logic in only one copy.</p>
<p>The first version:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'yaml'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YamlInterpreter</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(encryption_service)</span></span></div><div class="line">    @encryption_service = encryption_service</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decrypt_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    interpret_yaml(file_path) &#123; <span class="params">|k, v|</span> v = @encryption_service.decryptIfNecessary(k, v) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">encrypt_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    interpret_yaml(file_path) &#123; <span class="params">|k, v|</span> v = @encryption_service.encryptIfNecessary(k, v) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">interpret_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    <span class="keyword">begin</span></div><div class="line">      configs = YAML::load(yaml_file_path.read)</div><div class="line"></div><div class="line">      configs.each <span class="keyword">do</span> <span class="params">|k,v|</span></div><div class="line">        <span class="keyword">yield</span> k, v</div><div class="line">        configs[k] = v</div><div class="line">      <span class="keyword">end</span></div><div class="line"></div><div class="line">      File.open(file_path, <span class="string">"w"</span>) &#123; <span class="params">|f|</span> YAML.dump(configs, f) &#125;</div><div class="line">    <span class="keyword">rescue</span> Exception =&gt; ex</div><div class="line">      raise ex, <span class="string">"Failed interpreting file <span class="subst">#&#123;file_path&#125;</span>.\n<span class="subst">#&#123;ex.<span class="keyword">class</span>&#125;</span>: <span class="subst">#&#123;ex.message&#125;</span>\n<span class="subst">#&#123;ex.backtrace.join(<span class="string">"\n"</span>)&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>The problem with the first version is that you’ll find your new file doesn’t have all the updated encrypted/decrypted values. The root cause is the valid scope of a <code>yield</code> statement. In the above example, the updated <code>v</code> only lives in the line 9 or line 13, and doesn’t last when jumping back to the context in line 22.</p>
<p>The fix is to pass in not only the k-v pair, but also the Hash object itself to make sure the changes persist.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'yaml'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YamlInterpreter</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(encryption_service)</span></span></div><div class="line">    @encryption_service = encryption_service</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decrypt_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    interpret_yaml(file_path) &#123; <span class="params">|configs, k, v|</span> configs[k] = @encryption_service.decryptIfNecessary(k, v) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">encrypt_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    interpret_yaml(file_path) &#123; <span class="params">|configs, k, v|</span> configs[k] = @encryption_service.encryptIfNecessary(k, v) &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">interpret_yaml</span><span class="params">(file_path)</span></span></div><div class="line">    <span class="keyword">begin</span></div><div class="line">      configs = YAML::load(yaml_file_path.read)</div><div class="line"></div><div class="line">      configs.each <span class="keyword">do</span> <span class="params">|k,v|</span></div><div class="line">        <span class="keyword">yield</span> configs, k, v</div><div class="line">        configs[k] = v</div><div class="line">      <span class="keyword">end</span></div><div class="line"></div><div class="line">      File.open(file_path, <span class="string">"w"</span>) &#123; <span class="params">|f|</span> YAML.dump(configs, f) &#125;</div><div class="line">    <span class="keyword">rescue</span> Exception =&gt; ex</div><div class="line">      raise ex, <span class="string">"Failed interpreting file <span class="subst">#&#123;file_path&#125;</span>.\n<span class="subst">#&#123;ex.<span class="keyword">class</span>&#125;</span>: <span class="subst">#&#123;ex.message&#125;</span>\n<span class="subst">#&#123;ex.backtrace.join(<span class="string">"\n"</span>)&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How does ZooKeeper's persistent sequential id work]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/07/distributed%20system/zookeeper/How-does-ZooKeeper-s-persistent-sequential-id-work/</url>
      <content type="html"><![CDATA[<p>I got the opportunity to learn <code>how ZooKeeper&#39;s PERSISTENT_SEQUENTIAL node works</code>, <code>how a PERSISTENT_SEQUENTIAL node is created</code>, and <code>how the persistent sequential id is generated</code> recently in a ZooKeeper data migration project.</p>
<p>The project is about implementing our own logic to back and restore ZooKeeper’s data. There are several reasons why we are doing it ourselves rather than using ZooKeeper’s logs and snapshots, but it’s beyond the scope of this article.</p>
<p>The <code>PERSISTENT_SEQUENTIAL</code> node problem came up to the table in the following scenario. Let’s say you want to maintain <code>a list of strictly ordered tasks</code> in ZooKeeper, basically <code>using ZooKeeper as a task scheduling pool</code>. The best practice to do it is, having a parent node <code>/tasks</code> and creating new tasks as its children nodes with <code>CreateMode.PERSISTENT_SEQUENTIAL</code>, with names like <code>/tasks/task0000000001</code> and <code>/tasks/task0000000002</code>. How is the sequential id generated? ZooKeeper has an internally maintained counter.</p>
<p>The original general implementation for our own migration is to take a backup of all the <code>persistent</code> nodes and their data in old ZooKeeper (ZK0) and restore the data to the newly deployed ZooKeeper (ZK1) by recreating all those <code>persistent</code> nodes. That doesn’t work for <code>PERSISTENT_SEQUENTIAL</code> nodes because the internal counter for id does not get migrated. So when I trired to create new tasks in the ZK1 after migration, the sequential id generator tries to create the new task as <code>/tasks/task0000000001</code> and got a confliction of nodes with <code>KeeperException.NodeExistsException</code>.</p>
<p>So let’s talk about how <code>PERSISTENT_SEQUENTIAL</code> nodes works and how I solved this problem for our migration.</p>
<a id="more"></a>
<h1 id="The-Start"><a href="#The-Start" class="headerlink" title="The Start"></a>The Start</h1><p>The only source I found online is this <a href="https://stackoverflow.com/questions/10338076/zookeeper-persistent-sequential-incrementing-by-two/36927266#36927266" target="_blank" rel="external">stackoverflow</a> question.</p>
<blockquote>
<p>Creation or deletion of any child znode increments the cversion of the parent znode. Since in ZooKeeper <code>3.3.3</code>, the counter used for sequential znode creation is cversion itself, any “spurious” creation/deletion between two sequential creations is the most likely reason for the behavior you are experiencing.</p>
<p>Keep in mind that since <code>ZooKeeper 3.4.x</code>, deletions do not affect the parent sequence counter anymore: a <code>DataNode</code> internally holds a <code>StatPersisted</code> in which the <code>cversion</code> represents <code>the number of creations</code> exactly; on the contrary, the cversion of the Stat that you obtain by querying the node still represents the number of children changes: Stat.cversion = 2*PersistedStat.cversion - Stat.numChildren.</p>
</blockquote>
<p>(FYI, the original post says its <code>PersistedStat</code>, and I editted and corrected it as <code>StatPersisted</code>)</p>
<h1 id="The-Principle"><a href="#The-Principle" class="headerlink" title="The Principle"></a>The Principle</h1><p>On the server side, ZooKeeper (<code>ZooKeeperServer.java</code>) maintains a hashmap mapping each path to a <code>ChangeRecord</code> object, which consists of <code>StatPersisted</code>. <code>StatPersisted</code> is very similar to <code>Stat</code>, having all the version variables, especially <code>cversion</code>. </p>
<p>In <code>Stat</code>, <code>cversion</code> indicates <code>number of changes to the children of a znode</code>. So in normal usage, a node’s <code>cversion</code> will increase when its children are added and removed. But since 3.4.x, <code>StatPersisted</code>‘s <code>cversion</code> in <code>ChangeRecord</code> only increase when a child is added to the node.</p>
<p>So when a <code>PERSISTENT_SEQUENTIAL</code> node is added to ZooKeeper, ZooKeeper will look at its parent’s <code>ChangeRecord</code>‘s <code>cversion</code>, use it as sequential id, and then increment <code>cversion</code> by 1.</p>
<h1 id="Source-Code-Analysis"><a href="#Source-Code-Analysis" class="headerlink" title="Source Code Analysis"></a>Source Code Analysis</h1><h2 id="The-Client-ZooKeeper-java"><a href="#The-Client-ZooKeeper-java" class="headerlink" title="The Client - ZooKeeper.java"></a>The Client - <code>ZooKeeper.java</code></h2><p><a href="http://grepcode.com/file/repo1.maven.org/maven2/org.apache.zookeeper/zookeeper/3.4.6/org/apache/zookeeper/ZooKeeper.java#ZooKeeper" target="_blank" rel="external">org.apache.zookeeper.ZooKeeper.java</a> in 3.4.6. This client code sends a request to the server.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">An ephemeral node will be removed by the ZooKeeper automatically when the session associated with the creation of the node expires.</div><div class="line"></div><div class="line">The flags argument can also specify to create a sequential node. The actual path name of a sequential node will be the given path plus a suffix "i" where i is the current sequential number of the node. The sequence number is always fixed length of 10 digits, 0 padded. Once such a node is created, the sequential number will be incremented by one.</div><div class="line"></div><div class="line">If a node with the same actual path already exists in the ZooKeeper, a KeeperException with error code KeeperException.NodeExists will be thrown. Note that since a different actual path is used for each invocation of creating sequential node with the same path argument, the call will never throw "file exists" KeeperException.</div><div class="line"></div><div class="line">If the parent node does not exist in the ZooKeeper, a KeeperException with error code KeeperException.NoNode will be thrown.</div><div class="line"></div><div class="line">An ephemeral node cannot have children. If the parent node of the given path is ephemeral, a KeeperException with error code KeeperException.NoChildrenForEphemerals will be thrown.</div><div class="line"></div><div class="line">If a node is created successfully, the ZooKeeper server will trigger the watches on the path left by exists calls, and the watches on the parent of the node by getChildren calls.</div><div class="line"></div><div class="line">The maximum allowable size of the data array is 1 MB (1,048,576 bytes). Arrays larger than this will cause a KeeperExecption to be thrown.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl,</span></span></div><div class="line">        CreateMode createMode)</div><div class="line">    <span class="keyword">throws</span> KeeperException, InterruptedException</div><div class="line">&#123;</div><div class="line">    <span class="keyword">final</span> String clientPath = path;</div><div class="line">    PathUtils.validatePath(clientPath, createMode.isSequential());</div><div class="line"></div><div class="line">    <span class="keyword">final</span> String serverPath = prependChroot(clientPath);</div><div class="line"></div><div class="line">    RequestHeader h = <span class="keyword">new</span> RequestHeader();</div><div class="line">    h.setType(ZooDefs.OpCode.create);</div><div class="line">    CreateRequest request = <span class="keyword">new</span> CreateRequest();</div><div class="line">    CreateResponse response = <span class="keyword">new</span> CreateResponse();</div><div class="line">    request.setData(data);</div><div class="line">    </div><div class="line">    <span class="comment">/////////////////////////////////</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * You can see here that ZooKeeper client set </div><div class="line">    * the `CreateMode` flag for the request</div><div class="line">    */</div><div class="line">    request.setFlags(createMode.toFlag());</div><div class="line">    <span class="comment">/////////////////////////////////</span></div><div class="line">    </div><div class="line">    request.setPath(serverPath);</div><div class="line">    <span class="keyword">if</span> (acl != <span class="keyword">null</span> &amp;&amp; acl.size() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.InvalidACLException();</div><div class="line">    &#125;</div><div class="line">    request.setAcl(acl);</div><div class="line">    </div><div class="line">    <span class="comment">///////// then send the request to ZooKeeper server /////////</span></div><div class="line">    ReplyHeader r = cnxn.submitRequest(h, request, response, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">/////////////////////////////////</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (r.getErr() != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> KeeperException.create(KeeperException.Code.get(r.getErr()),</div><div class="line">                clientPath);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cnxn.chrootPath == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> response.getPath();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> response.getPath().substring(cnxn.chrootPath.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="The-Server-Side"><a href="#The-Server-Side" class="headerlink" title="The Server Side"></a>The Server Side</h2><h3 id="1-PrepRequestProcessor-java"><a href="#1-PrepRequestProcessor-java" class="headerlink" title="1. PrepRequestProcessor.java"></a>1. <code>PrepRequestProcessor.java</code></h3><p><a href="http://grepcode.com/file/repo1.maven.org/maven2/org.apache.zookeeper/zookeeper/3.4.6/org/apache/zookeeper/server/PrepRequestProcessor.java?av=f" target="_blank" rel="external">org.apache.zooekeeper.server.PrepRequestProcessor.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This method will be called inside the ProcessRequestThread, which is a singleton, so there will be a single thread calling this code.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pRequest2Txn</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> zxid, Request request, Record record, <span class="keyword">boolean</span> deserialize)</span></span></div><div class="line">    <span class="keyword">throws</span> KeeperException, IOException, RequestProcessorException</div><div class="line">&#123;</div><div class="line">    request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid,</div><div class="line">                                zks.getTime(), type);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="comment">//////// --- the beginning --- ////////</span></div><div class="line">        <span class="comment">//////// if this request is to create node  ///////// </span></div><div class="line">        <span class="keyword">case</span> OpCode.create:</div><div class="line">        </div><div class="line">            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());</div><div class="line">            CreateRequest createRequest = (CreateRequest)record;   </div><div class="line">            <span class="keyword">if</span>(deserialize)</div><div class="line">                ByteBufferInputStream.byteBuffer2Record(request.request, createRequest);</div><div class="line">            String path = createRequest.getPath();</div><div class="line">            <span class="keyword">int</span> lastSlash = path.lastIndexOf(<span class="string">'/'</span>);</div><div class="line">            <span class="keyword">if</span> (lastSlash == -<span class="number">1</span> || path.indexOf(<span class="string">'\0'</span>) != -<span class="number">1</span> || failCreate) &#123;</div><div class="line">                LOG.info(<span class="string">"Invalid path "</span> + path + <span class="string">" with session 0x"</span> +</div><div class="line">                        Long.toHexString(request.sessionId));</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.BadArgumentsException(path);</div><div class="line">            &#125;</div><div class="line">            List&lt;ACL&gt; listACL = removeDuplicates(createRequest.getAcl());</div><div class="line">            <span class="keyword">if</span> (!fixupACL(request.authInfo, listACL)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.InvalidACLException(path);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//////// get parent node's ChangeRecord  /////////</span></div><div class="line">            String parentPath = path.substring(<span class="number">0</span>, lastSlash);</div><div class="line">            ChangeRecord parentRecord = getRecordForPath(parentPath); <span class="comment">// See implementation below</span></div><div class="line"></div><div class="line">            checkACL(zks, parentRecord.acl, ZooDefs.Perms.CREATE,</div><div class="line">                    request.authInfo);</div><div class="line">            </div><div class="line">            <span class="comment">//////// get cversion of parent's ChangeRecord ////////</span></div><div class="line">            <span class="keyword">int</span> parentCVersion = parentRecord.stat.getCversion();</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">//////// get the CreateMode flag from request ////////</span></div><div class="line">            CreateMode createMode =</div><div class="line">                CreateMode.fromFlag(createRequest.getFlags());</div><div class="line">            </div><div class="line">            <span class="comment">//////// create sequential node path ////////</span></div><div class="line">            <span class="keyword">if</span> (createMode.isSequential()) &#123;</div><div class="line">                path = path + String.format(Locale.ENGLISH, <span class="string">"%010d"</span>, parentCVersion);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                PathUtils.validatePath(path);</div><div class="line">            &#125; <span class="keyword">catch</span>(IllegalArgumentException ie) &#123;</div><div class="line">                LOG.info(<span class="string">"Invalid path "</span> + path + <span class="string">" with session 0x"</span> +</div><div class="line">                        Long.toHexString(request.sessionId));</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.BadArgumentsException(path);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//////// check if node exists ////////</span></div><div class="line">                <span class="keyword">if</span> (getRecordForPath(path) != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NodeExistsException(path);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (KeeperException.NoNodeException e) &#123;</div><div class="line">                <span class="comment">// ignore this one</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//////// ensure parent is a persistent node ////////</span></div><div class="line">            <span class="keyword">boolean</span> ephemeralParent = parentRecord.stat.getEphemeralOwner() != <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (ephemeralParent) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoChildrenForEphemeralsException(path);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//////// increase cversion of parent's ChangeRecord by 1 ////////</span></div><div class="line">            <span class="keyword">int</span> newCversion = parentRecord.stat.getCversion()+<span class="number">1</span>;</div><div class="line">            request.txn = <span class="keyword">new</span> CreateTxn(path, createRequest.getData(),</div><div class="line">                    listACL,</div><div class="line">                    createMode.isEphemeral(), newCversion);</div><div class="line">            StatPersisted s = <span class="keyword">new</span> StatPersisted();</div><div class="line">            <span class="keyword">if</span> (createMode.isEphemeral()) &#123;</div><div class="line">                s.setEphemeralOwner(request.sessionId);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//////// set parent's ChangeRecord ////////</span></div><div class="line">            parentRecord = parentRecord.duplicate(request.hdr.getZxid());</div><div class="line">            parentRecord.childCount++;</div><div class="line">            parentRecord.stat.setCversion(newCversion);</div><div class="line">            addChangeRecord(parentRecord);</div><div class="line">            addChangeRecord(<span class="keyword">new</span> ChangeRecord(request.hdr.getZxid(), path, s,</div><div class="line">                    <span class="number">0</span>, listACL));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">//////// --- the end --- ////////</span></div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">case</span> OpCode.delete:</div><div class="line">            ...</div><div class="line">        <span class="keyword">case</span> OpCode.setData:</div><div class="line">            ...</div><div class="line">        <span class="keyword">case</span> OpCode.setACL:</div><div class="line">            ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function">ChangeRecord <span class="title">getRecordForPath</span><span class="params">(String path)</span> <span class="keyword">throws</span> KeeperException.NoNodeException </span>&#123;</div><div class="line">        ChangeRecord lastChange = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">synchronized</span> (zks.outstandingChanges) &#123;</div><div class="line">            <span class="comment">/////// zks is an Object of `ZooKeeperServer.java` ///////</span></div><div class="line">            lastChange = zks.outstandingChangesForPath.get(path);</div><div class="line">            <span class="comment">/*</span></div><div class="line">            for (int i = 0; i &lt; zks.outstandingChanges.size(); i++) &#123;</div><div class="line">                ChangeRecord c = zks.outstandingChanges.get(i);</div><div class="line">                if (c.path.equals(path)) &#123;</div><div class="line">                    lastChange = c;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            */</div><div class="line">            <span class="comment">//////// if this is a new node, create its ChangeRecord ////////</span></div><div class="line">            <span class="keyword">if</span> (lastChange == <span class="keyword">null</span>) &#123;</div><div class="line">                DataNode n = zks.getZKDatabase().getNode(path);</div><div class="line">                <span class="keyword">if</span> (n != <span class="keyword">null</span>) &#123;</div><div class="line">                    Long acl;</div><div class="line">                    Set&lt;String&gt; children;</div><div class="line">                    <span class="keyword">synchronized</span>(n) &#123;</div><div class="line">                        acl = n.acl;</div><div class="line">                        children = n.getChildren();</div><div class="line">                    &#125;</div><div class="line">                    lastChange = <span class="keyword">new</span> ChangeRecord(-<span class="number">1</span>, path, n.stat,</div><div class="line">                        children != <span class="keyword">null</span> ? children.size() : <span class="number">0</span>,</div><div class="line">                            zks.getZKDatabase().convertLong(acl));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (lastChange == <span class="keyword">null</span> || lastChange.stat == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException(path);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//////// return the ChangeRecord ////////</span></div><div class="line">        <span class="keyword">return</span> lastChange;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="2-ZooKeeperServer-java-and-ChangeRecord-java"><a href="#2-ZooKeeperServer-java-and-ChangeRecord-java" class="headerlink" title="2. ZooKeeperServer.java and ChangeRecord.java"></a>2. <code>ZooKeeperServer.java</code> and <code>ChangeRecord.java</code></h3><p><a href="http://grepcode.com/file/repo1.maven.org/maven2/org.apache.zookeeper/zookeeper/3.4.6/org/apache/zookeeper/server/ZooKeeperServer.java" target="_blank" rel="external">org.apache.zookeeper.server.ZooKeeperServer.java</a></p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">More</span> ...<span class="title">ZooKeeperServer</span> <span class="keyword">implements</span> <span class="title">SessionExpirer</span>, <span class="title">ServerStats</span>.<span class="title">Provider</span> </span>{
    ...

    <span class="keyword">final</span> List&lt;ChangeRecord&gt; outstandingChanges = <span class="keyword">new</span> ArrayList&lt;ChangeRecord&gt;();
    <span class="comment">// this data structure must be accessed under the outstandingChanges lock</span>

    <span class="comment">//////// a hashmap that maps &lt;path, path's ChangeRecord&gt; ////////</span>
    <span class="keyword">final</span> HashMap&lt;String, ChangeRecord&gt; outstandingChangesForPath =
    <span class="keyword">new</span> HashMap&lt;String, ChangeRecord&gt;();

    ...

    <span class="comment">/**
     * This structure is used to facilitate information sharing between PrepRP
     * and FinalRP.
     */</span>
    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeRecord</span> </span>{
        ChangeRecord(<span class="keyword">long</span> zxid, String path, StatPersisted stat, <span class="keyword">int</span> childCount,
                List&lt;ACL&gt; acl) {
            <span class="keyword">this</span>.zxid = zxid;
            <span class="keyword">this</span>.path = path;
            <span class="keyword">this</span>.stat = stat;
            <span class="keyword">this</span>.childCount = childCount;
            <span class="keyword">this</span>.acl = acl;
        }

        <span class="keyword">long</span> zxid;

        String path;

        StatPersisted stat; <span class="comment">/* Make sure to create a new object when changing */</span>

        <span class="keyword">int</span> childCount;

        List&lt;ACL&gt; acl; <span class="comment">/* Make sure to create a new object when changing */</span>

        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)
        <span class="function">ChangeRecord <span class="title">duplicate</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>{
            StatPersisted stat = <span class="keyword">new</span> StatPersisted();
            <span class="keyword">if</span> (<span class="keyword">this</span>.stat != <span class="keyword">null</span>) {
                DataTree.copyStatPersisted(<span class="keyword">this</span>.stat, stat);
            }
            <span class="keyword">return</span> <span class="keyword">new</span> ChangeRecord(zxid, path, stat, childCount,
                    acl == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;ACL&gt;() : <span class="keyword">new</span> ArrayList(acl));
        }
    }
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper - Consistency Guarantees]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/04/distributed%20system/zookeeper/ZooKeeper-Consistency-Guarantees/</url>
      <content type="html"><![CDATA[<p>ZooKeeper is a high performance, scalable service. Both reads and write operations are designed to be fast, though reads are faster than writes. The reason for this is that in the case of reads, ZooKeeper can serve older data, which in turn is due to ZooKeeper’s consistency guarantees:</p>
<h3 id="Sequential-Consistency"><a href="#Sequential-Consistency" class="headerlink" title="Sequential Consistency"></a>Sequential Consistency</h3><pre><code>Updates from a client will be applied in the order that they were sent.
</code></pre><h3 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h3><pre><code>Updates either succeed or fail -- there are no partial results.
</code></pre><h3 id="Single-System-Image"><a href="#Single-System-Image" class="headerlink" title="Single System Image"></a>Single System Image</h3><pre><code>A client will see the same view of the service regardless of the server that it connects to.
</code></pre><h3 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h3><pre><code>Once an update has been applied, it will persist from that time forward until a client overwrites the update. This guarantee has two corollaries:

1. If a client gets a successful return code, the update will have been applied. On some failures (communication errors, timeouts, etc) the client will not know if the update has applied or not. We take steps to minimize the failures, but the only guarantee is only present with successful return codes. (This is called the monotonicity condition in Paxos.)

2. Any updates that are seen by the client, through a read request or successful update, will never be rolled back when recovering from server failures.
</code></pre><h3 id="Timeliness"><a href="#Timeliness" class="headerlink" title="Timeliness"></a>Timeliness</h3><pre><code>The clients view of the system is guaranteed to be up-to-date within a certain time bound. (On the order of tens of seconds.) Either system changes will be seen by a client within this bound, or the client will detect a service outage.
</code></pre><hr>
<a id="more"></a>
<p>Using these consistency guarantees, it is easy to build higher level functions such as leader election, barriers, queues, and read/write revocable locks solely at the ZooKeeper client (no additions needed to ZooKeeper). See Recipes and Solutions for more details.</p>
<h2 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h2><p>Sometimes developers mistakenly assume one other guarantee that ZooKeeper does not in fact make. This is <code>Simultaneously Conistent Cross-Client Views</code></p>
<blockquote>
<p>ZooKeeper does not guarantee that at every instance in time, two different clients will have identical views of ZooKeeper data.</p>
</blockquote>
<p>Due to factors like network delays, one client may perform an update before another client gets notified of the change. Consider the scenario of two clients, A and B. </p>
<p>If <code>client A</code> sets the value of a znode <code>/a</code> from <code>0</code> to <code>1</code>, then tells <code>client B</code> to read <code>/a</code>, <code>client B</code> may read the old value of <code>0</code>, depending on which server it is connected to. If it is important that <code>Client A</code> and <code>Client B</code> read the same value, <code>Client B</code> should call the <code>sync()</code> method from the ZooKeeper API method before it performs its read.</p>
<p>So, ZooKeeper by itself doesn’t guarantee that changes occur synchronously across all servers, but ZooKeeper primitives can be used to construct higher level functions that provide useful client synchronization. (For more information, see the ZooKeeper Recipes).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - Basic Data Structures, Array, List, and Hash]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/04/ruby/Ruby-Basic-Data-Structures-Array-List-and-Hash/</url>
      <content type="html"><![CDATA[<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Array indexing starts at 0, as in C or Java. <code>A negative index is assumed relative to the end of the array</code> — that is, <code>an index of -1 indicates the last element of the array</code>, <code>-2 is the next to last element in the array</code>, and so on.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Creating arrays</span></div><div class="line">names = Array.new</div><div class="line">names = Array.new(<span class="number">20</span>)  <span class="comment"># Set the size of an array</span></div><div class="line"></div><div class="line">puts names.size <span class="comment"># 20</span></div><div class="line">puts names.length <span class="comment">#20</span></div><div class="line"></div><div class="line"><span class="comment">#----------------</span></div><div class="line"></div><div class="line">names = Array.new(<span class="number">4</span>, <span class="string">"mac"</span>)</div><div class="line">puts <span class="string">"<span class="subst">#&#123;names&#125;</span>"</span> <span class="comment"># macmacmacmac</span></div><div class="line"></div><div class="line"><span class="comment">#----------------</span></div><div class="line"></div><div class="line">nums = Array.new(<span class="number">10</span>) &#123;<span class="params">|e|</span> e = e * <span class="number">2</span>&#125;</div><div class="line">puts <span class="string">"<span class="subst">#&#123;nums&#125;</span>"</span> <span class="comment"># 024681012141618</span></div><div class="line"></div><div class="line">nums = Array.new(<span class="number">10</span>) &#123;<span class="params">|e|</span> e = e + <span class="number">1</span>&#125;</div><div class="line">puts <span class="string">"<span class="subst">#&#123;nums&#125;</span>"</span> <span class="comment"># 12345678910</span></div><div class="line"></div><div class="line"><span class="comment">#----------------</span></div><div class="line"></div><div class="line">nums = Array.[](<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">puts <span class="string">"<span class="subst">#&#123;nums&#125;</span>"</span> <span class="comment"># 12345</span></div><div class="line"></div><div class="line">nums = Array[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">puts <span class="string">"<span class="subst">#&#123;nums&#125;</span>"</span> <span class="comment"># 12345</span></div></pre></td></tr></table></figure>
<p>The <code>Kernel</code> module available in core Ruby has an Array method, which only accepts a single argument. Here, the method takes a range as an argument to create an array of digits:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">digits = Array(<span class="number">0</span>..<span class="number">3</span>)</div><div class="line">puts <span class="string">"<span class="subst">#&#123;digits&#125;</span>"</span> <span class="comment"># 0123</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Array-built-in-methods"><a href="#Array-built-in-methods" class="headerlink" title="Array built-in methods"></a>Array built-in methods</h3><p>Following is the way to create an instance of Array object:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Array.[](...) </div><div class="line">Array[...]</div><div class="line">[...]</div><div class="line">Array(...)</div></pre></td></tr></table></figure>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">%w(foo bar)</span></div></pre></td></tr></table></figure>
<p>is a shortcut for </p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"foo"</span>, <span class="string">"bar"</span>].</div></pre></td></tr></table></figure>
<p><code>%w</code> quotes like single quotes <code>&#39;&#39;</code> (no variable interpolation, fewer escape sequences), while <code>%W</code> quotes like double quotes <code>&quot;&quot;</code>.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">irb &gt; foo=<span class="string">"hello"</span>             <span class="comment"># "hello"</span></div><div class="line">irb &gt; <span class="string">%W(foo bar baz <span class="subst">#&#123;foo&#125;</span>)</span>  <span class="comment"># ["foo", "bar", "baz", "hello"]</span></div><div class="line">irb &gt; <span class="string">%w(foo bar baz <span class="subst">#&#123;foo&#125;</span>)</span>  <span class="comment"># ["foo", "bar", "baz", "\#&#123;foo&#125;"]</span></div></pre></td></tr></table></figure>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>A Hash is <code>a collection of key-value pairs</code> like this: <code>&quot;employee&quot; =&gt; &quot;salary&quot;</code>. It is similar to an <code>Array</code>, except that indexing is done via arbitrary keys of any object type, not an integer index.</p>
<p>The order in which you traverse a hash by either key or value may seem arbitrary and will generally not be in the insertion order. If you attempt to access a hash with a key that does not exist, the method will return <code>nil</code>.</p>
<h3 id="Creating-Hashes"><a href="#Creating-Hashes" class="headerlink" title="Creating Hashes"></a>Creating Hashes</h3><p>Create an <code>empty hash</code> with the new class method:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">months = Hash.new</div></pre></td></tr></table></figure>
<p>You can also use new to create a hash with a default value, which is otherwise just <code>nil</code>:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">months = Hash.new( <span class="string">"month"</span> )</div><div class="line">months = Hash.new <span class="string">"month"</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">months = Hash.new( <span class="string">"month"</span> )</div><div class="line"></div><div class="line">puts <span class="string">"<span class="subst">#&#123;months[<span class="number">0</span>]&#125;</span>"</span></div><div class="line">puts <span class="string">"<span class="subst">#&#123;months[<span class="number">72</span>]&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># month</span></div><div class="line"><span class="comment"># month</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">H = Hash[<span class="string">"a"</span> =&gt; <span class="number">100</span>, <span class="string">"b"</span> =&gt; <span class="number">200</span>]</div><div class="line"></div><div class="line">puts <span class="string">"<span class="subst">#&#123;H[<span class="string">'a'</span>]&#125;</span>"</span></div><div class="line">puts <span class="string">"<span class="subst">#&#123;H[<span class="string">'b'</span>]&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div></pre></td></tr></table></figure>
<p><code>You can use any Ruby object as a key or value, even an array</code>, so following example is a valid one:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="string">"jan"</span>] =&gt; <span class="string">"January"</span></div></pre></td></tr></table></figure>
<h3 id="Hash-Built-in-Methods"><a href="#Hash-Built-in-Methods" class="headerlink" title="Hash Built-in Methods"></a>Hash Built-in Methods</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hash[[key =&gt;<span class="params">|, value]* ]</span></div><div class="line">Hash.new</div><div class="line">Hash.new(obj)</div><div class="line">Hash.new &#123; |hash, key<span class="params">| block &#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">months = Hash.new( <span class="string">"month"</span> )</div><div class="line">months = &#123;<span class="string">"1"</span> =&gt; <span class="string">"January"</span>, <span class="string">"2"</span> =&gt; <span class="string">"February"</span>&#125;</div><div class="line">keys = months.keys</div><div class="line"></div><div class="line">puts <span class="string">"<span class="subst">#&#123;keys&#125;</span>"</span>  <span class="comment"># ["1", "2"]</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Spring-Hibernate Integration Configuration for DataSource and EntityManager]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/04/spring/hibernate%20integration/Spring-Spring-Hibernate-Integration-Configuration-for-DataSource-and-EntityManager/</url>
      <content type="html"><![CDATA[<h2 id="Interface-PlatformTransactionManager"><a href="#Interface-PlatformTransactionManager" class="headerlink" title="Interface PlatformTransactionManager"></a>Interface PlatformTransactionManager</h2><p><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html</a></p>
<blockquote>
<p>This is the central interface in Spring’s transaction infrastructure. Applications can use this directly, but it is not primarily meant as API: Typically, applications will work with either <code>TransactionTemplate</code> or declarative transaction demarcation through AOP.</p>
<p>For implementors, it is recommended to derive from the provided <code>AbstractPlatformTransactionManager</code> class, which pre-implements the defined propagation behavior and takes care of transaction synchronization handling. Subclasses have to implement template methods for specific states of the underlying transaction, for example: begin, suspend, resume, commit.</p>
<p>The default implementations of this strategy interface are <code>JtaTransactionManager</code> and <code>DataSourceTransactionManager</code>, which can serve as an implementation guide for other transaction strategies.</p>
</blockquote>
<h1 id="AspectJ’s-Role"><a href="#AspectJ’s-Role" class="headerlink" title="AspectJ’s Role"></a>AspectJ’s Role</h1><p>AspectJ’s role seems important in this Spring app context. I haven’t figured out how, but it didn’t work if removing the AspectJ part.</p>
<p>W.r.t. the principle, I’ll do more research. Stay tuned.</p>
<a id="more"></a>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>Here’s an example of a Spring-Hibernate integration.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(mode = AdviceMode.ASPECTJ)  <span class="comment">// AspectJ is IMPORTANT</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringHibernateConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Key-values in config files</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIMARY_HOST = <span class="string">"primary.host"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIMARY_PORT = <span class="string">"primary.port"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECONDARY_HOST = <span class="string">"secondary.host"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECONDARY_PORT = <span class="string">"secondary.port"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_URL_FORMAT = <span class="string">"jdbc:postgresql://%s:%d/workgroup%s"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SSL_ENABLED_SUFFIX = <span class="string">"?ssl=true"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IApplicationConfig app;</div><div class="line"></div><div class="line">    <span class="comment">/* Dynamic routing datasources */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> DataSource <span class="title">routingDataSource</span><span class="params">(String host, <span class="keyword">int</span> port, <span class="keyword">boolean</span> sslEnabled)</span> </span>&#123;</div><div class="line">        BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">        dataSource.setDriverClassName(app.getString(<span class="string">"jdbc.driverClassName"</span>));</div><div class="line">        dataSource.setUsername(app.getString(<span class="string">"jdbc.username"</span>));</div><div class="line">        dataSource.setPassword(app.getString(<span class="string">"jdbc.password"</span>));</div><div class="line">        dataSource.setMaxTotal(app.getInt(<span class="string">"jdbc.wg.connections"</span>));</div><div class="line">        dataSource.setMaxIdle(app.getInt(<span class="string">"jdbc.wg.idle_connections"</span>));</div><div class="line">        dataSource.setValidationQuery(<span class="string">"SELECT 1"</span>);</div><div class="line">        dataSource.setAccessToUnderlyingConnectionAllowed(<span class="keyword">true</span>);</div><div class="line">        dataSource.setMaxWaitMillis(app.getLong(<span class="string">"jdbc.wg.timeout"</span>));</div><div class="line">        dataSource.setTimeBetweenEvictionRunsMillis(app.getLong(<span class="string">"jdbc.wg.eviction_interval"</span>));</div><div class="line">        dataSource.setUrl(String.format(JDBC_URL_FORMAT, hostName, port,sslEnabled ? SSL_ENABLED_SUFFIX : <span class="string">""</span>););</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* Route datasource based on a datasource map */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        RoutingDataSource rds = <span class="keyword">new</span> RoutingDataSource();</div><div class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Get hosts and ports from config file</span></div><div class="line">        <span class="keyword">boolean</span> sslEnabled = app.getBool(workgroup);</div><div class="line"></div><div class="line">        String primaryHost = app.getString(PRIMARY_HOST);</div><div class="line">        <span class="keyword">int</span> primaryPort = app.getInt(PRIMARY_PORT);</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span> hasTwoDatasources = app.getHosts().size == <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(hasTwoDatasources)&#123;</div><div class="line">            String secondaryHost = app.getString(SECONDARY_HOST);</div><div class="line">            <span class="keyword">int</span> secondaryPort = app.getInt(SECONDARY_PORT);</div><div class="line"></div><div class="line">            <span class="comment">// Use host's name as the key for its datasource</span></div><div class="line">            DataSource ds1 = routingDataSource(primaryHost, primaryPort, sslEnabled);</div><div class="line">            DataSource ds2 = routingDataSource(secondaryHost, secondaryPort, sslEnabled);</div><div class="line"></div><div class="line">            map.put(primaryHost, ds1);</div><div class="line">            map.put(secondaryHost, ds2);</div><div class="line"></div><div class="line">            rds.setDefaultTargetDataSource(ds1);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            map.put(host, routingDataSource(primaryHost, primaryPort, sslEnabled));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rds.setTargetDataSources(map);</div><div class="line">        <span class="keyword">return</span> rds;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        AbstractEntityManagerFactoryBean entityManagerFactoryBean = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</div><div class="line">        entityManagerFactoryBean.setDataSource(getDataSource());</div><div class="line">        entityManagerFactoryBean.setPersistenceUnitName(<span class="string">"sample"</span>);</div><div class="line">        entityManagerFactoryBean.setJpaVendorAdapter(<span class="keyword">new</span> HibernateJpaVendorAdapter());</div><div class="line">        entityManagerFactoryBean.setPersistenceProviderClass(org.hibernate.jpa.HibernatePersistenceProvider.class);</div><div class="line">        entityManagerFactoryBean.setPackagesToScan(</div><div class="line">                <span class="string">"org.test.package.name"</span>);</div><div class="line">        entityManagerFactoryBean.setJpaProperties(hibernateProperties());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> entityManagerFactoryBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Util method to return Hibernate properties */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Properties <span class="title">hibernateProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        properties.put(<span class="string">"hibernate.order_updates"</span>, <span class="keyword">true</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.show_sql"</span>, <span class="keyword">false</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.dialect"</span>, PostgreSQL9Dialect.class.getName());</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Transaction manager */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">            JpaTransactionManager transactionManager = <span class="keyword">new</span> JpaTransactionManager();</div><div class="line">            transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());</div><div class="line">            <span class="keyword">return</span> transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java - Exception - Principles to Handle Exception]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/04/java/exception/Java%20-%20Exception%20-%20Principles%20to%20Handle%20Exception/</url>
      <content type="html"><![CDATA[<h2 id="Introduction-to-Exception"><a href="#Introduction-to-Exception" class="headerlink" title="Introduction to Exception"></a>Introduction to Exception</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception</span> <span class="keyword">extends</span> <span class="title">Throwable</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>The class <code>Exception</code> and its subclasses are a form of <code>Throwable</code> that indicates conditions that a reasonable application might want to catch.</p>
<p>The class <code>Exception</code> and any subclasses that are not also subclasses of <code>RuntimeException</code> are <code>checked exceptions</code>. Checked exceptions need to be declared in a method or constructor’s throws clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary.</p>
</blockquote>
<h2 id="Two-Types-of-Exceptions"><a href="#Two-Types-of-Exceptions" class="headerlink" title="Two Types of Exceptions"></a>Two Types of Exceptions</h2><h3 id="1-Checked-Exception"><a href="#1-Checked-Exception" class="headerlink" title="1. Checked Exception"></a>1. Checked Exception</h3><blockquote>
<p>Exceptions that will be detected during compiling</p>
</blockquote>
<p>Usually all types <code>Exceptions</code> except <code>RuntimeException</code> and its subclass</p>
<h3 id="2-Unchecked-Exception-runtime-exception"><a href="#2-Unchecked-Exception-runtime-exception" class="headerlink" title="2. Unchecked Exception - runtime exception"></a>2. Unchecked Exception - runtime exception</h3><blockquote>
<p>Exceptions that won’t be detected during compiling</p>
</blockquote>
<p>Usually <code>RuntimeException</code> and all its subclasses. This kind of exceptions indicate the function cannot run anymore and the computation cannot proceed.</p>
<h2 id="Programmer-Defined-Exception"><a href="#Programmer-Defined-Exception" class="headerlink" title="Programmer-Defined Exception"></a>Programmer-Defined Exception</h2><p>When developers try to define their own exceptions, they have to extend either <code>Exception</code> or <code>RuntimeException</code> or either’s subclasses.</p>
<a id="more"></a>
<h2 id="Key-Words-Throw-and-Throws"><a href="#Key-Words-Throw-and-Throws" class="headerlink" title="Key Words - Throw and Throws"></a>Key Words - Throw and Throws</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> detect <span class="keyword">throws</span> <span class="title">IOException</span> <span class="params">(File file)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!FileUtils.exist(file)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"File does not exist"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Principles-to-Handle-Exceptions"><a href="#Principles-to-Handle-Exceptions" class="headerlink" title="Principles to Handle Exceptions"></a>Principles to Handle Exceptions</h2><p>When to catch an exception and when to throw an exception?</p>
<p>The traditional one you get from textbook is saying something similar to “if the method can handle exceptions internally, developers should try…catch and address the exception. If it can’t, throw that exception to the caller and let the caller deal with it.”</p>
<p>BUT, according to my industry experience, that’s impractical. The industrial production code will always let your callers know what goes wrong. There are mainly two ways to achieve it - either return a meaningful value, or throw an exception.</p>
<p>I’ve been always finding throwing exceptions are helpful. They are better than returning a value, because</p>
<ul>
<li>the exception itself contains very detailed information of what, where, and when it went wrong. A returned value will require extra interpretations to translate the value. So, why bother translating when you already has the source of truth in your hand?</li>
<li>a bottom level method cannot handle an exception in a comprehensively satisfying way. The caller will always have a broader way and much more context that the method about how to handle exceptions. What if the exception handling requires reaching out to a class that the method has no visibility to?</li>
</ul>
<p>So the principle I summarized is</p>
<blockquote>
<p>Always throw exceptions or propagate exception, until the very top level caller or UI</p>
</blockquote>
<ul>
<li>When you are writing a library. You should let the caller handle the exception, and all intermediate code should propagate the exception until it gets to the most top level caller.</li>
<li>When you are writing backend code. You should throw exceptions all the way to the UI/top level code, and let the UI code decide what to do. UI can display a friendly message, or ignore the exception, or ask backend code to try again upon some errors.</li>
</ul>
<h2 id="Catch-Multiple-Exceptions"><a href="#Catch-Multiple-Exceptions" class="headerlink" title="Catch Multiple Exceptions"></a>Catch Multiple Exceptions</h2><p>When a method throws multiple exceptions, it’s recommended to tackle those exceptions one by one specifically.</p>
<p>E.g.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span>(ExceptionA ex1) &#123;</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span>(ExceptionB ex2) &#123;</div><div class="line"></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Syntax-to-Handle-Exceptions"><a href="#Syntax-to-Handle-Exceptions" class="headerlink" title="Syntax to Handle Exceptions"></a>Syntax to Handle Exceptions</h2><p>Format:</p>
<ul>
<li>try…catch…finally  </li>
<li>try…catch…catch (multiple), if there’s no resource that has to be released, finally block is unnecessary</li>
<li>try…finally</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</div><div class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception()</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">// add data, exception occurs...</span></div><div class="line">&#125;<span class="keyword">catch</span>(SQLException e)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLAddException(); <span class="comment">//Exception transition </span></div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    <span class="comment">// close DB connection...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h2><ol>
<li>If a super method throws an exception, let’s say ExceptionA, the child method can only throw ExceptionA or its subclasses</li>
<li>When a super method throws multiple exceptions, the child method can only throw a subset of those exceptions (also counting their subclasses)</li>
</ol>
<p>In short, sub methods can only throw subclasses or a subset of exceptions thrown by their super methods.</p>
<p>If a super method does not throw an exception, the sub methods CANNOT throw any exceptions!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Exception   |--A  </div><div class="line">              |--B  </div><div class="line">            |--C</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> A</span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> A, B</span>&#123;</div><div class="line">        <span class="comment">// Can throws A and B, but not C</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper - Security and ACL (Access Control List)]]></title>
      <url>https://phoenixjiangnan.github.io/2016/07/01/distributed%20system/zookeeper/ZooKeeper-Security-and-ACL-Access-Control-List/</url>
      <content type="html"><![CDATA[<p>ZooKeeper uses ACLs (Access Control List) to control access to its znodes (the data nodes of a ZooKeeper data tree).</p>
<p>The ACL implementation is quite similar to <code>UNIX</code> file access permissions: it employs permission bits to allow/disallow various operations against a node and the scope to which the bits apply.</p>
<p>Unlike standard UNIX permissions, a ZooKeeper node is not limited by the three standard scopes for user (owner of the file), group, and world (other). ZooKeeper does not have a notion of an owner of a znode. Instead, an ACL specifies sets of ids and permissions that are associated with those ids.</p>
<p>ZooKeeper supports pluggable authentication schemes. Ids are specified using the form <code>scheme:id</code>, where scheme is a the authentication scheme that the id corresponds to. For example, <code>hostId:host.corp.com</code> is an id for a host named <code>host.corp.com</code>.</p>
<p>When a client connects to ZooKeeper and authenticates itself, ZooKeeper associates all the ids that correspond to a client with the clients connection. These ids are checked against the ACLs of znodes when a clients tries to access a node. ACLs are made up of pairs of (scheme:expression, perms). The format of the expression is specific to the scheme. For example, the pair (ip:19.22.0.0/16, READ) gives the READ permission to any clients with an IP address that starts with 19.22.</p>
<a id="more"></a>
<h2 id="ACL-Permissions"><a href="#ACL-Permissions" class="headerlink" title="ACL Permissions"></a>ACL Permissions</h2><p>ZooKeeper supports the following permissions:</p>
<ul>
<li><code>CREATE</code> - you can create a child node</li>
<li><code>READ</code> - you can get data from a node and list its children.</li>
<li><code>WRITE</code> - you can set data for a node</li>
<li><code>DELETE</code> - you can delete a child node</li>
<li><code>ADMIN</code> - you can set permissions</li>
</ul>
<p>The <code>CREATE</code> and <code>DELETE</code> permissions have been broken out of the WRITE permission for finer grained access controls. The cases for <code>CREATE</code> and <code>DELETE</code> are the following:</p>
<p>You want A to be able to do a set on a ZooKeeper node, but not be able to <code>CREATE</code> or <code>DELETE</code> children.</p>
<p>CREATE without DELETE: clients create requests by creating ZooKeeper nodes in a parent directory. You want all clients to be able to add, but only request processor can delete. (This is kind of like the APPEND permission for files.)</p>
<p>Also, the ADMIN permission is there since ZooKeeper doesn’t have a notion of file owner. In some sense the ADMIN permission designates the entity as the owner. ZooKeeper doesn’t support the LOOKUP permission (execute permission bit on directories to allow you to LOOKUP even though you can’t list the directory). Everyone implicitly has LOOKUP permission. This allows you to stat a node, but nothing more. (The problem is, if you want to call zoo_exists() on a node that doesn’t exist, there is no permission to check.)</p>
<h2 id="Built-in-ACL-Schemes"><a href="#Built-in-ACL-Schemes" class="headerlink" title="Built-in ACL Schemes"></a>Built-in ACL Schemes</h2><p>ZooKeeeper has the following built in schemes:</p>
<ul>
<li><code>world</code> has a single id, anyone, that represents anyone.</li>
<li><code>auth</code> doesn’t use any id, represents any authenticated user.</li>
<li><code>digest</code> uses a <code>username:password</code> string to generate MD5 hash which is then used as an ACL ID identity. Authentication is done by sending the username:password in clear text. When used in the ACL the expression will be the username:base64 encoded SHA1 password digest.</li>
<li><code>host</code> uses the client host name as an ACL ID identity. The ACL expression is a hostname suffix. For example, the ACL expression host:corp.com matches the ids host:host1.corp.com and host:host2.corp.com, but not host:host1.store.com.</li>
<li><code>ip</code> uses the client host IP as an ACL ID identity. The ACL expression is of the form <code>addr/bits</code> where the most significant bits of addr are matched against the most significant bits of the client host IP.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Here’s an example of creating a curator framework client and setting both no auth and a specified ACL.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()</div><div class="line">											.connectString(zkConnectionString)</div><div class="line">											.sessionTimeoutMs(sessionTimeout)</div><div class="line">											.connectionTimeoutMs(connectionTimeout)</div><div class="line">											.retryPolicy(retryPolicy)</div><div class="line">											.aclProvider(authProvider.getAclProvider());</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoAuthProvider</span> <span class="keyword">implements</span> <span class="title">IZkAuthProvider</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ACLProvider <span class="title">getAclProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ACLProvider() &#123;</div><div class="line">            <span class="comment">/* (non-Javadoc)</span></div><div class="line">             * @see org.apache.curator.framework.api.ACLProvider#getDefaultAcl()</div><div class="line">             */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> List&lt;ACL&gt; <span class="title">getDefaultAcl</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> ZooDefs.Ids.OPEN_ACL_UNSAFE;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* (non-Javadoc)</span></div><div class="line">             * @see org.apache.curator.framework.api.ACLProvider#getAclForPath(java.lang.String)</div><div class="line">             */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> List&lt;ACL&gt; <span class="title">getAclForPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> ZooDefs.Ids.OPEN_ACL_UNSAFE;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigestAuthProvider</span> <span class="keyword">implements</span> <span class="title">ACLProvider</span>, <span class="title">IZkAuthProvider</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String zkUser;</div><div class="line">	<span class="keyword">private</span> String zkPassword;</div><div class="line">	<span class="keyword">private</span> List&lt;ACL&gt; acls;</div><div class="line">	 </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ACL&gt; <span class="title">getDefaultAcl</span><span class="params">()</span> </span>&#123;</div><div class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// note: despite what the docs at http://zookeeper.apache.org/doc/r3.4.6/zookeeperProgrammers.html</span></div><div class="line">        <span class="comment">// say, the ACL expression is</span></div><div class="line">        <span class="comment">//  digest, user:base64(sha1(user:password))</span></div><div class="line">        <span class="comment">// and *NOT*</span></div><div class="line">        <span class="comment">//  digest, user:base64(sha1(password))</span></div><div class="line">        String idPassword = String.format(<span class="string">"%s:%s"</span>, zkUser, zkPassword);</div><div class="line">        <span class="keyword">byte</span>[] authBytes = idPassword.getBytes();</div><div class="line">        </div><div class="line">        <span class="keyword">byte</span>[] digestBytes = md.digest(authBytes);</div><div class="line">        String encodedBytes = Base64.encodeBase64String(digestBytes);</div><div class="line">        </div><div class="line">        String id = String.format(<span class="string">"%s:%s"</span>, zkUser, encodedBytes);</div><div class="line">        ACL acl = <span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(<span class="string">"digest"</span>, id));</div><div class="line">        acls = Collections.singletonList(acl);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SNAKE - System Design Principles to crack a system design in 5 steps]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/28/system%20design/SNAKE-System-Design-Principles-to-crack-a-system-design-in-5-steps/</url>
      <content type="html"><![CDATA[<p>Here are 5 steps to crack any system design questions in general.</p>
<ol>
<li><p>Scenario: case/interface</p>
<ul>
<li>What are the typical use cases?</li>
<li>What kind of abstraction do you provide?</li>
<li>What do the APIs look like?</li>
</ul>
</li>
<li><p>Necessary: constrain/hypothesis</p>
<ul>
<li>How many total users and daily active users do you have?</li>
<li>How many transactions do you have?</li>
<li>How many concurrencies or parallel executions does it require?</li>
<li>How much is the peak load?</li>
<li>How fast does it have to be? Or how much latency can it endure</li>
</ul>
</li>
<li><p>Application: service/algorithm</p>
<ul>
<li>Complexity and Big O analysis</li>
</ul>
</li>
<li><p>Kilobit: data</p>
<ul>
<li>How much is the generated data</li>
<li>How much space does it need to persist</li>
<li>Where to store the data. File system? SQL database? NoSQL database?</li>
</ul>
</li>
<li><p>Evolve:</p>
<ul>
<li>Optimization</li>
<li>Extensibility</li>
<li>Scalability</li>
<li>Availability</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jackson - How to use Jackson to parse basic Json to Java POJO]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/28/web%20development/json/jackson/Jackson-How-to-use-Jackson-to-parse-basic-Json-to-Java-POJO/</url>
      <content type="html"><![CDATA[<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>We are trying to map or parse a json block to a POJO object.</p>
<p>The sample json block is:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"hosts"</span>:[</div><div class="line">                &#123;<span class="attr">"identifier"</span>:<span class="string">"host0"</span>&#125;,</div><div class="line">                &#123;<span class="attr">"identifier"</span>:<span class="string">"host1"</span>&#125;,</div><div class="line">                &#123;<span class="attr">"identifier"</span>:<span class="string">"host2"</span>&#125;</div><div class="line">            ],</div><div class="line">    <span class="attr">"targetId"</span>:<span class="number">0</span>,</div><div class="line">    <span class="attr">"sourceId"</span>:<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>First, we came up with java classes as the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String m_identifier;</div><div class="line"></div><div class="line">    <span class="comment">// No Constructor</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigParams</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Host&gt; m_hosts;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_targetId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_currentId;</div><div class="line"></div><div class="line">    <span class="comment">// No constructor</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>The code that tries to parse json is:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">ConfigParams params = mapper.readValue(getJson(), ConfigParams.class);</div></pre></td></tr></table></figure>
<p>If you run the above code, it successfully parse the json to POJO.</p>
<p>But you definitely want some customized constructors to do some business logic when initializing an object, instead of relying on the default constructor, right?</p>
<p>Therefore, you added some constructors, like below:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigParams</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Host&gt; m_hosts;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_targetId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_currentId;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReconfigParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Your business logic</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReconfigParam</span><span class="params">(Set&lt;Host&gt; host, <span class="keyword">int</span> tid, <span class="keyword">int</span> cid)</span> </span>&#123;</div><div class="line">        <span class="comment">// Your business logic</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>After rerunning the code, you got errors similar to the following in your console.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.fasterxml.jackson.databind.JsonMappingException: No suitable constructor found for type [simple type, class com.xxx..service.hosts.Host]: can not instantiate from JSON object (need to add/enable type information?)</div><div class="line"> at [Source: &#123;&quot;hosts&quot;:[&#123;&quot;identifier&quot;:&quot;host0&quot;&#125;,&#123;&quot;identifier&quot;:&quot;host1&quot;&#125;,&#123;&quot;identifier&quot;:&quot;host2&quot;&#125;],&quot;targetId&quot;:0,&quot;sourceId&quot;:1&#125;; line: 1, column: 12]</div></pre></td></tr></table></figure>
<p>Obviously, adding constructors confused Jackson and it cannot map json anymore.</p>
<h2 id="The-Solution"><a href="#The-Solution" class="headerlink" title="The Solution"></a>The Solution</h2><p>The solution is that developers need to specify which constructor Jackson should use, and what names are the arguments.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReconfigParam</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Host&gt; m_hosts;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_targetId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_currentId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigParams</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor. Also used by json deserializer.</div><div class="line">     */</div><div class="line">    <span class="meta">@JsonCreator</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigParams</span><span class="params">(</span></span></div><div class="line">            @JsonProperty(<span class="string">"hosts"</span>) Set&lt;Host&gt; hosts,</div><div class="line">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"targetId"</span>)</span> <span class="keyword">int</span> targetId,</div><div class="line">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"sourceId"</span>)</span> <span class="keyword">int</span> sourceId) &#123;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String m_identifier;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Host</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="meta">@JsonCreator</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Host</span><span class="params">(@JsonProperty(<span class="string">"identifier"</span>)</span> String identifier) </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The code works again then!</p>
<p>In the future, I will learn and blog more about the mechanism of how Jackson and its annotations work behind the scene.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - Methods in Ruby]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/21/ruby/Ruby-Methods-in-Ruby/</url>
      <content type="html"><![CDATA[<h1 id="Member-Functions-in-Ruby-Class"><a href="#Member-Functions-in-Ruby-Class" class="headerlink" title="Member Functions in Ruby Class"></a>Member Functions in Ruby Class</h1><p>In Ruby, functions are called <code>methods</code>. Each method in a class starts with the keyword def followed by the method name.</p>
<p>The method name always preferred in lowercase letters. You end a method in Ruby by using the keyword <code>end</code>.</p>
<p>Here is the example to define a Ruby method:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">function</span></span></div><div class="line">      statement</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span></div><div class="line">      puts <span class="string">"Hello Ruby!"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Ruby-Methods"><a href="#Ruby-Methods" class="headerlink" title="Ruby Methods"></a>Ruby Methods</h2><p>Methods should be defined before calling them, otherwise Ruby will raise an exception for undefined method invoking.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_name</span> </span></div><div class="line">   expr..</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_name</span> <span class="params">(var1, var2)</span></span></div><div class="line">   expr..</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Default-Arguments"><a href="#Default-Arguments" class="headerlink" title="Default Arguments"></a>Default Arguments</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># var1's default value is value1, if it's missing</span></div><div class="line"><span class="comment"># var2's default value is value2, if it's missing</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_name</span> <span class="params">(var1=value1, var2=value2)</span></span></div><div class="line">   expr..</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(arg1=<span class="string">"Ruby"</span>, arg2=<span class="string">"Perl"</span>)</span></span></div><div class="line">   puts <span class="string">"The programming language is <span class="subst">#&#123;arg1&#125;</span>"</span></div><div class="line">   puts <span class="string">"The programming language is <span class="subst">#&#123;arg2&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">test <span class="string">"C"</span>, <span class="string">"C++"</span></div><div class="line">test</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The programming language is C</div><div class="line">The programming language is C++</div><div class="line">The programming language is Ruby</div><div class="line">The programming language is Perl</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Return-Values-from-Methods"><a href="#Return-Values-from-Methods" class="headerlink" title="Return Values from Methods"></a>Return Values from Methods</h2><p>Every method in Ruby returns a value by default. This returned value will be the value of the last statement.</p>
<p>For example:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span></div><div class="line">   i = <span class="number">100</span></div><div class="line">   j = <span class="number">10</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">test    <span class="comment"># 10</span></div></pre></td></tr></table></figure>
<p>This method, when called, will return the last declared variable j.</p>
<h2 id="Return-Statement"><a href="#Return-Statement" class="headerlink" title="Return Statement"></a>Return Statement</h2><p>The return statement in ruby is used to return one or more values from a Ruby Method.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [expr[<span class="string">`,' expr...]]</span></div></pre></td></tr></table></figure>
<p>If more than two expressions are given, <code>the array containing these values</code> will be the return value. If no expression given, <code>nil</code> will be the return value.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span></div><div class="line">	i = <span class="number">100</span></div><div class="line">	j = <span class="number">200</span></div><div class="line">	k = <span class="number">300</span></div><div class="line">	<span class="keyword">return</span> i, j, k</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">var = test</div><div class="line">puts var</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">100</div><div class="line">200</div><div class="line">300</div></pre></td></tr></table></figure>
<h2 id="Variable-Number-of-Parameters"><a href="#Variable-Number-of-Parameters" class="headerlink" title="Variable Number of Parameters"></a>Variable Number of Parameters</h2><p>Ruby allows you to declare methods that work with a variable number of parameters. Let us examine a sample of this:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span> <span class="params">(*test)</span></span></div><div class="line">   puts <span class="string">"The number of parameters is <span class="subst">#&#123;test.length&#125;</span>"</span></div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...test.length</div><div class="line">      puts <span class="string">"The parameters are <span class="subst">#&#123;test[i]&#125;</span>"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">sample <span class="string">"Zara"</span>, <span class="string">"6"</span>, <span class="string">"F"</span></div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The number of parameters is 3</div><div class="line">The parameters are Zara</div><div class="line">The parameters are 6</div><div class="line">The parameters are F</div></pre></td></tr></table></figure>
<h2 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods"></a>Class Methods</h2><p>When a method is defined outside of the class definition, the method is marked as <code>private</code> by default. On the other hand, the methods defined in the class definition are marked as <code>public</code> by default. The default visibility and the private mark of the methods can be changed by <code>public</code> or <code>private</code> of the Module.</p>
<p>Whenever you want to access a method of a class, you first need to instantiate the class. Then, using the object, you can access any member of the class.</p>
<p>Ruby gives you a way to access a method without instantiating a class. Let us see how a class method is declared and accessed:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accounts</span></span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reading_charge</span></span></div><div class="line">		<span class="comment">#...</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">   </div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Accounts</span>.<span class="title">return_date</span></span></div><div class="line">		<span class="comment">#...</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>See how the method <code>return_date</code> is declared. It is declared with <code>the class name followed by a period</code>, which is <code>followed by the name of the method</code>. You can access this class method directly as follows:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accounts.return_date</div></pre></td></tr></table></figure>
<p>To access this method, you need not create objects of the class Accounts.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - Variables and Constant in Ruby]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/21/ruby/Ruby-Variables-in-Ruby/</url>
      <content type="html"><![CDATA[<h1 id="Ruby-Variables"><a href="#Ruby-Variables" class="headerlink" title="Ruby Variables"></a>Ruby Variables</h1><p>Ruby provides five types of variables:</p>
<ul>
<li><code>Local Variables</code>: variables defined in a method. Local variables are not available outside the method. You will see more details about method in subsequent chapter. Local variables begin with <code>a lowercase letter</code> or <code>_</code>.</li>
<li><code>Instance Variables</code>: variables available across methods for any particular instance or object. That means that instance variables change from object to object. Instance variables are preceded by the at sign <code>@</code> followed by the variable name.</li>
<li><code>Class Variables</code>: variables available across different objects. A class variable belongs to the class and is a characteristic of a class. They are preceded by the sign <code>@@</code> and are followed by the variable name.</li>
<li><code>Global Variables</code>: Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global variables are always preceded by the dollar sign <code>$</code>.</li>
</ul>
<a id="more"></a>
<h2 id="1-Local-Variables"><a href="#1-Local-Variables" class="headerlink" title="1. Local Variables:"></a>1. Local Variables:</h2><p>Local variables begin with a lowercase letter or <code>_</code>. The scope of a local variable ranges from class, module, <code>def</code>, or do to the corresponding end or from a block’s opening brace to its close brace <code>{}</code>.</p>
<p>When an uninitialized local variable is referenced, it is interpreted as a call to a method that has no arguments.</p>
<p>Assignment to uninitialized local variables also serves as variable declaration. The variables start to exist until the end of the current scope is reached. The lifetime of local variables is determined when Ruby parses the program.</p>
<h2 id="2-Instance-Variables"><a href="#2-Instance-Variables" class="headerlink" title="2. Instance Variables"></a>2. Instance Variables</h2><p>Instance variables begin with <code>@</code>. Uninitialized instance variables have the value <code>nil</code></p>
<p>Here is an example showing usage of Instance Variables.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id)</span></span></div><div class="line">        @cust_id=id</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display_details</span><span class="params">()</span></span></div><div class="line">        puts <span class="string">"Customer id #@cust_id"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># Create Objects</span></div><div class="line">cust1=Customer.new(<span class="string">"1"</span>)</div><div class="line">cust2=Customer.new(<span class="string">"2"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Call Methods</span></div><div class="line">cust1.display_details()</div><div class="line">cust2.display_details()</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Customer id 1</div><div class="line">Customer id 2</div></pre></td></tr></table></figure>
<h2 id="3-Class-Variables"><a href="#3-Class-Variables" class="headerlink" title="3. Class Variables"></a>3. Class Variables</h2><p>Class variables begin with <code>@@</code> and must be initialized before they can be used in method definitions.</p>
<p><code>Referencing an uninitialized class variable produces an error</code>. Class variables are shared among descendants of the class or module in which the class variables are defined.</p>
<p>Here is an example showing usage of class variable:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></div><div class="line">   @@no_of_customers=<span class="number">0</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id)</span></span></div><div class="line">      @cust_id=id</div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">display_details</span><span class="params">()</span></span></div><div class="line">      puts <span class="string">"Customer id #@cust_id"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total_no_of_customers</span><span class="params">()</span></span></div><div class="line">       @@no_of_customers += <span class="number">1</span></div><div class="line">       puts <span class="string">"Total number of customers: #@@no_of_customers"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># Create Objects</span></div><div class="line">cust1=Customer.new(<span class="string">"1"</span>)</div><div class="line">cust2=Customer.new(<span class="string">"2"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Call Methods</span></div><div class="line">cust1.total_no_of_customers()</div><div class="line">cust2.total_no_of_customers()</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Total number of customers: 1</div><div class="line">Total number of customers: 2</div></pre></td></tr></table></figure>
<h2 id="4-Global-Variables"><a href="#4-Global-Variables" class="headerlink" title="4. Global Variables"></a>4. Global Variables</h2><p>Global variables begin with <code>$</code>. Uninitialized global variables have the value <code>nil</code></p>
<p>Assignment to global variables alters global status. It is not recommended to use global variables.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$global_variable = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_global</span></span></div><div class="line">     puts <span class="string">"Global variable in Class1 is #$global_variable"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_global</span></span></div><div class="line">     puts <span class="string">"Global variable in Class2 is #$global_variable"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">class1obj = Class1.new</div><div class="line">class1obj.print_global</div><div class="line">class2obj = Class2.new</div><div class="line">class2obj.print_global</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Global variable in Class1 is 10</div><div class="line">Global variable in Class2 is 10</div></pre></td></tr></table></figure>
<h1 id="Ruby-Constants"><a href="#Ruby-Constants" class="headerlink" title="Ruby Constants"></a>Ruby Constants</h1><p>Constants begin with <code>an uppercase letter</code>. </p>
<blockquote>
<p>Constants defined within a class or module can be accessed from within that class or module, and those defined outside a class or module can be accessed globally.</p>
</blockquote>
<p>Constants may not be defined within methods. Referencing an uninitialized constant produces an error. Making an assignment to a constant that is already initialized produces a warning.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></div><div class="line">   VAR1 = <span class="number">100</span></div><div class="line">   VAR2 = <span class="number">200</span></div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></div><div class="line">       puts <span class="string">"Value of first Constant is <span class="subst">#&#123;VAR1&#125;</span>"</span></div><div class="line">       puts <span class="string">"Value of second Constant is <span class="subst">#&#123;VAR2&#125;</span>"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># Create Objects</span></div><div class="line">object=Example.new()</div><div class="line">object.show</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Value of first Constant is 100</div><div class="line">Value of second Constant is 200</div></pre></td></tr></table></figure>
<h1 id="Ruby-Pseudo-Variables"><a href="#Ruby-Pseudo-Variables" class="headerlink" title="Ruby Pseudo-Variables"></a>Ruby Pseudo-Variables</h1><p>They are special variables that have the appearance of local variables but behave like constants. You can not assign any value to these variables.</p>
<ul>
<li><code>self</code>: The receiver object of the current method.</li>
<li><code>true</code>: Value representing true.</li>
<li><code>false</code>: Value representing false.</li>
<li><code>nil</code>: Value representing undefined.</li>
<li><code>__FILE__</code>: The name of the current source file.</li>
<li><code>__LINE__</code>: The current line number in the source file.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby - attr_accessor, attr_reader, and attr_writer]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/20/ruby/Ruby-attr-accessor-attr-reader-and-attr-writer/</url>
      <content type="html"><![CDATA[<p>Recently, I started working on Ruby and JRuby. Good to start posting some tutorials. </p>
<p>You may use the different accessors to communicate your intent to someone reading your code, and make it easier to write classes which will work correctly no matter how their public API is called.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:age</span></div><div class="line">  </div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Here, I can see that I may both read and write the age.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:age</span></div><div class="line">  </div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Here, I can see that I may only read the age. Imagine that it is set by the constructor of this class and after that remains constant. If there were a mutator (writer) for age and the class were written assuming that age, once set, does not change, then a bug could result from code calling that mutator.</p>
<p>But what is happening behind the scenes?</p>
<p>If you write:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="keyword">attr_writer</span> <span class="symbol">:age</span></div><div class="line"></div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>That gets translated into:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age=</span><span class="params">(value)</span></span></div><div class="line">        @age = value</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>If you write:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:age</span></div><div class="line"></div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>That gets translated into:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span></span></div><div class="line">      @age</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>If you write:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:age</span></div><div class="line"></div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>That gets translated into:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age=</span><span class="params">(value)</span></span></div><div class="line">      @age = value</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span></span></div><div class="line">      @age</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Knowing that, here’s another way to think about it: If you did not have the <code>attr_...</code> helpers, and had to write the accessors yourself, would you write any more accessors than your class needed? For example, if age only needed to be read, would you also write a method allowing it to be written?</p>
<hr>
<p>References:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5046831/why-use-rubys-attr-accessor-attr-reader-and-attr-writer" target="_blank" rel="external">http://stackoverflow.com/questions/5046831/why-use-rubys-attr-accessor-attr-reader-and-attr-writer</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[System Design - How to query status of 10,000 machines]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/17/system%20design/task%20queue/System-Design-How-to-query-status-of-10-000-machines/</url>
      <content type="html"><![CDATA[<p>As promised in <a href="http://phoenixjiangnan.github.io/2016/07/01/system%20design/task%20queue/System-Design-Design-Task-Scheduling-System-in-Distributed-System/">http://phoenixjiangnan.github.io/2016/07/01/system%20design/task%20queue/System-Design-Design-Task-Scheduling-System-in-Distributed-System/</a>, I’m writing my experience and thoughts on that problem, which I got interviewed with Palantir 2 years ago.</p>
<p>To refresh your thoughts, the problem we are trying so solve looks like this.</p>
<blockquote>
<p>How to retrieve 10,000 machines’ health status (can be as simple as live or dead, or as complicated as checking a service is functioning or not) and show all status on a web UI.</p>
</blockquote>
<p>This is a pretty practical problem, just imagine how you see your EC2 machines’ status on AWS console.</p>
<p>The general answer is to 1) maintain a queue of 10,000 jobs, each one is to query a machine’s status 2) have a bunch of worker machines run in parallel, retrieving and executing one status querying job at a time.</p>
<p>Following are the steps of getting deeper in this question and ultimately reach a satisfying state.</p>
<h2 id="Step-1-Naive-Approach"><a href="#Step-1-Naive-Approach" class="headerlink" title="Step 1 - Naive Approach"></a>Step 1 - Naive Approach</h2><p>A pitfall when the interviewer presents this question is that, he won’t tell you how many machines you can use to do such an operation. Thus, the first impression an inteviewee got is it can be a dead simple a loop.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;Status&gt; <span class="title">getStatus</span><span class="params">(List&lt;Host&gt; hosts)</span> </span>&#123;</div><div class="line">    List&lt;Status&gt; status = Lists.newArrayList();</div><div class="line">    hosts.forEach(h -&gt; &#123;</div><div class="line">        status.add(h.getStatus());</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> status;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Step-2-this-is-not-an-algorithm-question-THIS-IS-A-SYSTEM-DESIGN-QUESTION"><a href="#Step-2-this-is-not-an-algorithm-question-THIS-IS-A-SYSTEM-DESIGN-QUESTION" class="headerlink" title="Step 2 - this is not an algorithm question, THIS IS A SYSTEM DESIGN QUESTION!"></a>Step 2 - this is not an algorithm question, THIS IS A SYSTEM DESIGN QUESTION!</h2><p>The inteviewer will attack you by asking the complexity of the above solution - it’s <code>O(N)</code>. You’ll doubt if there’s any better way. It seems not, because you have to visit each machine and O(N) is the best one you can think of. Can it be <code>O(logN)</code>??!!</p>
<p>But wait, the only feasible answer is that… this is not an algorithm question, THIS IS A SYSTEM DESIGN QUESTION!</p>
<p>Then it makes sense, since you can make it faster by enabling <code>Parallel Computing</code>!</p>
<p>The naive parallel solution that comes right to your mind is, having multiple worker machines, say 100, each one querying 100 host machines (100 * 100 = 10,000) and forward the query results to UI.</p>
<h2 id="Step-3-Naive-Parallelization"><a href="#Step-3-Naive-Parallelization" class="headerlink" title="Step 3 - Naive Parallelization"></a>Step 3 - Naive Parallelization</h2><p>But what if there are huge delays when querying a single machine? It’s not uncommon due to:</p>
<ul>
<li>huge network latency</li>
<li>request timeout</li>
<li>several host machines are actually dead!</li>
</ul>
<p>One of the worst case is that, 9000 host machines are healthy and the other 100 are dead, and it happens to be that one of the workers is responsible for querying the 1000 dead machines. Your UI would take forever to show the results!</p>
<h2 id="Step-4-Determine-a-timeout"><a href="#Step-4-Determine-a-timeout" class="headerlink" title="Step 4 - Determine a timeout"></a>Step 4 - Determine a timeout</h2><p>We should have a timeout for each status query!</p>
<ul>
<li>Him: Well, how long is the timeout?</li>
<li>You: If we have a collected history of how long each request takes, we can make the timeout such that, we can not only ensure most healthy calls are not missed, but also fail on dead machines fast enough</li>
<li>Him: How can you do that? Let’s say we have a distribution graph for you, can you elaborate more?</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">|</div><div class="line">|</div><div class="line">|        /-----------\</div><div class="line">|      /               \</div><div class="line">|    /                   \</div><div class="line">|  /                       \</div><div class="line">|/___________________________\____</div></pre></td></tr></table></figure>
<ul>
<li>You: We can find out the 95 percentile of all successful requests, and make that the length of timeout</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">|</div><div class="line">|</div><div class="line">|        /-----------\</div><div class="line">|      /               \  |</div><div class="line">|    /                   \|</div><div class="line">|  /                      |\</div><div class="line">|/________________________|__\____</div><div class="line">                         95%</div></pre></td></tr></table></figure>
<h2 id="Step-5-Cold-Start-and-Load-Balancing-Worker-and-Task-Queue-Paramdigm"><a href="#Step-5-Cold-Start-and-Load-Balancing-Worker-and-Task-Queue-Paramdigm" class="headerlink" title="Step 5 - Cold Start and Load Balancing? -Worker and Task Queue Paramdigm"></a>Step 5 - Cold Start and Load Balancing? -Worker and Task Queue Paramdigm</h2><p>There are two main problems with this above solution:</p>
<ul>
<li>1) what about <code>cold start</code>? What if there’s no historical data? When you are building this from scratch, not optimizing it, then no data is ready for you to reference.</li>
<li>2) what about <code>load balancing</code>? What if some workers finished all their jobs very fast, and don’t have things to do, but some workers still have a ton of work remaining? This can happen easily when a worker gets assigned 100 healthy host machines, and another worker happens to get assigned 100 dead machines</li>
</ul>
<p>The only feasible way to go further now seems require changing the naive parallel computing paradigm.</p>
<p>And the promising one is the <code>Worker and Task Queue Paradigm</code>, looks like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">                   task queue</div><div class="line">                   --------------------------</div><div class="line">                   | taskN - query machineN|</div><div class="line">                   | ---------------------- |</div><div class="line">                   |   ..................   |</div><div class="line">                   | ---------------------- |</div><div class="line">                   | task1 - query machine1 |</div><div class="line">                   | ---------------------- |</div><div class="line">                   | task0 - query machine0 |</div><div class="line">                   --------------------------</div><div class="line">                /      |       \</div><div class="line">              /        |         \</div><div class="line">            /          |           \</div><div class="line">-----------     -----------          -----------     </div><div class="line">| worker0 |     | worker1 |    ...   | workerM |</div><div class="line">-----------     -----------          -----------</div></pre></td></tr></table></figure>
<p>Each worker pulls an uncompleted task from the task queue, and execute it. When finishing it, the worker pulls a new one.</p>
<p>This parallel paradigm greatly reduces the chance of a worker got assigned all dead machines, and therefore greatly reduces the overall expected time for the whole job to finish.</p>
<p>Let’s compare this with the former approach in Step 3 in the case of consecutive dead machines. We are counting how much time it cost to finish the whole job in both ways, based on the following assumption:</p>
<ul>
<li>Say the first 100 machines are dead, and the other 9900 are good.</li>
<li>The time to process a health machine (time to send requests + double way network communication time + time to process response) is 1s, and that for a dead machine is 5s (because of the standard timeout). </li>
<li>Ignore the time to actually retrieve a task from task queue</li>
</ul>
<p>In first approach, the worst scenario is that one worker gets all the 100 dead machines. That worker will take <code>100 * 5</code> sec to finish, and all the other 99 workers will take <code>100 * 1</code> to finish. So the total time to finish the job is <code>max(100 * 5, 100 * 1) = 500</code> sec.</p>
<p>In the second approach: all 100 workers will pulls each of query job for a dead machine (100 in total), so it takes 5 sec to finish all the dead machine querying jobs in parallel. Then it takes <code>9900 / 100 = 99</code> sec to finish all the remaing jobs for healthy machines. The overall time is <code>5 + 99 = 104</code> sec, which is far less than 500 sec.</p>
<h2 id="Step-6-Priority-Queue"><a href="#Step-6-Priority-Queue" class="headerlink" title="Step 6 - Priority Queue"></a>Step 6 - Priority Queue</h2><p>This is a kind of bonus answer to this specific problem, but is quite common and important to a general task queue. The incentive is about having tasks of different priorities.</p>
<p>You can set the priority by considering weight of different elements.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Finally, we came up with a quite sound solution for this question.</p>
<ul>
<li>Have a worker and task queue paradigm</li>
<li>Maintain the queue as a priority queue</li>
</ul>
<p>Remember this paradigm in the future when you run into similar problems!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Reflection and the Class Objects]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/16/java/reflection/Java-Reflection-and-the-Class-Objects/</url>
      <content type="html"><![CDATA[<h1 id="What-is-Reflection"><a href="#What-is-Reflection" class="headerlink" title="What is Reflection"></a>What is Reflection</h1><p>Java Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection.</p>
<h1 id="Uses-of-Reflection"><a href="#Uses-of-Reflection" class="headerlink" title="Uses of Reflection"></a>Uses of Reflection</h1><p>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</p>
<p>Using Java Reflection you can inspect Java classes <code>at runtime</code>. Inspecting classes is often the first thing you do when using Reflection. From the classes you can obtain information about</p>
<ul>
<li>Class Name</li>
<li>Class Modifies (public, private, synchronized etc.)</li>
<li>Package Info</li>
<li>Superclass</li>
<li>Implemented Interfaces</li>
<li>Constructors</li>
<li>Methods</li>
<li>Fields</li>
<li>Annotations</li>
</ul>
<a id="more"></a>
<h2 id="1-Extensibility-Features"><a href="#1-Extensibility-Features" class="headerlink" title="1. Extensibility Features"></a>1. Extensibility Features</h2><p>An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</p>
<h2 id="2-Class-Browsers-and-Visual-Development-Environments"><a href="#2-Class-Browsers-and-Visual-Development-Environments" class="headerlink" title="2. Class Browsers and Visual Development Environments"></a>2. Class Browsers and Visual Development Environments</h2><p>A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.</p>
<h2 id="3-Debuggers-and-Test-Tools"><a href="#3-Debuggers-and-Test-Tools" class="headerlink" title="3. Debuggers and Test Tools"></a>3. Debuggers and Test Tools</h2><p>Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.</p>
<h1 id="Drawbacks-of-Reflection"><a href="#Drawbacks-of-Reflection" class="headerlink" title="Drawbacks of Reflection"></a>Drawbacks of Reflection</h1><p>Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</p>
<h2 id="1-Performance-Overhead"><a href="#1-Performance-Overhead" class="headerlink" title="1. Performance Overhead"></a>1. Performance Overhead</h2><p>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, <code>reflective operations have slower performance than their non-reflective counterparts</code>, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</p>
<h2 id="2-Security-Restrictions"><a href="#2-Security-Restrictions" class="headerlink" title="2. Security Restrictions"></a>2. Security Restrictions</h2><p>Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.</p>
<h2 id="3-Exposure-of-Internals"><a href="#3-Exposure-of-Internals" class="headerlink" title="3. Exposure of Internals"></a>3. Exposure of Internals</h2><p>Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</p>
<h1 id="java-lang-Class-Objects"><a href="#java-lang-Class-Objects" class="headerlink" title="java.lang.Class Objects"></a>java.lang.Class Objects</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Official declaration</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line"><span class="keyword">extends</span> <span class="title">Object</span></div><div class="line"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">GenericDeclaration</span>, <span class="title">Type</span>, <span class="title">AnnotatedElement</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Instances of the class <code>Class</code> represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a <code>Class</code> object that is shared by all arrays with the same element type and number of dimensions. The <code>primitive Java types (boolean, byte, char, short, int, long, float, and double)</code>, and the keyword <code>void</code> are also represented as <code>Class</code> objects.</p>
<p><code>Class</code> has no public constructor. Instead <code>Class</code> objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the <code>defineClass</code> method in the class loader.</p>
<p>The following example uses a <code>Class</code> object to print the class name of an object:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"The class of "</span> + obj +</div><div class="line">                <span class="string">" is "</span> + obj.getClass().getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>It is also possible to get the <code>Class</code> object for a named type (or for void) using a class literal.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"The name of class Foo is: "</span> + Foo.class.getName());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructor&lt;?&gt;[]	getConstructors()</div><div class="line">Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object.</div></pre></td></tr></table></figure>
<p>该类就可以获取字节码文件中的所有内容，反射就是依靠该类完成的；想要对一个类文件进行解剖，只要获取到该类的字节码文件对象即可</p>
<h2 id="How-to-get-Class-objects"><a href="#How-to-get-Class-objects" class="headerlink" title="How to get Class objects"></a>How to get Class objects</h2><h3 id="1-through-getClass"><a href="#1-through-getClass" class="headerlink" title="1. through getClass()"></a>1. through getClass()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getClassObject_1</span><span class="params">()</span></span>&#123;</div><div class="line">	Person p1 = <span class="keyword">new</span> Person();</div><div class="line">	Class c1 = p1.getClass();</div><div class="line">	</div><div class="line">	Person p2 = <span class="keyword">new</span> Person();</div><div class="line">	Class c2 = p2.getClass();</div><div class="line">	</div><div class="line">	System.out.println(c1==c2); <span class="comment">// true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-through-class-static-field"><a href="#2-through-class-static-field" class="headerlink" title="2. through .class static field"></a>2. through .class static field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getClassObject_2</span><span class="params">()</span></span>&#123;</div><div class="line">	Class c1 = Person.class;</div><div class="line">	Class c2 = Person.class;</div><div class="line">	</div><div class="line">	System.out.println(c1==c2); <span class="comment">// true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-through-Class-forName-static-methods"><a href="#3-through-Class-forName-static-methods" class="headerlink" title="3. through Class.forName() static methods"></a>3. through Class.forName() static methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getClassObject_3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">	String className = <span class="string">"Person"</span>;</div><div class="line">	Class clazz = Class.forName(className);</div><div class="line">	</div><div class="line">	System.out.println(clazz); <span class="comment">// Person</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>Class.forName()</code> method may throw a <code>ClassNotFoundException</code> if the class cannot be found on the classpath at runtime.</p>
<h1 id="What-can-you-get-from-Class-objects"><a href="#What-can-you-get-from-Class-objects" class="headerlink" title="What can you get from Class objects"></a>What can you get from <code>Class</code> objects</h1><p>There are two types of methods in <code>Class</code> objects. </p>
<ul>
<li><code>getXxx()</code></li>
<li><code>getDeclaredXxx()</code></li>
</ul>
<p>The difference between them is <code>getXxx()</code> will only return <code>public</code> attributes, while <code>getDeclaredXxx()</code> will return all attributes.</p>
<p>Taking constructors for example. <code>Person.getConstructors()</code> will return <code>all public</code> constructors of Person, while <code>Person.getDeclaredConstructors()</code> will return <code>all</code> constructors with all kinds of visibilities (public, protected, package private, and private)</p>
<p>For simplicity, I will only talk about <code>getXxx()</code> in the following content. You can try to figure out the <code>getDeclaredXxx()</code> by yourself (Easy!).</p>
<h2 id="1-Constructors"><a href="#1-Constructors" class="headerlink" title="1. Constructors"></a>1. Constructors</h2><ul>
<li>Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Constructor&lt;?&gt;[] getConstructors()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSpecificConstructor</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"Person"</span>);</div><div class="line">	</div><div class="line">	Constructor con = c.getConstructor(String.class, <span class="keyword">int</span>.class);</div><div class="line">	<span class="comment">// Constructor con = c.getConstructor(new Class[]&#123;String.class,int.class&#125;); </span></div><div class="line"></div><div class="line">	Object obj = con.newInstance(<span class="string">"John"</span>, <span class="number">22</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listConstructors</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = obj.getClass();</div><div class="line">	Constructor[] cons = c.getConstructors();</div><div class="line">	<span class="keyword">for</span>(Constructor con:cons)</div><div class="line">		System.out.println(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Fields"><a href="#2-Fields" class="headerlink" title="2. Fields"></a>2. Fields</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSpecificField</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"Person"</span>);</div><div class="line"></div><div class="line">	Field field = c.getField(<span class="string">"age"</span>); </div><div class="line">	field = c.getDeclaredField(<span class="string">"age"</span>);</div><div class="line">	</div><div class="line">	System.out.println(field); <span class="comment">// Output：private int Person.age</span></div><div class="line"></div><div class="line">	field.setAccessible(<span class="keyword">true</span>); <span class="comment">// 对私有字段的访问取消权限检查</span></div><div class="line">	</div><div class="line">	Object obj = c.newInstance();</div><div class="line">	Object f = field.get(obj);</div><div class="line">	System.out.println(f);  </div><div class="line">		</div><div class="line">	<span class="comment">/* </span></div><div class="line">     * Output:</div><div class="line">     * Person run   </div><div class="line">     * 0</div><div class="line">	*/</div><div class="line"></div><div class="line">	field.set(obj,<span class="number">88</span>);</div><div class="line">	Object f = field.get(obj);</div><div class="line">	System.out.println(f);</div><div class="line">	</div><div class="line">	<span class="comment">/* </span></div><div class="line">     * Output:</div><div class="line">     * private int Person.age   </div><div class="line">     * Person run</div><div class="line">     * 88</div><div class="line">	*/</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFields</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = obj.getClass();</div><div class="line"></div><div class="line">	Field[] fields = c.getDeclaredFields();</div><div class="line">	<span class="keyword">for</span>(Field f:fields)</div><div class="line">		System.out.println(f);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Person run"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Methods"><a href="#3-Methods" class="headerlink" title="3. Methods"></a>3. Methods</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSpecificMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"Person"</span>);</div><div class="line">	Method method = c.getMethod(<span class="string">"show"</span>,<span class="keyword">null</span>); <span class="comment">// Get the method with no args</span></div><div class="line">	</div><div class="line">	Object obj = c.newInstance(); </div><div class="line">	method.invoke(obj,<span class="keyword">null</span>);  <span class="comment">// Invoke the method on that object</span></div><div class="line">	<span class="comment">/*      </span></div><div class="line">		Output:     </div><div class="line">		Person run</div><div class="line">		null...show run...0</div><div class="line">	*/</div><div class="line">	</div><div class="line">	Constructor cons = c.getConstructor(String.class, <span class="keyword">int</span>.class);</div><div class="line">	Object obj = cons.newInstance(<span class="string">"John"</span>,<span class="number">45</span>);</div><div class="line">	method.invoke(obj,<span class="keyword">null</span>);  <span class="comment">// Invoke the method on that object</span></div><div class="line">	<span class="comment">/* Output: </span></div><div class="line">		Person run</div><div class="line">		John : 45</div><div class="line">		John...show </div><div class="line">		run...45</div><div class="line">	*/</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSpecificMethodDemo_2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"Person"</span>);</div><div class="line">	Method method = c.getMethod(<span class="string">"paraMethod"</span>,String.class, <span class="keyword">int</span>.class); <span class="comment">// Get the method with two args, String and int</span></div><div class="line">	Object obj = c.newInstance();</div><div class="line">	method.invoke(obj,<span class="string">"XXX"</span>,<span class="number">33</span>);</div><div class="line">	</div><div class="line">	<span class="comment">/* Output: </span></div><div class="line">		Person 1 run</div><div class="line">		paraMethod run...</div><div class="line">		XXX : 33</div><div class="line">	*/</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="comment">// Get all the public methods</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listMethods</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"Person"</span>);</div><div class="line">	Method[] method1 = c.getMethods();</div><div class="line">	<span class="keyword">for</span>(Method m:method1)</div><div class="line">		System.out.println(m);</div><div class="line">		</div><div class="line">	</div><div class="line">	<span class="comment">// 获取本类中的所有方法，包括私有的</span></div><div class="line">	Method[] method2 = c.getDeclaredMethods();</div><div class="line">	<span class="keyword">for</span>(Method m:method2)</div><div class="line">		System.out.println(m);</div><div class="line">	<span class="comment">/* </span></div><div class="line">	 Output:</div><div class="line"> 	 public void Person.paraMethod(java.lang.String,int)</div><div class="line">	 public static void Person.staticMethod()</div><div class="line">	 public void Person.show()</div><div class="line">     ……   </div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Superclass"><a href="#4-Superclass" class="headerlink" title="4. Superclass"></a>4. Superclass</h2><p>List all constructors, fields, and methods of sepecific class and its superclass</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listSuperclassFields</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = obj.getClass();</div><div class="line">	Class superClazz = c.getSuperclass();</div><div class="line">	Field[] fields = superClazz.getDeclaredFields();</div><div class="line">	<span class="keyword">for</span>(Field f:fields)</div><div class="line">		System.out.println(f);</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* private static final long java.lang.Number.serialVersionUID</div><div class="line">	*/</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listSuperclassConstructors</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = obj.getClass();</div><div class="line">	Class superClazz = c.getSuperclass();</div><div class="line">	Constructor[] cons = superClazz.getConstructors();</div><div class="line">	<span class="keyword">for</span>(Constructor con:cons)</div><div class="line">		System.out.println(con);</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* public java.lang.Number()</div><div class="line">	*/</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listSuperclassMethods</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = obj.getClass();</div><div class="line">	Class superClazz = c.getSuperclass();</div><div class="line">	Method[] methods = superClazz.getDeclaredMethods();</div><div class="line">	<span class="keyword">for</span>(Method method:methods)</div><div class="line">		System.out.println(method);</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	public byte java.lang.Number.byteValue()</div><div class="line">	public short java.lang.Number.shortValue()</div><div class="line">	public abstract int java.lang.Number.intValue()</div><div class="line">	...</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Implemented-Interfaces"><a href="#5-Implemented-Interfaces" class="headerlink" title="5. Implemented Interfaces"></a>5. Implemented Interfaces</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class  aClass = ... <span class="comment">//obtain Class object. See prev. section</span></div><div class="line">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure>
<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayGrow</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Class c1 = <span class="keyword">int</span>.class;</div><div class="line">		System.out.println(c1.isArray());  <span class="comment">// false</span></div><div class="line">		System.out.println(c1.getComponentType()); <span class="comment">// null</span></div><div class="line"></div><div class="line">		<span class="keyword">int</span>[][] j2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</div><div class="line">		Class c2 = j2.getClass();</div><div class="line">		System.out.println(c2.isArray());  <span class="comment">// true</span></div><div class="line">		System.out.println(c2.getComponentType().getComponentType()); <span class="comment">// int</span></div><div class="line"></div><div class="line">		<span class="keyword">int</span>[][][] j3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>];</div><div class="line">		Class c3 = j3.getClass();</div><div class="line">		System.out.println(c3.isArray());  <span class="comment">// true</span></div><div class="line">		System.out.println(c3.getComponentType().getComponentType().getComponentType()); <span class="comment">// int</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">arrayGrow</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		Class clazz = obj.getClass();</div><div class="line">		<span class="comment">// Is a an array object?</span></div><div class="line">		<span class="keyword">if</span>(!clazz.isArray())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			</div><div class="line">		<span class="comment">// An array of what?</span></div><div class="line">		Class arrayType = clazz.getComponentType();</div><div class="line">		<span class="keyword">int</span> length = Array.getLength(obj);</div><div class="line">		<span class="keyword">int</span> newLength = length * <span class="number">11</span>/<span class="number">10</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line">		Object newArray = Array.newInstance(arrayType, newLength);</div><div class="line">		System.arraycopy(obj, <span class="number">0</span>, newArray, <span class="number">0</span>, length);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> newArray;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodPointerTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	    <span class="comment">// get method pointers to the square and sqrt methods</span></div><div class="line">	    Method square = MethodPointerTest.class.getMethod(<span class="string">"square"</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">double</span>.class&#125;);</div><div class="line">	    Method sqrt = java.lang.Math.class.getMethod(<span class="string">"sqrt"</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">double</span>.class&#125;);</div><div class="line">	    </div><div class="line">	    <span class="comment">/*</span></div><div class="line">	    Class clazz1 = MethodPointerTest.class;</div><div class="line">	    Method square = clazz1.getMethod("square", new Class[]&#123;double.class&#125;);</div><div class="line">	    Class clazz2 = java.lang.Math.class;</div><div class="line">	    Method sqrt = clazz2.getMethod("sqrt", new Class[]&#123;double.class&#125;);</div><div class="line">	    */</div><div class="line"></div><div class="line">	    <span class="comment">// print tables of x- and y-values</span></div><div class="line">	    printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, square);</div><div class="line">	    printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, sqrt);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">	    <span class="keyword">return</span> x*x;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">(<span class="keyword">double</span> from, <span class="keyword">double</span> to, <span class="keyword">int</span> n, Method f)</span></span>&#123;</div><div class="line">	    System.out.println(f);</div><div class="line"></div><div class="line">	    <span class="comment">// construct formatter to print with 4 digit precision</span></div><div class="line">	    NumberFormat formatter = NumberFormat.getInstance();</div><div class="line">	    formatter.setMinimumFractionDigits(<span class="number">4</span>);</div><div class="line">	    formatter.setMaximumFractionDigits(<span class="number">4</span>);</div><div class="line">	    <span class="keyword">double</span> dx = (to - from) / (n-<span class="number">1</span>);</div><div class="line"></div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">double</span> x = from; x &lt;= to; x += dx) &#123;</div><div class="line">	        <span class="comment">// print x-value</span></div><div class="line">	        String output = formatter.format(x);</div><div class="line">	        <span class="comment">// pad with spaces to field width of 10</span></div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span> - output.length(); i &gt; <span class="number">0</span>; i--)</div><div class="line">	            System.out.print(<span class="string">" "</span>);</div><div class="line">	        System.out.print(output + <span class="string">" |"</span>);</div><div class="line"></div><div class="line">	        <span class="keyword">try</span>&#123;</div><div class="line">		        <span class="comment">// invoke method and print y-value</span></div><div class="line">		        <span class="comment">//Object[] args = &#123;new Double(x)&#125;;</span></div><div class="line">		        <span class="comment">//Double d = (Double)f.invoke(null, args); // because square method is static method, we don’t need to call object to invoke the method</span></div><div class="line">		       </div><div class="line">		        Double d = (Double)f.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Double(x)); </div><div class="line">		        <span class="keyword">double</span> y = d.doubleValue();</div><div class="line">		        output = formatter.format(y);</div><div class="line">		        <span class="comment">// pad with spaces to field with of 10</span></div><div class="line">		        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span> - output.length(); i &gt; <span class="number">0</span>; i--)</div><div class="line">		            System.out.print(<span class="string">" "</span>);</div><div class="line"></div><div class="line">		        System.out.println(output);</div><div class="line">	        &#125;<span class="keyword">catch</span> (Exception e)&#123; </div><div class="line">	        	  e.printStackTrace(); </div><div class="line">	        &#125;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		Mainboard mb = <span class="keyword">new</span> Mainboard();</div><div class="line">		mb.run();</div><div class="line"> </div><div class="line">		<span class="comment">//每次添加一个设备都要修改代码创建一个新创建的对象</span></div><div class="line">		<span class="comment">//mb.usePCI(new SoundCard());</span></div><div class="line">	 </div><div class="line">		<span class="comment">/*</span></div><div class="line">		 previously, it finds `Class` objects when calling `new Xxx()`. Now we are 'newing' objects with `Class`</div><div class="line">		 Can we make it?</div><div class="line">		*/</div><div class="line">	 	<span class="comment">// Read config file</span></div><div class="line">		File conf = <span class="keyword">new</span> File(<span class="string">"pci.properties"</span>);</div><div class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(conf);</div><div class="line"></div><div class="line">		Properties prop = <span class="keyword">new</span> Properties();</div><div class="line">		prop.load(fis);</div><div class="line">		 </div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prop.size(); i++)&#123;</div><div class="line">			String pciName = prop.getProperty(<span class="string">"pci"</span>+(i+<span class="number">1</span>));</div><div class="line">			<span class="comment">// Use Class objects to load the subclass of pci</span></div><div class="line">			Class c = Class.forName(pciName);</div><div class="line">			PCI p = (PCI)c.newInstance();</div><div class="line">			mb.usePCI(p);</div><div class="line">		&#125;</div><div class="line">	 </div><div class="line">		fis.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">	 </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PCI</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line">	 </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mainboard</span></span>&#123; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"My Mainboard run ...."</span>);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="comment">/*  </span></div><div class="line">	public void useSound(SoundCard c)&#123;</div><div class="line">		c.open();        </div><div class="line">		c.close();        </div><div class="line">	&#125;</div><div class="line">	*/</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">usePCI</span><span class="params">(PCI p)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(p!=<span class="keyword">null</span>)&#123;</div><div class="line">			p.open();</div><div class="line">			p.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundCard</span> <span class="keyword">implements</span> <span class="title">PCI</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"sound open"</span>);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"sound close"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetCard</span> <span class="keyword">implements</span> <span class="title">PCI</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"net open"</span>);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"net close"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//pci.properties</span></div><div class="line">pci1=SoundCard</div><div class="line">pci2=NetCard</div></pre></td></tr></table></figure>
<p>References:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/reflect/" target="_blank" rel="external">https://docs.oracle.com/javase/tutorial/reflect/</a></li>
<li><a href="http://tutorials.jenkov.com/java-reflection/index.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-reflection/index.html</a></li>
<li><a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-reflection/classes.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Web Development - TCP Transportation]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/11/web%20development/Web-Development-TCP-Transportation/</url>
      <content type="html"><![CDATA[<p>This is a blog about TCP and how to implement TCP. The content is from some of my academic courses, and my personal project.</p>
<p>I want to post it here for quick reference in the future - Obviously not a whole lot developers use TCP on a daily basis.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The <code>Transmission Control Protocol (TCP)</code> is a core protocol of the Internet protocol suite.</p>
<p>It originated in the initial network implementation in which it complemented the <code>Internet Protocol (IP)</code>. Therefore, the entire suite is commonly referred to as <code>TCP/IP</code>. </p>
<p>TCP provides <code>reliable</code>, <code>ordered</code>, and <code>error-checked</code> delivery of a stream of octets between applications running on hosts communicating over an IP network.</p>
<p>Major Internet applications such as the World Wide Web, email, remote administration and file transfer rely on TCP. Applications that do not require reliable data stream service may use the <code>User Datagram Protocol (UDP)</code>, which provides a connectionless datagram service that emphasizes reduced latency over reliability.</p>
<h2 id="Socket-and-ServerSocket"><a href="#Socket-and-ServerSocket" class="headerlink" title="Socket and ServerSocket"></a>Socket and ServerSocket</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html" target="_blank" rel="external">Socket</a> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Socket</span></span></div><div class="line"><span class="keyword">extends</span> <span class="title">Object</span></div><div class="line"><span class="keyword">implements</span> <span class="title">Closeable</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This class implements <code>client sockets</code> (also called just <code>sockets</code>).</p>
<p>A socket is an endpoint for communication between two machines.</p>
<p>The actual work of the socket is performed by an instance of the <code>SocketImpl</code> class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall.</p>
</blockquote>
<hr>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html" target="_blank" rel="external">ServerSocket</a> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocket</span></span></div><div class="line"><span class="keyword">extends</span> <span class="title">Object</span></div><div class="line"><span class="keyword">implements</span> <span class="title">Closeable</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This class implements <code>server sockets</code>. </p>
<p>A server socket waits for requests to come in over the network. It performs some operation based on that request, and then possibly returns a result to the requester.</p>
<p>The actual work of the server socket is performed by an instance of the <code>SocketImpl</code> class. An application can change the socket factory that creates the socket implementation to configure itself to create sockets appropriate to the local firewall.</p>
</blockquote>
<h2 id="Communication-between-Client-and-Server"><a href="#Communication-between-Client-and-Server" class="headerlink" title="Communication between Client and Server"></a>Communication between Client and Server</h2><h3 id="Process-in-Client-Side"><a href="#Process-in-Client-Side" class="headerlink" title="Process in Client Side"></a>Process in Client Side</h3><ol>
<li>Create TCP client sockets with <code>Socket</code> object. Specify the destination of targeted server when initializing clients</li>
<li><p>If clients are created successfully, it means the data transportation channel is established. The channel is socket stream, which is constructed underlayer. Since it’s a stream, it indicates that there are both input stream and output stream.</p>
<p> You can get those two streams from <code>Socket</code> objects by calling <code>getOutputStream()</code> and <code>getInputStream()</code>.</p>
</li>
<li>Use the stream to transport data</li>
<li>Close resources</li>
</ol>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span></span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Client sends data to Server</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create client socket</span></div><div class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>, <span class="number">10002</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 2. Get the output stream from socket</span></div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Use output stream to write data to Server </span></div><div class="line">        out.write(<span class="string">"TCP demo!"</span>.getBytes());</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Close resources</span></div><div class="line">        socket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Process-in-Server-Side"><a href="#Process-in-Server-Side" class="headerlink" title="Process in Server Side"></a>Process in Server Side</h3><ol>
<li>Create server side socket service by creating <code>ServerSocket</code> object</li>
<li><code>ServerSocket</code> must provide a <code>port</code> for client to connect to</li>
<li>Get the socket object that tries to connect</li>
<li>Read data from client via the socket object’s stream</li>
<li>Close resources</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">        Get the data from client, and print on console</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create server side socket service by creating `ServerSocket` object</span></div><div class="line">        <span class="comment">// 2. `ServerSocket` must provide a `port` for client to connect to</span></div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10002</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Get the socket object that tries to connect</span></div><div class="line">        Socket s = ss.accept();</div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Read data from client via the socket object's stream</span></div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        </div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(ip + <span class="string">" Server: "</span> + text);</div><div class="line">        </div><div class="line">        <span class="number">5</span>. Close resources</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Interaction-between-Client-and-Server-Sending-Data-back-and-forth"><a href="#Interaction-between-Client-and-Server-Sending-Data-back-and-forth" class="headerlink" title="Interaction between Client and Server - Sending Data back and forth"></a>Interaction between Client and Server - Sending Data back and forth</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server Side</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10002</span>);</div><div class="line">        Socket socket = serverSocket.accept(); <span class="comment">// This is a blocking method</span></div><div class="line">         </div><div class="line">        String ip = socket.getInetAddress().getHostAddress();</div><div class="line">        InputStream in = socket.getInputStream();</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        </div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(ip + <span class="string">"  "</span> + text);</div><div class="line">         </div><div class="line">        <span class="comment">// Write through ServerSocket's OutputStream to client socket's InputStream </span></div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">        out.write(<span class="string">"Received"</span>.getBytes());</div><div class="line">         </div><div class="line">        socket.close();</div><div class="line">        serverSocket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client Side</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo2</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>, <span class="number">10002</span>);</div><div class="line">         </div><div class="line">        OutputStream out = socket.getOutputStream();</div><div class="line">        out.write(<span class="string">"TCP demo!"</span>.getBytes());</div><div class="line">         </div><div class="line">        <span class="comment">// Use socket's InputStream to read data sent from server</span></div><div class="line">        InputStream in = socket.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">         </div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        socket.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Text-Conversion"><a href="#Text-Conversion" class="headerlink" title="Text Conversion"></a>Text Conversion</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransServer</span></span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Server 转换服务器</div><div class="line">        Analysis:</div><div class="line">        1. Create ServerSocket</div><div class="line">        2. Get Socket obejct</div><div class="line">        3. Get socket's InputStream, and decorate it </div><div class="line">        4. Get socket's OutputStream, decorate it, and write data through it</div><div class="line">        5. Close resources</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        <span class="comment">// 1. Create ServerSocket</span></div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10004</span>);</div><div class="line">       </div><div class="line">        <span class="comment">// 2. Get Socket obejct</span></div><div class="line">        Socket s = ss.accept(); <span class="comment">// Blocking!</span></div><div class="line">         </div><div class="line">        <span class="comment">// Get IP</span></div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">        System.out.println(ip+<span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// 3. Get socket's InputStream, and decorate it </span></div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">         </div><div class="line">        <span class="comment">// 4. Get socket's OutputStream, decorate it, and write data through it</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line=bIn.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            System.out.println(line + <span class="string">"...."</span> + line.toUpperCase());</div><div class="line">            out.println();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 5. Close resources</span></div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Client End</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransClient</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        Analysis:</div><div class="line">        </div><div class="line">        Client Side:</div><div class="line">        1. Need a socket endpoint</div><div class="line">        2. data source: keyboard input</div><div class="line">        3. data destination: socket's OutputStream</div><div class="line">        4. data source from server: socket's InputStream</div><div class="line">        4. print data on console</div><div class="line">        6. all data processed is text data</div><div class="line"></div><div class="line">        转换客户端</div><div class="line">        1，创建socket客户端对象</div><div class="line">        2，获取键盘录入</div><div class="line">        3，将录入的信息发给socket输出流</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> UnknownHostException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"10.128.51.138"</span>,<span class="number">10004</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Get data from keyboard</span></div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">         </div><div class="line">        <span class="comment">// socket's OutputStream</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(), <span class="keyword">true</span>);  <span class="comment">// `true` means supporting continue to write</span></div><div class="line">         </div><div class="line">        <span class="comment">// Read data from server via socket's InputStream</span></div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"over"</span>.equals(line)) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">         		   </div><div class="line">        	<span class="comment">//out.print(line+"\r\n");</span></div><div class="line">            <span class="comment">//out.flush();</span></div><div class="line">            out.println(line);</div><div class="line">            <span class="comment">// Write data to server, println() is PrintWriter's method, is different from System.out.println()</span></div><div class="line">         </div><div class="line">            <span class="comment">// Read a line of text in upper cases from server</span></div><div class="line">            String upperStr = bIn.readLine();</div><div class="line">            System.out.println(upperStr);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="Uploading-Files"><a href="#Uploading-Files" class="headerlink" title="Uploading Files"></a>Uploading Files</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, SocketException,IOException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10005</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">        System.out.println(s.getInetAddress().getHostAddress()+<span class="string">"...connected"</span>);</div><div class="line">         </div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream())); </div><div class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"Server.txt"</span>));</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line=bIn.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            bw.write(line);</div><div class="line">            bw.newLine();</div><div class="line">            bw.flush();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        out.println(<span class="string">"Successful!"</span>);</div><div class="line">         </div><div class="line">        bw.close();</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>, <span class="number">10005</span>);</div><div class="line">        </div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"client.txt"</span>));</div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">         </div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">            out.println(line);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// Tell the server side that client has finished writing</span></div><div class="line">        s.shutdownOutput();</div><div class="line">         </div><div class="line">        BufferedReader bIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">        String str = bIn.readLine();</div><div class="line">        System.out.println(str);</div><div class="line">         </div><div class="line">        br.close();</div><div class="line">        bIn.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Uploading-Pictures"><a href="#Uploading-Pictures" class="headerlink" title="Uploading Pictures"></a>Uploading Pictures</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10006</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        String ip = s.getInetAddress().getHostAddress();</div><div class="line">        System.out.println(ip+<span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Read data and put it in a file</span></div><div class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"pic"</span>);</div><div class="line">        <span class="keyword">if</span>(!dir.exists()) &#123;</div><div class="line">            dir.mkdirs();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        File file = <span class="keyword">new</span> File(dir, ip + <span class="string">".bmp"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>((len=in.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">            fos.write(buf,<span class="number">0</span>,len);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">// Get socket's OutputStream, and send text to client</span></div><div class="line">        OutputStream out = s.getOutputStream();</div><div class="line">        out.write(<span class="string">"Successful!"</span>.getBytes());</div><div class="line">         </div><div class="line">        fos.close();</div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>, <span class="number">10006</span>);</div><div class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"0.jpg"</span>);</div><div class="line">        OutputStream out = s.getOutputStream();</div><div class="line">         </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>((len=fis.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">            out.write(buf,<span class="number">0</span>,len);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">// Tell Server that it has finished data transportion, and let server stop reading</span></div><div class="line">        s.shutdownOutput();</div><div class="line">         </div><div class="line">        <span class="comment">// Read content from server</span></div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] bufIn = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> lenIn = in.read(buf);</div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,lenIn);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        fis.close();</div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Multi-Threaded-Server"><a href="#Multi-Threaded-Server" class="headerlink" title="Multi-Threaded Server"></a>Multi-Threaded Server</h2><p>客户端不变<br>服务端变为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadPicServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException,SocketException, IOException</span>&#123;</div><div class="line">        <span class="comment">//创建TCP的socket服务端</span></div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10006</span>);</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            Socket s = ss.accept();</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UploadTask(s)).start();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</div><div class="line">   <span class="keyword">private</span> Socket s;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UploadTask</span><span class="params">(Socket s)</span></span>&#123;</div><div class="line">      <span class="keyword">this</span>.s = s;</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="comment">//@override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">          <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">          String ip = s.getInetAddress().getHostAddress();</div><div class="line">          System.out.println(ip+<span class="string">"....connected"</span>);</div><div class="line">     </div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">                 <span class="comment">//读取客户端发来的数据</span></div><div class="line">                 InputStream in = s.getInputStream();</div><div class="line">         </div><div class="line">                 <span class="comment">//将读取到的数据存储到一个文件中</span></div><div class="line">                 File dir = <span class="keyword">new</span> File(<span class="string">"pic"</span>);</div><div class="line">                 <span class="keyword">if</span>(!dir.exists())</div><div class="line">                          dir.mkdirs();</div><div class="line">        </div><div class="line">                 File file = <span class="keyword">new</span> File(dir,ip+<span class="string">".jpg"</span>);</div><div class="line">                 <span class="comment">//如果文件已经存在与服务器端</span></div><div class="line">                 <span class="keyword">if</span>(file.exists())&#123;</div><div class="line">                          file = <span class="keyword">new</span> File(dir,ip+<span class="string">" "</span>+(++count)+<span class="string">".jpg"</span>);</div><div class="line">                 &#125;</div><div class="line">         </div><div class="line">                 FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">                 <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                 <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">                 <span class="keyword">while</span>((len=in.read(buf))!=-<span class="number">1</span>)&#123;</div><div class="line">                          fos.write(buf,<span class="number">0</span>,len);</div><div class="line">                 &#125;</div><div class="line">         </div><div class="line">                 <span class="comment">//获取socket输出流，将上传成功字样发给客户端</span></div><div class="line">                 OutputStream out = s.getOutputStream();</div><div class="line">                 out.write(<span class="string">"上传成功"</span>.getBytes());</div><div class="line">         </div><div class="line">                 fos.close();</div><div class="line">                 s.close();</div><div class="line">         &#125;<span class="keyword">catch</span>(IOException e)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GET / HTTP/1.1  请求行  请求方式  /myweb/1.html  请求的资源路径   http协议版本。<br>请求消息头 . 属性名：属性值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Host: 192.168.1.100:9090</div><div class="line">Connection: Keep-Alive </div><div class="line">Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, </div><div class="line">application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*</div><div class="line">Accept: */*     </div><div class="line">Accept-Language: zh-cn,zu;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)</div><div class="line">//空行   信息头与信息体之间必须有一个空行，用以分割两部分</div><div class="line">//请求体</div></pre></td></tr></table></figure>
<h2 id="Common-Clients-and-Server-and-Principles-behind-them"><a href="#Common-Clients-and-Server-and-Principles-behind-them" class="headerlink" title="Common Clients and Server, and Principles behind them"></a>Common Clients and Server, and Principles behind them</h2><p>The most common clients - web browser, or custom client<br>The most common server - web servers, like Apache Tomcat, Ngnix, JBoss, WebSphere</p>
<p>In order to learn the principles of server, let’s implement a mocked server and use existing client - web browser - to see what kind of data client sends to server</p>
<h3 id="Mocked-Server"><a href="#Mocked-Server" class="headerlink" title="Mocked Server"></a>Mocked Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcatDemo</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException</span>&#123;</div><div class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</div><div class="line">        Socket s = ss.accept();</div><div class="line">        System.out.println(s.getInetAddress().getHostAddress()+<span class="string">"....connected"</span>);</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">        String text = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(text);</div><div class="line">         </div><div class="line">        <span class="comment">// Send a message to client</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">         </div><div class="line">        out.println(<span class="string">"&lt;font size=7&gt;Welcome&lt;/font&gt;"</span>);</div><div class="line">         </div><div class="line">        s.close();</div><div class="line">        ss.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mocked-Client"><a href="#Mocked-Client" class="headerlink" title="Mocked Client"></a>Mocked Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBrowserDemo</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException</span>&#123;</div><div class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"183.174.66.227"</span>,<span class="number">8080</span>);</div><div class="line">         </div><div class="line">        <span class="comment">// Mock web browser, send a HTTP request to Tomcat</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        out.println(<span class="string">"GET /1.html HTTP/1.1"</span>);</div><div class="line">        out.println(<span class="string">"Accept: */*"</span>);</div><div class="line">        out.println(<span class="string">"Host: 183.174.66.227:8080"</span>);</div><div class="line">        out.println(<span class="string">"Connection: close"</span>);</div><div class="line">        out.println();</div><div class="line">        out.println();</div><div class="line">         </div><div class="line">        InputStream in = s.getInputStream();</div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = in.read(buf);</div><div class="line">         </div><div class="line">        String str = <span class="keyword">new</span> String(buf,<span class="number">0</span>,len);</div><div class="line">        System.out.println(str);</div><div class="line">         </div><div class="line">        s.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// The message received is:</div><div class="line">HTTP/1.1 200 OK     // response line, with HTTP version number, status code, and status message</div><div class="line">// Response&apos;s attribtues-  &lt;name&gt;: &lt;value&gt;</div><div class="line">Server: Apache-Coyote/1.1</div><div class="line">Accept-Ranges: bytes</div><div class="line">ETag: W/&quot;43-1357224984849&quot;</div><div class="line">Last-Modified: Thu, 03 Jan 2013 14:56:24 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 43</div><div class="line">Date: Thu, 03 Jan 2013 16:12:54 GMT</div><div class="line">Connection: close</div><div class="line">// Empty line</div><div class="line">// Response body</div><div class="line">&lt;font color = &quot;blue&quot; size=7&gt;welcome&lt;/font&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - @Conditional Annotation and Condition Interface in Action]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/07/spring/Spring-Conditional-Annotation-and-Condition-Interface-in-Action/</url>
      <content type="html"><![CDATA[<h2 id="Spring-Conditional-Annotation"><a href="#Spring-Conditional-Annotation" class="headerlink" title="Spring @Conditional Annotation"></a>Spring @Conditional Annotation</h2><p>From <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_blank" rel="external">Spring API Doc</a></p>
<blockquote>
<p>Indicates that a component is only eligible for registration when all specified conditions match.</p>
<p>A condition is any state that can be determined programmatically before the bean definition is due to be registered (see Condition for details).</p>
<p>The <code>@Conditional</code> annotation may be used in any of the following ways:</p>
<ul>
<li>as a type-level annotation on any class directly or indirectly annotated with <code>@Component</code>, including <code>@Configuration</code> classes</li>
<li>as a meta-annotation, for the purpose of composing custom stereotype annotations</li>
<li>as a method-level annotation on any <code>@Bean</code> method</li>
</ul>
<p>If a <code>@Configuration</code> class is marked with <code>@Conditional</code>, all of the <code>@Bean</code> methods, <code>@Import</code> annotations, and <code>@ComponentScan</code> annotations associated with that class will be subject to the conditions.</p>
</blockquote>
<a id="more"></a>
<h2 id="Spring-Condition-Interface"><a href="#Spring-Condition-Interface" class="headerlink" title="Spring Condition Interface"></a>Spring Condition Interface</h2><p>From <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Condition.html" target="_blank" rel="external">Spring API Doc</a></p>
<blockquote>
<p>A single condition that must be matched in order for a component to be registered.</p>
<p>Conditions are checked immediately before the bean-definition is due to be registered and are free to veto registration based on any criteria that can be determined at that point.</p>
<p>Conditions must follow the same restrictions as <code>BeanFactoryPostProcessor</code> and take care to never interact with bean instances. For more fine-grained control of conditions that interact with <code>@Configuration</code> beans consider the <code>ConfigurationCondition</code> interface.</p>
</blockquote>
<h2 id="Examples-in-Action"><a href="#Examples-in-Action" class="headerlink" title="Examples in Action"></a>Examples in Action</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestService</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldService</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(OldService.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OldService</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"------Initializing oldService"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewService</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(NewService.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewService</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"------Initializing newService"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">Naming convention: ConditionOnXxxxxx</div><div class="line"></div><div class="line">This is the customized annotation interface that should be used to annotate classes. It defines a couple annotation keys, which can have default values</div><div class="line">*/</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Conditional</span>(OnTestServiceFeatureCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnServiceFeature &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// configs with default values do not have to be specified when using @ConditionalOnServiceFeature annotation</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">featureflag</span><span class="params">()</span> <span class="keyword">default</span> "on"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">oldversion</span><span class="params">()</span> <span class="keyword">default</span> 1.0</span>;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// configs without default values have to be specified when using @ConditionalOnServiceFeature annotation</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">currentversion</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">Naming convention: OnXxxxxxCondition</div><div class="line"></div><div class="line">This class implements Spring's `Condition` interface and holds all business logic of the annotation interface `ConditionalOnXxxxxx`.</div><div class="line"></div><div class="line">When Spring initializes beans, `matches` method will run against any bean that is annotated with `ConditionalOnXxxxxx`. It will get all the annotation key-value pairs, evaluate conditions, and return a boolean to Spring container for it to decide whether or not initialize a bean.</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnServiceFeatureCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String isTestServiceOn;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        isTestServiceOn = <span class="string">"on"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; attributes = annotatedTypeMetadata.getAnnotationAttributes(ConditionalOnServiceFeature.class.getName());</div><div class="line"></div><div class="line">        attributes.forEach((k, v) -&gt; System.out.println(<span class="string">"-----key:"</span> + k + <span class="string">" value:"</span> + v));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(isTestServiceOn.equalsIgnoreCase((String) attributes.get(<span class="string">"featureflag"</span>))) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;</div><div class="line">        org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.class</div><div class="line">&#125;)</div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Have to specify 'currentversion' because it doesn't have default value</div><div class="line">    */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConditionalOnTestServiceFeature</span>(currentversion = <span class="number">1.2</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TestService <span class="title">oldService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> oldService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConditionalOnTestServiceFeature</span>(currentversion = <span class="number">1.2</span>, featureflag = <span class="string">"on"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TestService <span class="title">newService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> newService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>When you run <code>Application.java</code>, you’ll see console output as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">-----key:exists value:true</div><div class="line">-----key:currentversion value:1.1</div><div class="line">-----key:featureflag value:off</div><div class="line">-----key:oldversion value:1.0</div><div class="line">-----key:exists value:true</div><div class="line">-----key:currentversion value:1.2</div><div class="line">-----key:featureflag value:on</div><div class="line">-----key:oldversion value:1.0</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">------Initializing newService</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>We can tell that Spring has detected there’re two beans annotated with <code>ConditionalOnServiceFeature</code>, and it tried to run <code>matches</code> against both of them. Only <code>NewService</code> is initialized eventually because it has <code>featureflag</code> as <code>on</code>.</p>
<h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><p>Usually the condition is based on a value in configuration files.</p>
<h2 id="Keep-your-bean-UNIQUE"><a href="#Keep-your-bean-UNIQUE" class="headerlink" title="Keep your bean UNIQUE"></a>Keep your bean UNIQUE</h2><p>If you add an annotation values to make both beans eligible for initialization, like the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;</div><div class="line">        org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.class</div><div class="line">&#125;)</div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Have to specify 'currentversion' because it doesn't have default value</div><div class="line">    */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConditionalOnTestServiceFeature</span>(currentversion = <span class="number">1.2</span>, featureflag = <span class="string">"on"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TestService <span class="title">oldService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> oldService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConditionalOnTestServiceFeature</span>(currentversion = <span class="number">1.2</span>, featureflag = <span class="string">"on"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TestService <span class="title">newService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> newService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring will not report error until you try to autowire bean <code>TestService</code>. The exception is <code>NoUniqueBeanDefinitionException</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [main.java.services.test.TestService] is defined: expected single matching bean but found 2: oldService,newService</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RESTful - What is Idempotent]]></title>
      <url>https://phoenixjiangnan.github.io/2016/06/05/web%20development/rest/RESTful-What-is-Idempotent/</url>
      <content type="html"><![CDATA[<h1 id="Idempotence"><a href="#Idempotence" class="headerlink" title="Idempotence"></a>Idempotence</h1><p>Reference:  <a href="http://www.restapitutorial.com/lessons/idempotency.html" target="_blank" rel="external">http://www.restapitutorial.com/lessons/idempotency.html</a></p>
<p><code>Idempotence</code> is a funky word that often hooks people. Idempotence is sometimes a confusing concept, at least from the academic definition.</p>
<blockquote>
<p>From a <code>RESTful</code> service standpoint, for an operation (or service call) to be <code>idempotent</code>, clients can make that same call repeatedly while producing the same result. </p>
<p>In other words, making multiple identical requests has the same effect as making a single request. <code>Note that while idempotent operations produce the same result on the server (no side effects), the response itself may not be the same</code> (e.g. a resource’s state may change between requests).</p>
</blockquote>
<a id="more"></a>
<p>The <code>PUT</code> and <code>DELETE</code> methods are defined to be idempotent. However, there is a caveat on <code>DELETE</code>. The problem with <code>DELETE</code>, which if successful would normally return a <code>200 (OK)</code> or <code>204 (No Content)</code>, will often return a <code>404 (Not Found)</code> on subsequent calls, unless the service is configured to “mark” resources for deletion without actually deleting them. However, when the service actually deletes the resource, the next call will not find the resource to delete it and return a <code>404</code>. However, the state on the server is the same after each <code>DELETE</code> call, but the response is different.</p>
<p><code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code> and <code>TRACE</code> methods are defined as safe, meaning they are only intended for retrieving data. This makes them idempotent as well since multiple, identical requests will behave the same.</p>
<hr>
<h1 id="Wikipedia-Definition"><a href="#Wikipedia-Definition" class="headerlink" title="Wikipedia Definition"></a><a href="https://en.wikipedia.org/wiki/Idempotence" target="_blank" rel="external">Wikipedia Definition</a></h1><blockquote>
<p>In computing, an <code>idempotent</code> operation is one that has no additional effect if it is called more than once with the same input parameters. For example, removing an item from a set can be considered an idempotent operation on the set.</p>
</blockquote>
<p>In mathematics, an idempotent operation is one where <code>f(f(x)) = f(x)</code>. For example, the <code>abs()</code> function is idempotent because <code>abs(abs(x)) = abs(x)</code> for all x.</p>
<p>These slightly different definitions can be reconciled by considering that x in the mathematical definition represents the state of an object, and f is an operation that may mutate that object. For example, consider the Python set and its discard method. The discard method removes an element from a set, and does nothing if the element does not exist. So:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_set.discard(x)</div></pre></td></tr></table></figure>
<p>has exactly the same effect as doing the same operation twice:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">my_set.discard(x)</div><div class="line">my_set.discard(x)</div></pre></td></tr></table></figure>
<p><code>Idempotent</code> operations are often used in the design of network protocols, where a request to perform an operation is guaranteed to happen at least once, but might also happen more than once. If the operation is idempotent, then there is no harm in performing the operation two or more times.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is REST/RESTful]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/22/web%20development/rest/What-is-REST-RESTful/</url>
      <content type="html"><![CDATA[<p>Found <a href="https://spring.io/understanding/REST" target="_blank" rel="external">this article</a> explaining <code>what is rest</code> quite well. It can be a great introduction for newbies to understand REST.</p>
<hr>
<h1 id="Understanding-REST"><a href="#Understanding-REST" class="headerlink" title="Understanding REST"></a>Understanding REST</h1><p><code>REST (Representational State Transfer)</code> was introduced and defined in 2000 by Roy Fielding in his doctoral dissertation. REST is an architectural style for designing distributed systems. It is not a standard but a set of constraints, such as being stateless, having a client/server relationship, and a uniform interface. REST is not strictly related to HTTP, but it is most commonly associated with it.</p>
<h1 id="Principles-of-REST"><a href="#Principles-of-REST" class="headerlink" title="Principles of REST"></a>Principles of REST</h1><ul>
<li><code>Resources</code> - expose easily understood directory structure URIs.</li>
<li><code>Representations</code> - transfer JSON or XML to represent data objects and attributes.</li>
<li><code>Messages</code> - use HTTP methods explicitly (for example, <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>).</li>
<li><code>Stateless</code> - interactions store no client context on the server between requests. State dependencies limit and restrict scalability. The client holds session state.</li>
</ul>
<a id="more"></a>
<h1 id="HTTP-methods"><a href="#HTTP-methods" class="headerlink" title="HTTP methods"></a>HTTP methods</h1><p>Use HTTP methods to map CRUD (create, retrieve, update, delete) operations to HTTP requests.</p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>Retrieve information. <code>GET</code> requests must be safe and idempotent, meaning regardless of how many times it repeats with the same parameters, the results are the same. They can have side effects, but the user doesn’t expect them, so they cannot be critical to the operation of the system. Requests can also be partial or conditional.</p>
<p>Retrieve an address with an ID of 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /addresses/1</div></pre></td></tr></table></figure>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>Request that the resource at the URI do something with the provided entity. Often <code>POST</code> is used to create a new entity, but it can also be used to update an entity.</p>
<p>Create a new address:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">POST /addresses</div></pre></td></tr></table></figure>
<h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p>Store an entity at a URI. <code>PUT</code> can create a new entity or update an existing one. A <code>PUT</code> request is idempotent. <code>Idempotency is the main difference between the expectations of PUT versus a POST request</code>.</p>
<p>Modify the address with an ID of 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PUT /addresses/1</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: PUT replaces an existing entity. If only a subset of data elements are provided, the rest will be replaced with empty or null.</p>
</blockquote>
<h2 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h2><p>Update only the specified fields of an entity at a URI. A <code>PATCH</code> request is idempotent. Idempotency is the main difference between the expectations of PUT versus a POST request.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATCH /addresses/1</div></pre></td></tr></table></figure>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>Request that a resource be removed; however, the resource does not have to be removed immediately. It could be an asynchronous or long-running request.</p>
<p>Delete an address with an ID of 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE /addresses/1</div></pre></td></tr></table></figure>
<h1 id="HTTP-status-codes"><a href="#HTTP-status-codes" class="headerlink" title="HTTP status codes"></a>HTTP status codes</h1><p>Status codes indicate the result of the HTTP request.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1XX - informational</div><div class="line">2XX - success</div><div class="line">3XX - redirection</div><div class="line">4XX - client error</div><div class="line">5XX - server error</div></pre></td></tr></table></figure>
<h1 id="Media-types"><a href="#Media-types" class="headerlink" title="Media types"></a>Media types</h1><p>The <code>Accept</code> and <code>Content-Type</code> HTTP headers can be used to describe the content being sent or requested within an HTTP request. The client may set <code>Accept</code> to <code>application/json</code> if it is requesting a response in JSON. Conversely, when sending data, setting the <code>Content-Type</code> to <code>application/xml</code> tells the client that the data being sent in the request is XML.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[System Design - When to use Push and Pull mechanism in a messaging app or the timeline of a social app]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/20/system%20design/messaging/System-Design-When-to-use-Push-and-Pull-mechanism-in-a-messaging-app-or-the-timeline-of-a-social-app/</url>
      <content type="html"><![CDATA[<h1 id="What-is-Pull-and-Push"><a href="#What-is-Pull-and-Push" class="headerlink" title="What is Pull and Push?"></a>What is Pull and Push?</h1><ul>
<li>Data-pull: build a user’s timeline by pulling data from his followings</li>
<li>Data-push: build a user’s timeline by pushing data from his followings</li>
</ul>
<hr>
<ul>
<li>Link-pull: a user pulls the notification from the server every k seconds</li>
<li>Link-push: the server pushes the notification to the user with WebSocket as soon as it appears</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">         ---------</div><div class="line">         | Users |</div><div class="line">         ---------</div><div class="line">          |    /\    </div><div class="line">link pull |     | link push</div><div class="line">          \/    |</div><div class="line">     -----------------</div><div class="line">     |    Service    |</div><div class="line">     -----------------</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="How-to-leverage-Pull-and-Push"><a href="#How-to-leverage-Pull-and-Push" class="headerlink" title="How to leverage Pull and Push?"></a>How to leverage Pull and Push?</h1><h2 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h2><table>
<thead>
<tr>
<th>Link-push</th>
<th>Link-pull</th>
</tr>
</thead>
<tbody>
<tr>
<td>Fast</td>
<td>Delayed</td>
</tr>
<tr>
<td>Waste for users seldom check</td>
<td>Waste for users with less news</td>
</tr>
<tr>
<td>Need more connections</td>
<td>Need more bandwidth</td>
</tr>
</tbody>
</table>
<h2 id="How-to-combine-pull-and-push-to-maximize-benefits"><a href="#How-to-combine-pull-and-push-to-maximize-benefits" class="headerlink" title="How to combine pull and push to maximize benefits"></a>How to combine pull and push to maximize benefits</h2><p>Pull and Push are not mutually exclusive, they can actually be used together to empower our app. </p>
<ul>
<li>Use <code>Push</code> to push the number of notifications to users<ul>
<li>Saves bandwidth and data if users are inactive</li>
</ul>
</li>
<li>User <code>Pull</code> data when they are interested</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">                             ---------</div><div class="line">                             | Users |</div><div class="line">                             ---------</div><div class="line">                              |    /\    </div><div class="line">Pull details of notifications |     | Only push number of notifications</div><div class="line">                              \/    |</div><div class="line">                         -----------------</div><div class="line">                         |    Service    |</div><div class="line">                         -----------------</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is Callback and Webhook]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/18/web%20development/webhook/What-is-Callback-and-Webhook/</url>
      <content type="html"><![CDATA[<p>I first know these two words when developing a chatbot on Facebook Messenger. Facebook developer guide has some references and explaination on its webhook, shown here <a href="https://developers.facebook.com/docs/messenger-platform/webhook-reference" target="_blank" rel="external">https://developers.facebook.com/docs/messenger-platform/webhook-reference</a>. But I didn’t actually get what a webhook realy is, until I saw this <a href="https://medium.com/robinhood-engineering/thorn-easy-webhooks-for-python-82a78e170bdb#.2ut4we18n" target="_blank" rel="external">blog post talking about Python Thorn developed by Robinhood</a>. So I did some research, and now I’ll well explain to you what a callback and a webhook is.</p>
<h1 id="What-is-a-Callback"><a href="#What-is-a-Callback" class="headerlink" title="What is a Callback"></a>What is a Callback</h1><p>Here’s <a href="http://stackoverflow.com/a/9652434/1936713" target="_blank" rel="external">a very good answer on stackoverflowing explaining what a callback is</a></p>
<blockquote>
<p>I am going to try to keep this dead simple. A “callback” is any function that is called by another function which takes the first function as a parameter.A lot of the time, a “callback” is a function that is called when something happens. That something can be called an “event” in programmer-speak.`</p>
</blockquote>
<p>Imagine this scenario: You are expecting a package in a couple of days. The package is a gift for your neighbor. Therefore, once you get the package, you want it brought over to the neighbors. You are out of town, and so you leave instructions for your spouse.</p>
<p>You could tell them to get the package and bring it to the neighbors. If your spouse was as stupid as a computer, they would sit at the door and wait for the package until it came (NOT DOING ANYTHING ELSE) and then once it came they would bring it over to the neighbors. But there’s a better way. Tell your spouse that ONCE they receive the package, they should bring it over the neighbors. Then, they can go about life normally UNTIL she receives the package.</p>
<p>In our example, the receiving of the package is the “event” and the bringing it to the neighbors is the “callback”. Your spouse “runs” your instructions to bring the package over only when the package arrives. Much better!</p>
<p>This kind of thinking is obvious in daily life, but computers don’t have the same kind of common sense. Consider how programmers normally write to a file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fileObject = open(file)</div><div class="line"># now that we have WAITED for the file to open, we can write to it</div><div class="line">fileObject.write(&quot;We are writing to the file.&quot;)</div><div class="line"># now we can continue doing the other, totally unrelated things our program does</div></pre></td></tr></table></figure>
<p>Here, we WAIT for the file to open, before we write to it. This “blocks” the flow of execution, and our program cannot do any of the other things it might need to do! What if we could do this instead:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># we pass writeToFile (A CALLBACK FUNCTION!) to the open function</div><div class="line">fileObject = open(file, writeToFile)</div><div class="line"># execution continues flowing -- we don&apos;t wait for the file to be opened</div><div class="line"># ONCE the file is opened we write to it, but while we wait WE CAN DO OTHER THINGS!</div></pre></td></tr></table></figure>
<p>It turns out we do this with some languages and frameworks. It’s pretty cool! Check out Node.js to get some real practice with this kind of thinking.</p>
<a id="more"></a>
<h1 id="What-is-a-Webhook"><a href="#What-is-a-Webhook" class="headerlink" title="What is a Webhook"></a>What is a Webhook</h1><p><a href="https://medium.com/robinhood-engineering/thorn-easy-webhooks-for-python-82a78e170bdb#.2ut4we18n" target="_blank" rel="external">Thorn: Easy Webhooks for Python</a></p>
<hr>
<p><code>A webhook is a fancy name for an HTTP callback.</code> Users and other services can subscribe to events happening in your system by registering a URL to be called whenever the event occurs.</p>
<p>Back in 2009 some hoped that webhooks would serve as a building block for the modern web. Webhooks are easy to use since they plug into existing frameworks seamlessly and are dead simple to understand. Anyone who builds a backend system or creates an API for third parties to consume can take advantage of webhooks.</p>
<p>APIs that support webhooks like GitHub’s and Stripe’s make asynchronous events trivial. With GitHub, one can register URLs to be called whenever a new change is committed to your repository, a new bugtracker issue is created, someone publishes a comment, and so on.</p>
<p>However, webhooks could also be used internally. Communication between internal systems is traditionally dominated by complicated message consumer daemons. Using webhooks is an elegant and REST friendly way to implement event driven systems, requiring only a web-server (and optimally a separate service to dispatch the HTTP callback requests). At Robinhood, we’re using webhooks with our new order execution system to perform real-time order cancellations in reaction to events such as a stock split.</p>
<h3 id="Thorn"><a href="#Thorn" class="headerlink" title="Thorn"></a>Thorn</h3><p>Thorn is a webhook framework for Python, focusing on flexibility and ease of use, both when getting started and when maintaining a production system. The goal is for webhooks to thrive on the web, by providing Python projects with an easy solution to implement them and keeping a repository of patterns evolved by the Python community. Thorn is:</p>
<ul>
<li>Simple. Add webhook capabilities to your database models using a single decorator, including filtering for specific changes to the model.</li>
<li>Flexible. All Thorn components are pluggable, reusable and extendable.</li>
<li>Scalable. Thorn can perform millions of HTTP requests every second by taking advantage of Celery for asynchronous processing.</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>This example adds four webhook events to the Article model of an imaginary blog engine:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from thorn import ModelEvent, model_reverser, webhook_model,</div><div class="line"></div><div class="line">@webhook_model(</div><div class="line">    on_create = ModelEvent(&apos;article.created&apos;),</div><div class="line">    on_change = ModelEvent(&apos;article.changed&apos;),</div><div class="line">    on_delete = ModelEvent(&apos;article.removed&apos;),</div><div class="line">    on_publish = ModelEvent(&apos;article.published&apos;, state__eq = &quot;PUBLISHED&quot;)</div><div class="line">                    .dispatches_on_change(),</div><div class="line">    reverse = model_reverser(&apos;article:detail&apos;, uuid = &apos;uuid&apos;),</div><div class="line">)</div><div class="line"></div><div class="line">class Article(models.Model):</div><div class="line">    pass # ...</div></pre></td></tr></table></figure>
<p>Users can now subscribe to the four events individually, or all of them by subscribing to “article.*”, and will be notified every time an article is created, changed, removed or published:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ curl -X POST \</div><div class="line">&gt; -H &quot;Authorization: Bearer &lt;secret login token&gt;&quot; \</div><div class="line">&gt; -H &quot;Content-Type: application/json&quot; \</div><div class="line">&gt; -d &apos;&#123;&quot;event&quot;: &quot;article.*&quot;, &quot;url&quot;: &quot;https://.com/h/article?u=1&quot;&#125;&apos; \</div><div class="line">&gt; http://example.com/hooks/</div></pre></td></tr></table></figure>
<p>The webhook consumer can be written in any language with web server support, here’s an example Django consumer endpoint reacting to articles being published:<br>ref is the URL of the article published</p>
<p>The API is expressive, so may require you to learn more about the arguments to understand it fully. Luckily it’s all described in the Events Guide for you to consult after reading the Quick start tutorial.</p>
<p>…</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate - the hi/lo algorithm]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/17/database/hibernate/Hibernate-the-hi-lo-algorithm/</url>
      <content type="html"><![CDATA[<p>When designing the database model, you need to be aware of the <code>database identifier strategies</code>. Database sequences are very convenient, because they are both flexible and efficient for most use cases.</p>
<blockquote>
<p>But even with cached sequences, the application requires a database round-trip for every new the sequence value. If your applications demands a high number of insert operations per transaction, the sequence allocation may be optimized with a <code>hi/lo algorithm</code>.</p>
</blockquote>
<h1 id="The-hi-lo-algorithm"><a href="#The-hi-lo-algorithm" class="headerlink" title="The hi/lo algorithm"></a>The hi/lo algorithm</h1><blockquote>
<p>The <code>hi/lo algorithm</code> splits the sequences domain into <code>hi</code> groups. A <code>hi</code> value is assigned <code>synchronously</code>. Every <code>hi</code> group is given a maximum number of <code>lo</code> entries, that can by assigned <code>off-line</code> without worrying about concurrent duplicate entries.</p>
</blockquote>
<p>The <code>hi</code> token is assigned by the database, and two concurrent calls are guaranteed to see unique consecutive values</p>
<p>Once a <code>hi</code> token is retrieved we only need the <code>incrementSize</code> (the number of “lo” entries)</p>
<p>The identifiers range is given by the following formula:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// [inclusive, exclusive)</div><div class="line">[(hi -1) * incrementSize) + 1, (hi * incrementSize) + 1)</div></pre></td></tr></table></figure>
<p>and the <code>lo</code> value will be taken from:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[0, incrementSize)</div></pre></td></tr></table></figure>
<p>starting from</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(hi -1) * incrementSize) + 1</div></pre></td></tr></table></figure>
<p>When all <code>lo</code> values are used, a new <code>hi</code> value is fetched and the cycle continues.</p>
<p>Here you can have an example of two concurrent transactions, each one inserting multiple entities.</p>
<a id="more"></a>
<h1 id="Testing-the-theory"><a href="#Testing-the-theory" class="headerlink" title="Testing the theory"></a>Testing the theory</h1><p>If we have the following entity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hilo</span> </span>&#123;</div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE, generator = <span class="string">"hilo_sequence_generator"</span>)</div><div class="line">    <span class="meta">@GenericGenerator</span>(</div><div class="line">            name = <span class="string">"hilo_sequence_generator"</span>,</div><div class="line">            strategy = <span class="string">"org.hibernate.id.enhanced.SequenceStyleGenerator"</span>,</div><div class="line">            parameters = &#123;</div><div class="line">                    <span class="meta">@Parameter</span>(name = <span class="string">"sequence_name"</span>, value = <span class="string">"hilo_seqeunce"</span>),</div><div class="line">                    <span class="meta">@Parameter</span>(name = <span class="string">"initial_value"</span>, value = <span class="string">"1"</span>),</div><div class="line">                    <span class="meta">@Parameter</span>(name = <span class="string">"increment_size"</span>, value = <span class="string">"3"</span>),</div><div class="line">                    <span class="meta">@Parameter</span>(name = <span class="string">"optimizer"</span>, value = <span class="string">"hilo"</span>)</div><div class="line">            &#125;)</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We can check how many database sequence round-trips are issued when inserting multiple entities:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHiloIdentifierGenerator</span><span class="params">()</span> </span>&#123;</div><div class="line">    doInTransaction(<span class="keyword">new</span> TransactionCallable&lt;Void&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">                Hilo hilo = <span class="keyword">new</span> Hilo();</div><div class="line">                session.persist(hilo);</div><div class="line">                session.flush();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Which end-ups generating the following SQL queries:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Query:&#123;[call next value <span class="keyword">for</span> hilo_seqeunce][]&#125; </div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][1]&#125; </span></div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][2]&#125; </span></div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][3]&#125; </span></div><div class="line">Query:&#123;[call next value <span class="keyword">for</span> hilo_seqeunce][]&#125; </div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][4]&#125; </span></div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][5]&#125; </span></div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][6]&#125; </span></div><div class="line">Query:&#123;[call next value <span class="keyword">for</span> hilo_seqeunce][]&#125; </div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][7]&#125; </span></div><div class="line">Query:&#123;[<span class="function">insert into <span class="title">Hilo</span> <span class="params">(id)</span> <span class="title">values</span> <span class="params">(?)</span>][8]&#125;</span></div></pre></td></tr></table></figure>
<p>As you can see we have only 3 sequence calls for 8 inserted entities. The more entity inserts a transaction will we require the better the performance gain we’ll obtain from reducing the database sequence round-trips.</p>
<hr>
<p>Reference: <a href="http://vladmihalcea.com/2014/06/23/the-hilo-algorithm/" target="_blank" rel="external">http://vladmihalcea.com/2014/06/23/the-hilo-algorithm/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jackson - How does Jackson deserialize json to complex objects?]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/15/web%20development/json/jackson/Jackson-How-does-Jackson-deserialize-json-to-complex-objects/</url>
      <content type="html"><![CDATA[<p>Deserialization is really useful when you are reading a POST entity from a request body and a response body.</p>
<p>Spring boot has packaged Jackson and are using Jackson for objects serialization and deserialization. You can choose another json library if you are using Apache httpclient.</p>
<p>Here’s a demo class that sends a http GET request and receives a response whose entity needs to be deserialized.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedProcessor</span> </span>&#123;</div><div class="line">	 <span class="comment">// Jackson's ObjectMapper</span></div><div class="line">    <span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retrieveFeed</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        HttpClient client = HttpClientBuilder.create().build();</div><div class="line"></div><div class="line">        URI uri = UriComponentsBuilder</div><div class="line">                .fromHttpUrl(FEED_URI)</div><div class="line">                .build()</div><div class="line">                .toUri();</div><div class="line"></div><div class="line">			<span class="comment">// Send http GET request</span></div><div class="line">        HttpGet get = <span class="keyword">new</span> HttpGet(uri);</div><div class="line">        HttpResponse response = client.execute(get);</div><div class="line"></div><div class="line">			<span class="comment">// Deserialize the response's json entity body</span></div><div class="line">        Feed feed = mapper.readValue(response.getEntity().getContent(), Feed.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The following json is in the entity’s body.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"nodes"</span>: [</div><div class="line">	&#123;</div><div class="line">		<span class="attr">"node"</span>: &#123;</div><div class="line">			<span class="attr">"title"</span>: <span class="string">"title1"</span>,</div><div class="line">			<span class="attr">"date"</span>: <span class="string">"2016-05-01T09:45:00-07:00"</span>,</div><div class="line">			<span class="attr">"path"</span>: <span class="string">"some url"</span>,</div><div class="line">			<span class="attr">"image"</span>: &#123;</div><div class="line">				<span class="attr">"src"</span>: <span class="string">"some_url/media/ddvotd_1.png"</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;, &#123;</div><div class="line">		<span class="attr">"node"</span>: &#123;</div><div class="line">			<span class="attr">"title"</span>: <span class="string">"title2"</span>,</div><div class="line">			<span class="attr">"date"</span>: <span class="string">"2016-05-02T09:45:00-07:00"</span>,</div><div class="line">			<span class="attr">"path"</span>: <span class="string">"some url"</span>,</div><div class="line">			<span class="attr">"image"</span>: &#123;</div><div class="line">				<span class="attr">"src"</span>: <span class="string">"some_url/media/ddvotd_2.png"</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;]            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>So how to parse this json block into an object? As you can see from above, you need to create an <code>ObjectMapper</code> from <code>Jackson</code>, and <code>ObjectMapper</code> has all the following <code>readValue()</code> methods to parse src to an object of a given class. To be simple, you need to create a class hierarchy to facilitate <code>ObjectMapper</code> maps json fields to a class.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, Class&lt;T&gt; valueType)</span> </span></div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> len, Class&lt;T&gt; valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> len, JavaType valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> len, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, JavaType valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(File src, Class&lt;T&gt; valueType)</span></div><div class="line">Method to deserialize JSON content from given file into given Java type.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(File src, JavaType valueType)</span></div><div class="line">Method to deserialize JSON content from given file into given Java type.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(File src, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span></div><div class="line">Method to deserialize JSON content from given file into given Java type.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(InputStream src, Class&lt;T&gt; valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(InputStream src, JavaType valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(InputStream src, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(com.fasterxml.jackson.core.JsonParser jp, Class&lt;T&gt; valueType)</span></div><div class="line">Method to deserialize JSON content into a non-container <span class="title">type</span> <span class="params">(it can be an array type, however)</span>: typically a bean, array or a wrapper <span class="title">type</span> <span class="params">(like Boolean)</span>.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(com.fasterxml.jackson.core.JsonParser jp, JavaType valueType)</span></div><div class="line">Type-safe overloaded method, basically alias <span class="keyword">for</span> <span class="title">readValue</span><span class="params">(JsonParser, Class)</span>.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.ResolvedType valueType)</span></div><div class="line">Method to deserialize JSON content into a Java type, reference to which is passed as argument.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.TypeReference&lt;?&gt; valueTypeRef)</span></div><div class="line">Method to deserialize JSON content into a Java type, reference to which is passed as argument.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(Reader src, Class&lt;T&gt; valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(Reader src, JavaType valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(Reader src, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(String content, Class&lt;T&gt; valueType)</span></div><div class="line">Method to deserialize JSON content from given JSON content String.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(String content, JavaType valueType)</span></div><div class="line">Method to deserialize JSON content from given JSON content String.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(String content, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span></div><div class="line">Method to deserialize JSON content from given JSON content String.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(URL src, Class&lt;T&gt; valueType)</span></div><div class="line">Method to deserialize JSON content from given resource into given Java type.</div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(URL src, JavaType valueType)</span> </div><div class="line">&lt;T&gt; T	<span class="title">readValue</span><span class="params">(URL src, com.fasterxml.jackson.core.type.TypeReference valueTypeRef)</span></div><div class="line">Method to deserialize JSON content from given resource into given Java type.</div></pre></td></tr></table></figure>
<p>I first created a class hierarchy like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feed</span> </span>&#123;</div><div class="line">	List&lt;node&gt; nodes;</div><div class="line"></div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">	String title;</div><div class="line">	Date date;</div><div class="line">	String path;</div><div class="line">	Image image;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line">	String src;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And I got the following errors when trying to run <code>FeedProcessor.retrieveFeed()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">14:47:33.307 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Connection can be kept alive indefinitely</div><div class="line">Exception in thread &quot;main&quot; com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field &quot;node&quot; (class main.java.model.feed.FeedNode), not marked as ignorable (5 known properties: &quot;title&quot;, &quot;image&quot;, &quot;path&quot;, &quot;date&quot;, &quot;embed_code&quot;])</div><div class="line"> at [Source: &#123;</div><div class="line">	    &quot;node&quot;: &#123;</div><div class="line">       		&quot;title&quot;: &quot;title1&quot;,</div><div class="line">       		&quot;date&quot;: &quot;2016-05-01T09:45:00-07:00&quot;</div><div class="line">       		&quot;path&quot;: &quot;some url&quot;</div><div class="line">				&quot;image&quot;: &#123;</div><div class="line">						&quot;src&quot;: &quot;some_url/media/ddvotd_1.png&quot;,</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;; line: 4, column: 10] (through reference chain: main.java.model.feed.VOTDFeed[&quot;nodes&quot;]-&gt;java.util.ArrayList[0]-&gt;main.java.model.feed.FeedNode[&quot;node&quot;])</div><div class="line">	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:51)</div><div class="line">	at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:839)</div><div class="line">	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1045)</div><div class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1352)</div><div class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1330)</div><div class="line">	at </div><div class="line">	...</div><div class="line"></div><div class="line">Process finished with exit code 1</div></pre></td></tr></table></figure>
<p>The error indicates it cannot parse the json according to my class hierarchy.</p>
<p>I didn’t find any useful information online, and after having a rest in the weekends, I got a inspirational flash and realized my class hierarchy was not right.</p>
<p>The following hierarchy fixed the error:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feed</span> </span>&#123;</div><div class="line">	List&lt;AnonymousClass&gt; nodes;</div><div class="line"></div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousClass</span> </span>&#123;</div><div class="line">	Node node;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">	String title;</div><div class="line">	Date date;</div><div class="line">	String path;</div><div class="line">	Image image;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line">	String src;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Priciple-for-Object-Parsing-from-Json"><a href="#Priciple-for-Object-Parsing-from-Json" class="headerlink" title="Priciple for Object Parsing from Json"></a>Priciple for Object Parsing from Json</h1><p>The json parsing priciple that I learned from the above experience is:</p>
<ol>
<li>every pair of curl brace <code>{}</code>, with or withour name, should be mapped to a class</li>
<li>every pair of square bracket <code>[]</code>, with or withour name, should be mapped to a list of objects</li>
<li>field name in class should match exactly the json field name, but class name can be different</li>
</ol>
<p>To eliborate a little bit more of points 2 and 3, I gave out the following example:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"nodes"</span>: [</div><div class="line">		<span class="string">"node"</span>: &#123;</div><div class="line">			<span class="attr">"node"</span>: &#123;</div><div class="line">				<span class="attr">"title"</span>: <span class="string">"title1"</span>,</div><div class="line">				<span class="attr">"date"</span>: <span class="string">"2016-05-01T09:45:00-07:00"</span>,</div><div class="line">				<span class="attr">"path"</span>: <span class="string">"some url"</span>,</div><div class="line">				<span class="attr">"image"</span>: &#123;</div><div class="line">					<span class="attr">"src"</span>: <span class="string">"some_url/media/ddvotd_1.png"</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;, </div><div class="line">		<span class="string">"node"</span>: &#123;</div><div class="line">			<span class="attr">"node"</span>: &#123;</div><div class="line">				<span class="attr">"title"</span>: <span class="string">"title2"</span>,</div><div class="line">				<span class="attr">"date"</span>: <span class="string">"2016-05-02T09:45:00-07:00"</span>,</div><div class="line">				<span class="attr">"path"</span>: <span class="string">"some url"</span>,</div><div class="line">				<span class="attr">"image"</span>: &#123;</div><div class="line">					<span class="attr">"src"</span>: <span class="string">"some_url/media/ddvotd_2.png"</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	]         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feed</span> </span>&#123;</div><div class="line">	List&lt;ParentNode&gt; nodes;</div><div class="line"></div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This class's name doesn't have to be "Node"</span></div><div class="line"><span class="comment">// but its field name has to be "Node" to match the field name in json</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentNode</span> </span>&#123;</div><div class="line">	Node node;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">	String title;</div><div class="line">	Date date;</div><div class="line">	String path;</div><div class="line">	Image image;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line">	String src;</div><div class="line">	</div><div class="line">	<span class="comment">// getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Happy learning!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Set up and Enable Scheduled Tasks]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/10/spring/Spring-Set-up-and-Enable-Scheduled-Tasks/</url>
      <content type="html"><![CDATA[<h1 id="Annotation-EnableScheduling-and-Scheduled"><a href="#Annotation-EnableScheduling-and-Scheduled" class="headerlink" title="Annotation @EnableScheduling and @Scheduled"></a>Annotation @EnableScheduling and @Scheduled</h1><ul>
<li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html" target="_blank" rel="external">EnableScheduling.java</a></li>
<li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html" target="_blank" rel="external">Scheduled.java</a></li>
</ul>
<p>Annotation <code>@EnableScheduling</code> enables Spring’s scheduled task execution capability, similar to functionality found in Spring’s <code>&lt;task:*&gt;</code> XML namespace. </p>
<p>This enables detection of <code>@Scheduled</code> annotations on any Spring-managed bean in the container. For example, given a class MyTask, the following configuration would ensure that <code>MyTask.work()</code> is called once every 1000 <code>ms</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> </span>&#123;</div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate=<span class="number">1000</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// task execution logic</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyTask <span class="title">task</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyTask();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>Alternatively, if MyTask were annotated with <code>@Component</code>, the following configuration would ensure that its <code>@Scheduled</code> method is invoked at the desired interval:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> </span>&#123;</div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate=<span class="number">1000</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// task execution logic</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.myco.tasks"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>Methods annotated with <code>@Scheduled</code> may even be declared directly within <code>@Configuration</code> classes:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableScheduling</div><div class="line">public class AppConfig &#123;</div><div class="line">    @Scheduled(fixedRate=1000)</div><div class="line">    public void work() &#123;</div><div class="line">        // task execution logic</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="Annotation-SchedulingConfigurer"><a href="#Annotation-SchedulingConfigurer" class="headerlink" title="Annotation @SchedulingConfigurer"></a>Annotation @SchedulingConfigurer</h1><ul>
<li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html" target="_blank" rel="external">SchedulingConfigurer.java</a></li>
</ul>
<blockquote>
<p>　In all of the above scenarios, <code>a default single-threaded task executor</code> is used. </p>
</blockquote>
<p>When more control is desired, a <code>@Configuration</code> class may implement <code>SchedulingConfigurer</code>. This allows access to the underlying <code>ScheduledTaskRegistrar</code> instance. For example, the following example demonstrates how to customize the <code>Executor</code> used to execute scheduled tasks:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</div><div class="line">        taskRegistrar.setScheduler(taskExecutor());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(destroyMethod=<span class="string">"shutdown"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Note in the example above the use of <code>@Bean(destroyMethod=&quot;shutdown&quot;)</code>. This ensures that the task executor is properly shut down when the Spring application context itself is closed. </p>
</blockquote>
<p>Implementing <code>SchedulingConfigurer</code> interface also allows for fine-grained control over task registration via the <code>ScheduledTaskRegistrar</code>. For example, the following configures the execution of a particular bean method per a custom <code>Trigger</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</div><div class="line">        taskRegistrar.setScheduler(taskScheduler());</div><div class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          		myTask().work();</div><div class="line">           &#125;</div><div class="line">		&#125;, <span class="keyword">new</span> CustomTrigger());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(destroyMethod=<span class="string">"shutdown"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">42</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyTask <span class="title">myTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyTask();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For reference, the example above can be compared to the following Spring XML configuration:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">"taskScheduler"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"taskScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"42"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"myTask"</span> <span class="attr">method</span>=<span class="string">"work"</span> <span class="attr">fixed-rate</span>=<span class="string">"1000"</span>/&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTask"</span> <span class="attr">class</span>=<span class="string">"com.foo.MyTask"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The examples are equivalent save that in XML a fixed-rate period is used instead of a custom Trigger implementation; this is because the task: namespace scheduled cannot easily expose such support. This is but one demonstration how the code-based approach allows for maximum configurability through direct access to actual componentry.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"aScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span> <span class="attr">scheduler</span>=<span class="string">"aScheduler"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"cleaner"</span> <span class="attr">method</span>=<span class="string">"run"</span> <span class="attr">fixed-delay</span>=<span class="string">"#&#123; $&#123;s.delay&#125; * 100 &#125;"</span>  <span class="attr">initial-delay</span>=<span class="string">"100"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - @Primary annotation]]></title>
      <url>https://phoenixjiangnan.github.io/2016/05/02/spring/Spring-Primary-annotation/</url>
      <content type="html"><![CDATA[<p><code>@Primary</code> indicates that a bean should be given preference when multiple candidates are qualified to autowire a single-valued dependency. If exactly one <code>primary</code> bean exists among the candidates, it will be the autowired value. This annotation is semantically equivalent to the <code>&lt;bean&gt;</code> element’s primary attribute in Spring XML.</p>
<p>May be used on any class directly or indirectly annotated with <code>@Component</code> or on methods annotated with <code>@Bean</code>.</p>
<a id="more"></a>
<p>Example<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> FooRepository fooRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooService</span><span class="params">(FooRepository fooRepository)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fooRepository = fooRepository;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcFooRepository</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdbcFooService</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Primary</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateFooRepository</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HibernateFooService</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Because <code>HibernateFooRepository</code> is marked with <code>@Primary</code>, it will be injected preferentially over the jdbc-based variant assuming both are present as beans within the same Spring application context, which is often the case when component-scanning is applied liberally.</p>
<blockquote>
<p>Note that using <code>@Primary</code> at the class level has no effect unless <code>component-scanning is being used</code>. If a <code>@Primary</code>-annotated class is declared via XML, <code>@Primary</code> annotation metadata is ignored, and <code>&lt;bean primary=&quot;true|false&quot;/&gt;</code> is respected instead.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate - Hibernate Enum and Decoupling Java Class with Database Record]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/28/database/hibernate/Hibernate-Hibernate-Enum-and-Decoupling-Java-Class-with-Database-Record/</url>
      <content type="html"><![CDATA[<h2 id="Example-that-Hibernate-Persists-Enum"><a href="#Example-that-Hibernate-Persists-Enum" class="headerlink" title="Example that Hibernate Persists Enum"></a>Example that Hibernate Persists Enum</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Table</span>(name = <span class="string">"tasks"</span>)</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tasks</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Task &#123;</div><div class="line">        Task1                  (<span class="string">"task 1"</span>, Type.Job1),</div><div class="line">        Task2                  (<span class="string">"task 2"</span>, Type.Job2),</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> Type Type;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Task</span><span class="params">(String n, Type j)</span> </span>&#123;</div><div class="line">            name = n;</div><div class="line">            Type = j;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>｛</span></div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// A map that maps enum name with Task</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Task&gt; s_typeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Task tt : Task.values()) &#123;</div><div class="line">                s_typeMap.put(tt.name(), tt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Converts a String to a enum instance of Task.</div><div class="line">         * Throw an exception if the String does not match any enum's name</div><div class="line">         * */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task <span class="title">fromString</span><span class="params">(String TaskName)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!s_typeMap.containsKey(TaskName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No task type named"</span> + TaskName));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> s_typeMap.get(TaskName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> Task m_Task;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tasks</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tasks</span><span class="params">(Task type)</span> </span>&#123;</div><div class="line">        m_Task = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"type"</span>)</div><div class="line">    <span class="meta">@Enumerated</span>(EnumType.String)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m_type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.m_type= type;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Example-that-decouples-enum-and-db-values"><a href="#Example-that-decouples-enum-and-db-values" class="headerlink" title="Example that decouples enum and db values"></a>Example that decouples enum and db values</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Table</span>(name = <span class="string">"tasks"</span>)</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Task &#123;</div><div class="line">        Task1                  (<span class="string">"task 1"</span>, Type.Job1),</div><div class="line">        Task2                  (<span class="string">"task 2"</span>, Type.Job2),</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> Type Type;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Task</span><span class="params">(String n, Type j)</span> </span>&#123;</div><div class="line">            name = n;</div><div class="line">            Type = j;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>｛</span></div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// A map that maps enum name with Task</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Task&gt; s_typeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Task tt : Task.values()) &#123;</div><div class="line">                s_typeMap.put(tt.name(), tt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Converts a String to a enum instance of Task.</div><div class="line">         * Throw an exception if the String does not match any enum's name</div><div class="line">         * */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task <span class="title">fromString</span><span class="params">(String TaskName)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!s_typeMap.containsKey(TaskName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No task type named"</span> + TaskName));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> s_typeMap.get(TaskName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> Task m_Task;</div><div class="line">    <span class="keyword">private</span> String m_typeName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tasks</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tasks</span><span class="params">(Task type)</span> </span>&#123;</div><div class="line">        m_Task = type;</div><div class="line">        m_typeName = type.name();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Task.fromString(getTypeName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(Task type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.m_Task = type;</div><div class="line">        setTypeName(m_Task.name());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"type"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m_typeName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> typeName the name of the Task</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTypeName</span><span class="params">(String typeName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.m_typeName = typeName;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[The N + 1 Query Problem]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/25/database/The-N-1-Query-Problem/</url>
      <content type="html"><![CDATA[<p><a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/" target="_blank" rel="external">https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/</a></p>
<h1 id="What-is-N-1-Query-Problem"><a href="#What-is-N-1-Query-Problem" class="headerlink" title="What is N+1 Query Problem"></a>What is N+1 Query Problem</h1><p>The N+1 query problem is a common performance anti-pattern. It looks like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Set&lt;division&gt; divisions = getAllDivisions();</div><div class="line">divisions.foreach (</div><div class="line">    d -&gt; &#123;</div><div class="line">        Set&lt;Employee&gt; employees = getEmployeesByDivision(d)Ï</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Assuming getAllDivisions() has an implementation that boils down to:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> divisions;</div></pre></td></tr></table></figure>
<p>and <code>getEmployeesByDivision(d)</code> has an implementation something like this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionId = d.id;</div></pre></td></tr></table></figure>
<p>You will issue “N+1” queries when the code executes, where N is the number of divisions:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> divisions;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionID = <span class="number">1</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionID = <span class="number">2</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionID = <span class="number">3</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionID = <span class="number">4</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> divisionID = <span class="number">5</span></div><div class="line">...</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>The problem with this is that each query has quite a bit of overhead. It is much faster to issue 1 query which returns 100 results than to issue 100 queries which each return 1 result. This is particularly true if your database is on a different machine which is, say, 1-2ms away on the network. In this case, issuing 100 queries serially has a minimum cost of 100-200ms, even if they can be satisfied instantly by MySQL. This is far higher than the entire server-side generation cost for most Phabricator pages should be.</p>
<h1 id="Solution-–-Eager-Loading"><a href="#Solution-–-Eager-Loading" class="headerlink" title="Solution – Eager Loading"></a>Solution – Eager Loading</h1><p>We solve this problem by loading all your data before iterating through it. Note that reading from memory is much faster than reading from database (mainly disk).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Set&lt;Division&gt; divisions = getAllDivisions();</div><div class="line">Set&lt;Employee&gt; employees = getAllEmployees();</div><div class="line"></div><div class="line">divisions.forEach(</div><div class="line">    d -&gt; &#123;</div><div class="line">        Set&lt;employee&gt; divisionEmployees = getEmployeesByDivision(employees, d.getId());</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>That is, issue these queries:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM divisions;</div><div class="line">SELECT * FROM employees WHERE divisionID IN (1, 2, 3, 4, 5, ...)</div></pre></td></tr></table></figure>
<p>In this case, the total number of queries issued is always <code>2</code>, no matter how many objects there are. You’ve removed the “N” part from the page’s query plan, and are no longer paying the overhead of issuing hundreds of extra queries. This will perform much better (although, as with all performance changes, you should verify this claim by measuring it).</p>
<p>But loading all data from database into memory also deserves a careful consideration. Is the size of all data going to fit into your memory? If you have a 8 GB memory, perhaps 1 or 2 GB are the maximum you can spare for in-memory data set.</p>
<h1 id="Detecting-the-Problem"><a href="#Detecting-the-Problem" class="headerlink" title="Detecting the Problem"></a>Detecting the Problem</h1><p>Beyond reasoning about it while figuring out how to load the data you need, the easiest way to detect this issue is to check the “Services” tab in DarkConsole (see Using DarkConsole), which lists all the service calls made on a page. If you see a bunch of similar queries, this often indicates an N+1 query issue (or a similar kind of query batching problem). Restructuring code so you can run a single query to fetch all the data at once will always improve the performance of the page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unit Test - JMockit - Difference between Expectations, NonStrictExpectations, and StrictExpectations]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/25/test/jmockit/Unit-Test-JMockit-Difference-between-Expectations-NonStrictExpectations-and-StrictExpectations/</url>
      <content type="html"><![CDATA[<h2 id="NonStrictExpectations-is-deprecated-now"><a href="#NonStrictExpectations-is-deprecated-now" class="headerlink" title="NonStrictExpectations is deprecated now!"></a>NonStrictExpectations is deprecated now!</h2><p>Before V1.23, <code>Expectations</code> equals <code>StrictExpectations</code>. From V1.23, JMockit has dropped <code>NonStrictExpectations</code>, and replace it with <code>Expectations</code>.</p>
<p>Here’s the release note from JMockit</p>
<blockquote>
<p>Version 1.23 (Apr 24, 2016):</p>
<ul>
<li>Dropped support for the mocking of private methods/constructors when using the <code>Expectations</code> API, to prevent misuse. If still needed, they can be mocked or stubbed out with the application of a <code>MockUp&lt;T&gt;</code>.</li>
<li>Deprecated the <code>NonStrictExpectations</code> class. Existing tests should use <code>Expectations</code> instead.</li>
<li>Added support for JDK 9 (tested with builds 112 to 114).</li>
</ul>
</blockquote>
<h2 id="Regular-versus-strict-expectations"><a href="#Regular-versus-strict-expectations" class="headerlink" title="Regular versus strict expectations"></a>Regular versus strict expectations</h2><p>Expectations recorded inside a <code>new Expectations() {...}</code> block are the regular ones. What this means is that:</p>
<ul>
<li>the invocations they specify are expected to occur at least once during the replay phase</li>
<li>they may occur more than once, though, and in a different order relative to other recorded expectations</li>
<li>additionally, invocations that don’t match any recorded expectation are allowed to occur in any number and in any order. </li>
</ul>
<a id="more"></a>
<p>If no invocation matches a given recorded expectation, a “missing invocation” error gets thrown at the end of the test, causing it to fail (this is only the default behavior, though, as it can be overridden).</p>
<p>The API also supports the concept of strict expectations: </p>
<ul>
<li>those that, when recorded, only allow invocations during replay that exactly match the recordings (within explicitly specified allowances, when needed), both in the number of matching invocations (exactly one, by default) and in the order they occur. </li>
<li>Invocations that occur during replay but fail to match a recorded strict expectation are regarded as unexpected, causing an immediate “unexpected invocation” error, and consequently failing the test.</li>
</ul>
<p>This is achieved by using the <code>StrictExpectations</code> subclass.</p>
<p>Note that in the case of strict expectations, all invocations occurring during replay that match recorded expectations are implicitly verified. Any remaining invocations that don’t match an expectation are considered unexpected, causing the test to fail. The test will also fail if any recorded strict expectation is missed, ie, if no matching invocations occur during replay.</p>
<p>We can mix expectations of different levels of strictness in the same test by writing multiple expectation blocks, some regular (using <code>Expectations</code>), others strict (using <code>StrictExpectations</code>). Normally, a given mock field or mock parameter will appear in expectation blocks of a single kind, though.</p>
<p>Most tests will simply make use of “regular” expectations. Usage of strict expectations is probably more a matter of personal preference.</p>
<h2 id="Strict-and-non-strict-mocks"><a href="#Strict-and-non-strict-mocks" class="headerlink" title="Strict and non-strict mocks"></a>Strict and non-strict mocks</h2><p>Note that we do not specify that a given mocked type/instance should be strict or not. Instead, the strictness for a given mock field/parameter is determined by how it is used in the test. Once the first strict expectation is recorded in a <code>new StrictExpectations() {...}</code> block, the associated mocked type/instance is considered to be strict for the whole test; otherwise, it will be not strict.</p>
<hr>
<p>Referenced and modified according to<br><a href="http://jmockit.org/tutorial/Mocking.html#strictness" target="_blank" rel="external">http://jmockit.org/tutorial/Mocking.html#strictness</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - ReentrantLock]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/20/java/concurrency/Java-Concurrency-ReentrantLock/</url>
      <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Java’s <code>synchronized</code> keyword is a wonderful tool – it allows us a simple and reliable way to synchronize access to critical sections and it’s not too hard to understand.</p>
<p>But sometimes we need more control over synchronization. Either we need to control types of access (read and write) separately, or it is cumbersome to use because either there is no obvious mutex or we need to maintain multiple mutexes.</p>
<p>Thankfully, lock utility classes make these problems easier to solve.</p>
<h2 id="1-Lock-interface"><a href="#1-Lock-interface" class="headerlink" title="1 Lock interface"></a>1 Lock interface</h2><p><code>Lock</code> implementations provide more extensive locking operations than can be obtained using <code>synchronized</code> methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated <code>Condition</code> objects.</p>
<p>A lock is a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: only one thread at a time can acquire the lock and all access to the shared resource requires that the lock be acquired first. However, some locks may allow concurrent access to a shared resource, such as the read lock of a <code>ReadWriteLock</code>.</p>
<p>The use of synchronized methods or statements provides access to the implicit monitor lock associated with every object, but forces all lock acquisition and release to occur in a block-structured way: when multiple locks are acquired they must be released in the opposite order, and all locks must be released in the same lexical scope in which they were acquired.</p>
<a id="more"></a>
<p>While the scoping mechanism for <code>synchronized</code> methods and statements makes it much easier to program with monitor locks, and helps avoid many common programming errors involving locks, there are occasions where you need to work with locks in a more flexible way. For example, some algorithms for traversing concurrently accessed data structures require the use of “hand-over-hand” or “chain locking”: you acquire the lock of node A, then node B, then release A and acquire C, then release B and acquire D and so on. Implementations of the Lock interface enable the use of such techniques by allowing a lock to be acquired and released in different scopes, and allowing multiple locks to be acquired and released in any order.</p>
<p>With this increased flexibility comes additional responsibility. The absence of block-structured locking removes the automatic release of locks that occurs with <code>synchronized</code> methods and statements. In most cases, the following idiom should be used:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Lock l = ...;</div><div class="line">l.lock();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// access the resource protected by this lock</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    l.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by <code>try-finally</code> or <code>try-catch</code> to <code>ensure that the lock is released when necessary</code>.</p>
<p><code>Lock</code> implementations provide additional functionality over the use of synchronized methods and statements by providing: </p>
<ul>
<li><code>a non-blocking attempt to acquire a lock (tryLock())</code></li>
<li><code>an attempt to acquire the lock that can be interrupted (lockInterruptibly())</code></li>
<li><code>an attempt to acquire the lock that can timeout (tryLock(long, TimeUnit))</code>.</li>
</ul>
<p>A <code>Lock</code> class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as <code>guaranteed ordering</code>, <code>non-reentrant usage</code>, or <code>deadlock detection</code>. If an implementation provides such specialized semantics then the implementation must document those semantics.</p>
<p>Note that <code>Lock</code> instances are just normal objects and can themselves be used as the target in a synchronized statement. Acquiring the monitor lock of a <code>Lock</code> instance has no specified relationship with invoking any of the <code>lock()</code> methods of that instance. It is recommended that to avoid confusion you never use Lock instances in this way, except within their own implementation.</p>
<p>Except where noted, passing a null value for any parameter will result in a <code>NullPointerException</code> being thrown.</p>
<h1 id="2-ReadWriteLock-interface"><a href="#2-ReadWriteLock-interface" class="headerlink" title="2 ReadWriteLock interface"></a>2 ReadWriteLock interface</h1><p>A <code>ReadWriteLock</code> maintains <code>a pair of associated locks</code>, <code>one for read-only operations</code> and <code>one for writing</code>. </p>
<ul>
<li>The <code>read lock</code> may be held simultaneously by multiple reader threads, so long as there are no writers. </li>
<li>The <code>write lock</code> is exclusive.</li>
</ul>
<p>All <code>ReadWriteLock</code> implementations must guarantee that the memory synchronization effects of <code>writeLock</code> operations (as specified in the Lock interface) also hold with respect to the associated <code>readLock</code>. That is, a thread successfully acquiring the read lock will see all updates made upon previous release of the write lock.</p>
<p>A read-write lock allows for <code>a greater level of concurrency in accessing shared data</code> than that permitted by a mutual exclusion lock. It exploits the fact that while only a single thread at a time (a writer thread) can modify the shared data, in many cases any number of threads can concurrently read the data (hence reader threads). In theory, the increase in concurrency permitted by the use of a read-write lock will lead to performance improvements over the use of a mutual exclusion lock. In practice this increase in concurrency will only be fully realized on a multi-processor, and then only if the access patterns for the shared data are suitable.</p>
<blockquote>
<p>Whether or not a read-write lock will improve performance over the use<br>of a mutual exclusion lock depends on the frequency that the data is<br>read compared to being modified, the duration of the read and write<br>operations, and the contention for the data - that is, the number of<br>threads that will try to read or write the data at the same time.</p>
<p>For example, a collection that is initially populated with data and<br>thereafter infrequently modified, while being frequently searched<br>(such as a directory of some kind) is an ideal candidate for the use<br>of a read-write lock. However, if updates become frequent then the<br>data spends most of its time being exclusively locked and there is<br>little, if any increase in concurrency. Further, if the read<br>operations are too short the overhead of the read-write lock<br>implementation (which is inherently more complex than a mutual<br>exclusion lock) can dominate the execution cost, particularly as many<br>read-write lock implementations still serialize all threads through a<br>small section of code. Ultimately, only profiling and measurement will<br>establish whether the use of a read-write lock is suitable for your<br>application.</p>
</blockquote>
<p>Although the basic operation of a read-write lock is straight-forward, there are many policy decisions that an implementation must make, which may affect the effectiveness of the read-write lock in a given application. Examples of these policies include:</p>
<ul>
<li>Determining whether to grant the read lock or the write lock, when both readers and writers are waiting, at the time that a writer releases the write lock. Writer preference is common, as writes are expected to be short and infrequent. Reader preference is less common as it can lead to lengthy delays for a write if the readers are frequent and long-lived as expected. Fair, or “in-order” implementations are also possible.</li>
<li>Determining whether readers that request the read lock while a reader is active and a writer is waiting, are granted the read lock. Preference to the reader can delay the writer indefinitely, while preference to the writer can reduce the potential for concurrency.</li>
<li>Determining whether the locks are reentrant: can a thread with the write lock reacquire it? Can it acquire a read lock while holding the write lock? Is the read lock itself reentrant?</li>
<li>Can the write lock be downgraded to a read lock without allowing an intervening writer? Can a read lock be upgraded to a write lock, in preference to other waiting readers or writers?</li>
</ul>
<p>You should consider all of these things when evaluating the suitability of a given implementation for your application.</p>
<h1 id="3-ReentrantLock"><a href="#3-ReentrantLock" class="headerlink" title="3 ReentrantLock"></a>3 ReentrantLock</h1><p>A reentrant mutual exclusion <code>Lock</code> with the same basic behavior and semantics as the implicit monitor lock accessed using <code>synchronized</code> methods and statements, but with extended capabilities.</p>
<p>A<code>ReentrantLock</code> is owned by the thread last successfully locking, but not yet unlocking it. A thread invoking lock will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods <code>isHeldByCurrentThread()</code>, and <code>getHoldCount()</code>.</p>
<p>The constructor for this class accepts <code>an optional fairness parameter</code>. When set <code>true</code>, under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation. Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed <code>tryLock()</code> method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting.</p>
<p>It is recommended practice to always immediately follow a call to lock with a <code>try</code> block, most typically in a before/after construction such as:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();  <span class="comment">// block until condition holds</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// ... method body</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In addition to implementing the Lock interface, this class defines a number of public and protected methods for inspecting the state of the lock. Some of these methods are only useful for instrumentation and monitoring.</p>
<p>Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized.</p>
<h1 id="4-ReentrantReadWriteLock"><a href="#4-ReentrantReadWriteLock" class="headerlink" title="4 ReentrantReadWriteLock"></a>4 ReentrantReadWriteLock</h1><p>An implementation of <code>ReadWriteLock</code> supporting similar semantics to <code>ReentrantLock</code>.<br>This class has the following properties:</p>
<ul>
<li><p>Acquisition order<br>This class does not impose a reader or writer preference ordering for lock access. However, it does support an optional fairness policy.</p>
<ul>
<li><p>Non-fair mode (default)<br>  When constructed as non-fair (the default), the order of entry to the read and write lock is unspecified, subject to reentrancy constraints. A nonfair lock that is continuously contended may indefinitely postpone one or more reader or writer threads, but will normally have higher throughput than a fair lock.</p>
</li>
<li><p>Fair mode<br>  When constructed as fair, threads contend for entry using an approximately arrival-order policy. When the currently held lock is released, either the longest-waiting single writer thread will be assigned the write lock, or if there is a group of reader threads waiting longer than all waiting writer threads, that group will be assigned the read lock.</p>
<p>  A thread that tries to acquire a fair read lock (non-reentrantly) will block if either the write lock is held, or there is a waiting writer thread. The thread will not acquire the read lock until after the oldest currently waiting writer thread has acquired and released the write lock. Of course, if a waiting writer abandons its wait, leaving one or more reader threads as the longest waiters in the queue with the write lock free, then those readers will be assigned the read lock.</p>
<p>  A thread that tries to acquire a fair write lock (non-reentrantly) will block unless both the read lock and write lock are free (which implies there are no waiting threads). (Note that the non-blocking ReentrantReadWriteLock.ReadLock.tryLock() and ReentrantReadWriteLock.WriteLock.tryLock() methods do not honor this fair setting and will immediately acquire the lock if it is possible, regardless of waiting threads.)</p>
</li>
<li><p>Reentrancy<br>  This lock allows both readers and writers to reacquire read or write locks in the style of a ReentrantLock. Non-reentrant readers are not allowed until all write locks held by the writing thread have been released.</p>
<p>  Additionally, a writer can acquire the read lock, but not vice-versa. Among other applications, reentrancy can be useful when write locks are held during calls or callbacks to methods that perform reads under read locks. If a reader tries to acquire the write lock it will never succeed.</p>
</li>
<li><p>Lock downgrading<br>  Reentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible.</p>
</li>
<li><p>Interruption of lock acquisition<br>  The read lock and write lock both support interruption during lock acquisition.</p>
</li>
<li><p><code>Condition</code> support<br>  The write lock provides a <code>Condition</code> implementation that behaves in the same way, with respect to the write lock, as the Condition implementation provided by <code>ReentrantLock.newCondition()</code> does for <code>ReentrantLock</code>. This Condition can, of course, only be used with the write lock.</p>
<p>  The read lock does not support a Condition and readLock().newCondition() throws UnsupportedOperationException.</p>
</li>
<li><p>Instrumentation<br>  This class supports methods to determine whether locks are held or contended. These methods are designed for monitoring system state, not for synchronization control.</p>
</li>
</ul>
</li>
</ul>
<p>Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized.</p>
<p>Sample usages. Here is a code sketch showing how to perform lock downgrading after updating a cache (exception handling is particularly tricky when handling multiple locks in a non-nested fashion):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</div><div class="line">    Object data;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</div><div class="line">    <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</div><div class="line">        rwl.readLock().lock();</div><div class="line">        <span class="keyword">if</span> (!cacheValid) &#123;</div><div class="line">            <span class="comment">// Must release read lock before acquiring write lock</span></div><div class="line">            rwl.readLock().unlock();</div><div class="line">            rwl.writeLock().lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Recheck state because another thread might have</span></div><div class="line">                <span class="comment">// acquired write lock and changed state before we did.</span></div><div class="line">                <span class="keyword">if</span> (!cacheValid) &#123;</div><div class="line">                    data = ...</div><div class="line">                    cacheValid = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// !!! Downgrade by acquiring read lock before releasing write lock !!!</span></div><div class="line">                rwl.readLock().lock();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                rwl.writeLock().unlock(); <span class="comment">// !!! Unlock write, still hold read !!!</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            use(data);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            rwl.readLock().unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ReentrantReadWriteLocks can be used to improve concurrency in some uses of some kinds of Collections. This is typically worthwhile only when <code>the collections are expected to be large</code>, <code>accessed by more reader threads than writer threads</code>, and <code>entail operations with overhead that outweighs synchronization overhead</code>. For example, here is a class using a TreeMap that is expected to be large and concurrently accessed.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RWDictionary</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Data&gt; m = <span class="keyword">new</span> TreeMap&lt;String, Data&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock r = rwl.readLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock w = rwl.writeLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        r.lock();</div><div class="line">        <span class="keyword">try</span> &#123; <span class="keyword">return</span> m.get(key); &#125;</div><div class="line">        <span class="keyword">finally</span> &#123; r.unlock(); &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> String[] allKeys() &#123;</div><div class="line">        r.lock();</div><div class="line">        <span class="keyword">try</span> &#123; <span class="keyword">return</span> m.keySet().toArray(); &#125;</div><div class="line">        <span class="keyword">finally</span> &#123; r.unlock(); &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">put</span><span class="params">(String key, Data value)</span> </span>&#123;</div><div class="line">        w.lock();</div><div class="line">        <span class="keyword">try</span> &#123; <span class="keyword">return</span> m.put(key, value); &#125;</div><div class="line">        <span class="keyword">finally</span> &#123; w.unlock(); &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        w.lock();</div><div class="line">        <span class="keyword">try</span> &#123; m.clear(); &#125;</div><div class="line">        <span class="keyword">finally</span> &#123; w.unlock(); &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="A-More-Typical-Mixed-Usage"><a href="#A-More-Typical-Mixed-Usage" class="headerlink" title="A More Typical Mixed Usage"></a>A More Typical Mixed Usage</h1><p>A mix of synchronized and explicit locks – sometimes one is just cleaner and simpler than the other.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunner</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;Class&lt;? extends Runnable&gt;,  Lock&gt; mLocks = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTaskUniquely</span><span class="params">(Runnable r, <span class="keyword">int</span> secondsToWait)</span> </span>&#123;</div><div class="line">        Lock lock = getLock(r.getClass());</div><div class="line">        <span class="keyword">boolean</span> acquired = lock.tryLock(secondsToWait, TimeUnit.SECONDS);</div><div class="line">        <span class="keyword">if</span> (acquired) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                r.run();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// failure code here</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Lock <span class="title">getLock</span><span class="params">(Class clazz)</span> </span>&#123;</div><div class="line">        Lock l = mLocks.get(clazz);</div><div class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>) &#123;</div><div class="line">            l = <span class="keyword">new</span> ReentrantLock();</div><div class="line">            mLocks.put(clazz, l);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> l;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h1><ul>
<li><blockquote>
<p>Release all locks in finally block! This is rule 1 for a reason!</p>
</blockquote>
</li>
<li><p>Beware of thread starvation! The fair setting in ReentrantLocks may be useful if you have many readers and occasional writers that you don’t want waiting forever. It’s possible a writer could wait a very long time (maybe forever) if there are constantly read locks held by other threads.</p>
</li>
<li>Use synchronized where possible. You will avoid bugs and keep your code cleaner.</li>
<li>Use <code>tryLock()</code> if you don’t want a thread waiting indefinitely to acquire a lock – this is similar to wait lock timeouts that databases have.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - Callable, Future, and FutureTask]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/20/java/concurrency/Java-Concurrency-Callable-Future-and-FutureTask/</url>
      <content type="html"><![CDATA[<h1 id="1-Motivation-Drawbacks-of-Thread-and-Runnable"><a href="#1-Motivation-Drawbacks-of-Thread-and-Runnable" class="headerlink" title="1 Motivation: Drawbacks of Thread and Runnable"></a>1 Motivation: Drawbacks of Thread and Runnable</h1><p>One of the beautiful things about Java from its very first release was the ease with which we could write multi-threaded programs and introduce asynchronous processing into our designs. The <code>Thread</code> class and <code>Runnable</code> interface combined with Java’s memory management model meant for straightforward thread programming.</p>
<blockquote>
<p>But neither the <code>Thread</code> class nor the <code>Runnable</code> interface allowed for thrown Exceptions or returned values. The lack of returned values was mildly annoying.</p>
</blockquote>
<p>The lack of thrown checked exceptions was a little more serious. The contract was <code>public void run()</code> which meant you had to catch checked exceptions and do something with them. Even if you were careful and you stored these for later verification, you couldn’t force all uses of the class to check the exception. You could go through all your getters and throw the <code>Exception</code> if it existed on each one. Besides being cumbersome, even that wasn’t foolproof. You couldn’t enforce calls to any of these. Thread programmers would correctly call <code>join()</code> to wait for it complete and may then have gone on their merry way.</p>
<p>With the introduction of the <code>Callable</code> and <code>Future</code> interfaces and their support in the thread pools, both of these issues have been addressed quite elegantly.</p>
<h1 id="2-Callable-lt-V-gt-interface"><a href="#2-Callable-lt-V-gt-interface" class="headerlink" title="2 Callable&lt;V&gt; interface"></a>2 <code>Callable&lt;V&gt;</code> interface</h1><p>A task that returns a result and may throw an exception. Implementors define a single method with no arguments called <code>public T call() throws Exception</code>. Now we can return a result, have it strongly typed as declared in our implementation and even throw <code>Exceptions</code>. </p>
<p>The <code>Callable</code> interface is similar to <code>Runnable</code>, in that both are designed for classes whose instances are potentially executed by another thread. A <code>Runnable</code>, however, does not return a result and cannot throw a checked exception.</p>
<p>The <code>Executors</code> class contains utility methods to convert from other common forms (like <code>Runnable</code>) to <code>Callable</code> classes, however you would do well to review your current implementations of <code>Runnable</code> or subclasses of <code>Thread</code>. Why bother? Primarily to double check and remove the workaround you may have implemented to address the lack of support for thrown <code>Exceptions</code>. At the same time, you may wish to make use of the ability to return results right in the execution method eliminating any need to cast to retrieve values.</p>
<a id="more"></a>
<h1 id="3-Future-lt-V-gt-interface"><a href="#3-Future-lt-V-gt-interface" class="headerlink" title="3 Future&lt;V&gt; interface"></a>3 <code>Future&lt;V&gt;</code> interface</h1><blockquote>
<p>A <code>Future</code> represents the result of an asynchronous computation.</p>
</blockquote>
<p>Methods are provided to <code>check if the computation is complete</code>, <code>to wait for its completion</code>, and <code>to retrieve the result of the computation</code>. The result can only be retrieved using method <code>V get()</code> when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the <code>boolean cancel(boolean mayInterruptIfRunning)</code> method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a <code>Future</code> for the sake of cancellability but not provide a usable result, you can declare types of the form <code>Future&lt;?&gt;</code> and return <code>null</code> as a result of the underlying task.</p>
<p><code>Future</code> is where the combined power of the <code>thread pools</code> and <code>Callable</code> come together. <code>Future</code> is another new interface introduced in 1.5. When you submit a <code>Callable</code> to one of the thread pools, you are provided an instance of <code>Future</code> that is typed to the <code>Callable</code> you passed in. This object substitutes for an actual <code>Thread</code> instance that you would have used. Whereas you previously had to do Thread.join() or Thread.join(long millis), now you may use them as in this example.</p>
<ul>
<li><code>boolean cancel(boolean mayInterruptIfRunning)</code> Attempts to cancel execution of this task.</li>
<li><code>V get()</code> Waits if necessary for the computation to complete, and then retrieves its result.</li>
<li><code>V get(long timeout, TimeUnit unit)</code> Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.</li>
<li><code>boolean isCancelled()</code> Returns true if this task was cancelled before it completed normally.</li>
<li><code>boolean isDone()</code> Returns true if this task completed.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArchiveSearcher</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">search</span><span class="params">(String target)</span></span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    ExecutorService executor = ...</div><div class="line">    ArchiveSearcher searcher = ...</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showSearch</span><span class="params">(<span class="keyword">final</span> String target)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Future&lt;String&gt; future = executor.submit(</div><div class="line">        	<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">        		<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</div><div class="line">						<span class="keyword">return</span> searcher.search(target);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			);</div><div class="line">    </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String result = future.get(); <span class="comment">// use future</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException ex) &#123;</div><div class="line">        	<span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It’s also nice that we now have explicit <code>TimeoutException</code> if we decide to limit how long we’re willing to wait for completion.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">return</span> future.get(<span class="number">5</span>, TimeUnit.SECONDS); </div><div class="line">	<span class="comment">//this waits for 5 seconds, throwing TimeoutException if not done</span></div><div class="line">&#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">	LOGGER.warn(<span class="string">"Timed out waiting for server check thread. We'll try to interrupt it."</span>);</div><div class="line">	future.cancel(<span class="keyword">true</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> UnresponsiveException(e.getCause());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-Class-FutureTask-lt-V-gt"><a href="#4-Class-FutureTask-lt-V-gt" class="headerlink" title="4 Class FutureTask&lt;V&gt;"></a>4 Class <code>FutureTask&lt;V&gt;</code></h1><p>A cancellable asynchronous computation. This class provides a base implementation of <code>Future</code>, with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed; the <code>get()</code> methods will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled (unless the computation is invoked using <code>runAndReset()</code>).</p>
<p>A <code>FutureTask</code> can be used to wrap a <code>Callable</code> or <code>Runnable</code> object. Because <code>FutureTask</code> class is <code>an implementation of Future</code> that <code>implements Runnable</code>, a <code>FutureTask</code> can be submitted to an <code>Executor</code> for execution. For example, the above construction with submit could be replaced by:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FutureTask&lt;String&gt; future = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">                                                        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">                                                            <span class="keyword">return</span> searcher.search(target);</div><div class="line">                                                        &#125;</div><div class="line">                                                    &#125;);</div><div class="line">executor.execute(future);</div></pre></td></tr></table></figure>
<p>Memory consistency effects: Actions taken by the asynchronous computation happen-before actions following the corresponding Future.get() in another thread.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - BlockingQueue]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/20/java/concurrency/Java-Concurrency-BlockingQueue/</url>
      <content type="html"><![CDATA[<p>Java’s <code>BlockingQueue</code> is a <code>Queue</code> that additionally supports operations that wait for:</p>
<ul>
<li>the queue to become non-empty when retrieving an element</li>
<li>space to become available in the queue when storing an element.</li>
</ul>
<p><code>BlockingQueue</code> methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: </p>
<ul>
<li>one throws an exception</li>
<li>the second returns a special value (either null or false, depending on the operation)</li>
<li>the third blocks the current thread indefinitely until the operation can succeed</li>
<li>and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table:</li>
</ul>
<p>Summary of BlockingQueue methods</p>
<table>
<thead>
<tr>
<th>Throws exception</th>
<th>Special value</th>
<th>Blocks</th>
<th>Times out</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e, time, unit)</td>
</tr>
<tr>
<td>Remove remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time, unit)</td>
</tr>
<tr>
<td>Examine element()</td>
<td>peek()</td>
<td>not applicable</td>
<td>not applicable</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><code>A BlockingQueue does not accept null elements.</code> Implementations throw <code>NullPointerException</code> on attempts to add, put or offer a null. A null is used as a sentinel value to indicate failure of poll operations.</p>
<p>A BlockingQueue may be capacity bounded. At any given time it may have a remainingCapacity beyond which no additional elements can be put without blocking. A BlockingQueue without any intrinsic capacity constraints always reports a remaining capacity of Integer.MAX_VALUE.</p>
<p><code>BlockingQueue implementations are designed to be used primarily for producer-consumer queues</code>, but additionally support the Collection interface. So, for example, it is possible to remove an arbitrary element from a queue using remove(x). However, such operations are in general not performed very efficiently, and are intended for only occasional use, such as when a queued message is cancelled.</p>
<p><code>BlockingQueue implementations are thread-safe.</code> All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the bulk Collection operations addAll, containsAll, retainAll and removeAll are not necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for addAll(c) to fail (throwing an exception) after adding only some of the elements in c.</p>
<p>A BlockingQueue does not intrinsically support any kind of “close” or “shutdown” operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special end-of-stream or poison objects, that are interpreted accordingly when taken by consumers.</p>
<p>Usage example, based on a typical producer-consumer scenario. Note that a BlockingQueue can safely be used with multiple producers and multiple consumers.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue queue;</div><div class="line">    Producer(BlockingQueue q) &#123; queue = q; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; queue.put(produce()); &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123; ... handle ...&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">Object <span class="title">produce</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue queue;</div><div class="line">    Consumer(BlockingQueue q) &#123; queue = q; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; consume(queue.take()); &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123; ... handle ...&#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">(Object x)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Setup</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">        BlockingQueue q = <span class="keyword">new</span> SomeQueueImplementation();</div><div class="line">        Producer p = <span class="keyword">new</span> Producer(q);</div><div class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(q);</div><div class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(q);</div><div class="line">        <span class="keyword">new</span> Thread(p).start();</div><div class="line">        <span class="keyword">new</span> Thread(c1).start();</div><div class="line">        <span class="keyword">new</span> Thread(c2).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a BlockingQueue <code>happen-before</code> actions subsequent to the access or removal of that element from the BlockingQueue in another thread.</p>
<p>This interface is a member of the Java <code>Collections</code> Framework.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leadership - Thinking Strategically as a Software Engineer]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/17/career%20and%20leadership/Leadership-Thinking-Strategically-as-a-Software-Engineer/</url>
      <content type="html"><![CDATA[<p>About a month ago, my manager told me that he has come up with some ideas on how to improve our product by reducing the downtime during a product upgrade (I’m not going to talk about how to do that though :P).</p>
<p>To be honest, I actually have thought about the same idea a long time ago, because our product’s upgrade right has been very painful - it requires a manual unintall accompanied by a full backup taken long time, and then a install of the product in new version and restore of the backup. The process is so time-consuming and painful that we internally have created some scripts to automate this workflow.</p>
<p>I clearly remember I thought of how to improve the upgrade process, but that idea was somehow lost, until my manager brought it up again. When I heard it, it turned out to be such a moment that must have happened to everybody in this industry - “hey! I had the same idea before! I just didn’t do anything to make it happen!”.</p>
<p>I myself am definitely not a guy who is short of motivation. On the contrary, I regard myself as a highly motivated engineer with lots of curiosity and ambition to make things better. One example is that I realized how bad and slow our build and deploy systems were, and have proactively contributed lots of my time to improving them. Before, our systems could only build all Java projects, and I made it able to build every single one; Before, our systems could only deploy all code in serial (yes, all frontend + all backend in serial), and I made it able to deploy not only every server component individually but also all components in parallel (I also made it able to deploy all Java code in parallel!).</p>
<p>So, the question would be - how could a highly motivated guy thought of something big but ended up doing nothing and forgetting his ideas? I believe I really need to do some introspect on this, since my career goal in the foreseeable future is to become a dev manager, and I really need to bring up some big ideas to my team and company to prove myself.</p>
<a id="more"></a>
<p>I summarized three execuses and came up with some solutions and suggestions to overcome each of them in the future:</p>
<ol>
<li><p>Some problems are not in the area which you are most familiar with, and you will get scared of digging deeper to find out more details and solutions.</p>
<p> I don’t usually work with a product installer and an upgrade scenario, so I have to admit I had some fear when estimating efforts required to improve it. We have all run into this situation that, if the issue locates outside your comfort zone and knowledge map, and if you think the required work is way too much or the total amount of work seems hard to estimate, you may just drop your ideas even though they may be brilliant. This is part of our human nature that makes sure we have a good ROI.</p>
<p> I have two suggestions for myself to beat the laziness monster in my body: </p>
<ul>
<li><code>First, learn more and get to know your product more, so the problem can be within your knowledge map, and thus you will have confidence to deal with it</code>. </li>
<li><code>Second, be proactive and try to conduct an initial investigation into it, quantify the workload, and then decide to proceed with it or not based on the quantified results.</code></li>
</ul>
</li>
<li><p>The problem you thought of is not painful enough to push you make improvments on it.</p>
<p> The build system is actually not in my knowledge map, but I ended up learning it and made improvements on it. Why is that? It’s because I had to use the older defected build and deploy systems so frequently that I cannot bear with it. The pain has turned into a force that pushed me to overcome the fearness in my mind, and pushed me to fix the out-dated systems.</p>
<p> My suggestion for myself on this one is:</p>
<ul>
<li><code>Try to measure the impact of a problem which may not even be your business</code>! If you can help solve a problem that has been bothering many other people (it means this problem has a HUGE impact), go ahead and fix it because it will be a great opportunity to advance your career! </li>
</ul>
</li>
</ol>
<ol>
<li><p>Front-line engineers may focus too much on the works in their hands, and lose the whole strategic picture. </p>
<p> As one of the front-line engineer, I have strong feelings that many times I spend too much time on finishing <code>the work assigned to me</code> - thinking about fancy design patterns and every implementation details. I’m not saying that kind of focus is no good. I’m saying <code>only having that kind of focus is not very helpful</code>.</p>
<p> Engineers with bigger ambitions should spare time to raise heads and look around, to find different views, different directions to tackle problems, different levels of understanding our company strategies and our products. This is especially useful if you want to become a dev manager or a tech lead, because such roles require not only advanced individual programming skills, but also a good sense of overall situations. </p>
<p> I have one suggestion for myself on this:</p>
<ul>
<li>Give yourself more time to think bigger picture, rather than only the puzzle given to you. </li>
</ul>
</li>
</ol>
<p>That’s all my thoughts on this particular case. Happy learning!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unit Test - JMockit - Capturing Invocation Arguments for Verification]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/17/test/jmockit/Unit-Test-JMockit-Capturing-Invocation-Arguments-for-Verification/</url>
      <content type="html"><![CDATA[<p>Recently I was pushed into a new world in Java unit test - withCapture(). The main reason for knowing this is that I start to write more and more lambda expressions recently, with Java 9 being adopted in my company.</p>
<p>So I’m writing to explain what kind of problems I ran into and how I dealt with them. Most of the following content is based on <a href="http://jmockit.org/tutorial/Mocking.html#withCapture" target="_blank" rel="external">http://jmockit.org/tutorial/Mocking.html#withCapture</a> and polished by myself to have them make more sense</p>
<h1 id="Capturing-Invocation-Arguments-for-Verification"><a href="#Capturing-Invocation-Arguments-for-Verification" class="headerlink" title="Capturing Invocation Arguments for Verification"></a>Capturing Invocation Arguments for Verification</h1><p>Invocation arguments can be captured for later verification through a set of special <code>withCapture(...)</code> methods. </p>
<p>There are three different cases, each with its own specific capturing method: </p>
<ol>
<li>verification of arguments passed to a mocked method, in a single invocation: T withCapture(); </li>
<li>verification of arguments passed to a mocked method, in multiple invocations: T withCapture(List<t>);</t></li>
<li>verification of arguments passed to a mocked constructor: List<t> withCapture(T).</t></li>
</ol>
<p>Let’s see some demos for each scenario. And here are some base classes, <code>Team</code> being the one we are gonna test. </p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collaborator</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simpleOperation</span><span class="params">(<span class="keyword">int</span> a, String b, BiConsumer&lt;Integer, String&gt; con)</span> </span>&#123; </div><div class="line">        con.accept(a, b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Collaborator c;</div><div class="line">    </div><div class="line">    Team(Collaborator c) &#123;</div><div class="line">        <span class="keyword">this</span>.c = c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> a, String b, BiConsumer&lt;Integer, String&gt; con)</span> </span>&#123; </div><div class="line">        a += <span class="number">1</span>;</div><div class="line">        b += a;</div><div class="line">        c.simpleOperation(a, b, con);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can see that when testing <code>pass()</code> in <code>Team</code>, it’s inevitable to test if variables delivered from <code>pass()</code> to<code>simpleOperation()</code> in <code>Collaborator</code> are accurate. In this following case, we want to check if <code>c</code> actually get the correct <code>a</code> and <code>b</code>.</p>
<p>So, we need <code>withCapture()</code>!</p>
<h2 id="1-Capturing-arguments-from-a-single-invocation"><a href="#1-Capturing-arguments-from-a-single-invocation" class="headerlink" title="1. Capturing arguments from a single invocation"></a>1. Capturing arguments from a single invocation</h2><p>To capture arguments from a single invocation to a mocked method or constructor, we use <code>withCapture()</code>, as the following example test demonstrates.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TeamTests &#123;</div><div class="line">    <span class="meta">@Injectable</span> Collaborator c;</div><div class="line">    </div><div class="line">    Team t;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        t = <span class="keyword">new</span> Team(c);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testASingleInvoation</span><span class="params">()</span> </span>&#123;</div><div class="line">        t.pass(<span class="number">1</span>, <span class="string">"test"</span>, (a, b) -&gt; a + b);</div><div class="line">        </div><div class="line">        <span class="keyword">new</span> Verifications() &#123;&#123;</div><div class="line">            <span class="keyword">int</span> i;</div><div class="line">            String s;</div><div class="line">            c.simpleOperation(i = withCapture(), s = withCapture(), (Date) any);</div><div class="line">            </div><div class="line">            assertEquals(<span class="number">2</span>, i);</div><div class="line">            assertEquals(<span class="string">"test2"</span>, s);</div><div class="line">        &#125;&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>The withCapture() method can only be used in verification blocks.</code> Typically, we use it when a single matching invocation is expected to occur; if more than one such invocation occurs, however, the last one to occur overwrites the values captured by previous ones. It is particularly useful with parameters of a complex type (think a JPA <code>@Entity</code>), which may contain several items whose values need to be checked.</p>
<h2 id="2-Capturing-arguments-from-multiple-invocations"><a href="#2-Capturing-arguments-from-multiple-invocations" class="headerlink" title="2. Capturing arguments from multiple invocations"></a>2. Capturing arguments from multiple invocations</h2><p>If multiple invocations to a mocked method or constructor are expected, and we want to capture values for all of them, then the withCapture(List) method should be used instead, as in the example below.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TeamTests &#123;</div><div class="line">    <span class="meta">@Injectable</span> Collaborator c;</div><div class="line">    </div><div class="line">    Team t;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        t = <span class="keyword">new</span> Team(c);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultipleInvoations</span><span class="params">()</span> </span>&#123;</div><div class="line">        t.passn(<span class="number">1</span>, <span class="string">"test"</span>, (a, b) -&gt; &#123;a + b&#125;);</div><div class="line">        t.pass(<span class="number">2</span>, <span class="string">"tests"</span>, (a, b) -&gt; &#123;a + b&#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">new</span> Verifications() &#123;&#123;</div><div class="line">            List&lt;Integer&gt; i;</div><div class="line">            List&lt;String&gt; s;</div><div class="line">            c.simpleOperation(withCapture(i), withCapture(s), (Date) any);</div><div class="line">            <span class="comment">// Assert size</span></div><div class="line">            assertEquals(<span class="number">2</span>, i.size());</div><div class="line">            assertEquals(<span class="number">2</span>, s.size());</div><div class="line">            </div><div class="line">            <span class="comment">// Assert values</span></div><div class="line">            assertEquals(<span class="number">2</span>, i.get(<span class="number">0</span>));</div><div class="line">            assertEquals(<span class="string">"test2"</span>, s.get(<span class="number">0</span>));</div><div class="line">            assertEquals(<span class="number">3</span>, i.get(<span class="number">1</span>));</div><div class="line">            assertEquals(<span class="string">"test3"</span>, s.get(<span class="number">1</span>));</div><div class="line">        &#125;&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Capturing-new-instances"><a href="#3-Capturing-new-instances" class="headerlink" title="3. Capturing new instances"></a>3. Capturing new instances</h2><p>Finally, we can capture the new instances of a mocked class that got created during the test.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void capturingNewInstances(@Mocked Person mockedPerson) &#123;</div><div class="line">   // From the code under test:</div><div class="line">   dao.create(new Person(&quot;Paul&quot;, 10));</div><div class="line">   dao.create(new Person(&quot;Mary&quot;, 15));</div><div class="line">   dao.create(new Person(&quot;Joe&quot;, 20));</div><div class="line"></div><div class="line">   new Verifications() &#123;&#123;</div><div class="line">      // Captures the new instances created with a specific constructor.</div><div class="line">      List&lt;Person&gt; personsInstantiated = withCapture(new Person(anyString, anyInt));</div><div class="line"></div><div class="line">      // Now captures the instances of the same type passed to a method.</div><div class="line">      List&lt;Person&gt; personsCreated = new ArrayList&lt;&gt;();</div><div class="line">      dao.create(withCapture(personsCreated));</div><div class="line"></div><div class="line">      // Finally, verifies both lists are the same.</div><div class="line">      assertEquals(personsInstantiated, personsCreated);</div><div class="line">   &#125;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rake - Introduction to Rake]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/15/tools/rake/Rake-Introduction-to-Rake/</url>
      <content type="html"><![CDATA[<h1 id="Ruby-code-for-build"><a href="#Ruby-code-for-build" class="headerlink" title="Ruby code for build"></a>Ruby code for build</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'ftools'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_directories</span></span></div><div class="line">  File.makedirs <span class="string">"html"</span></div><div class="line">  File.makedirs <span class="string">"html/images"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_images</span></span></div><div class="line">  File.copy <span class="string">"pics/rake.gif"</span>, <span class="string">"html/images/rake.gif"</span></div><div class="line">  File.copy <span class="string">"pics/target.jpg"</span>, <span class="string">"html/images/target.jpg"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_html</span></span></div><div class="line">  system <span class="string">%&#123;./runwpb rake.wpb&#125;</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span></span></div><div class="line">  make_directories</div><div class="line">  copy_images</div><div class="line">  generate_html</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">build</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Task-Dependencies"><a href="#Task-Dependencies" class="headerlink" title="Task Dependencies"></a>Task Dependencies</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      / Generate HTML \</div><div class="line">Build                   Create Directories</div><div class="line">      \ Copy Images   /</div></pre></td></tr></table></figure>
<h2 id="Task-dependencies-in-a-Rakefile"><a href="#Task-dependencies-in-a-Rakefile" class="headerlink" title="Task dependencies in a Rakefile"></a>Task dependencies in a Rakefile</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task <span class="symbol">:build</span> =&gt; [<span class="symbol">:generate_html</span>, <span class="symbol">:copy_images</span>]</div><div class="line">task <span class="symbol">:generate_html</span> =&gt; [<span class="symbol">:create_directories</span>]</div><div class="line">task <span class="symbol">:copy_images</span> =&gt; [<span class="symbol">:create_directories</span>]</div><div class="line">task <span class="symbol">:create_directories</span></div></pre></td></tr></table></figure>
<h2 id="Building-with-Rake"><a href="#Building-with-Rake" class="headerlink" title="Building with Rake"></a>Building with Rake</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">task <span class="symbol">:build</span> =&gt; [<span class="symbol">:generate_html</span>, <span class="symbol">:copy_images</span>]</div><div class="line"></div><div class="line">task <span class="symbol">:generate_html</span> =&gt; [<span class="symbol">:create_directories</span>] <span class="keyword">do</span></div><div class="line">  system <span class="string">%&#123;./runwpb rake.wpb&#125;</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">task <span class="symbol">:copy_images</span> =&gt; [<span class="symbol">:create_directories</span>] <span class="keyword">do</span></div><div class="line">  File.copy <span class="string">"pics/rake.gif"</span>, <span class="string">"html/images/rake.gif"</span></div><div class="line">  File.copy <span class="string">"pics/target.jpg"</span>, <span class="string">"html/images/target.jpg"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">task <span class="symbol">:create_directories</span> <span class="keyword">do</span></div><div class="line">  File.makedirs <span class="string">"html"</span></div><div class="line">  File.makedirs <span class="string">"html/images"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Tasks-are-like-Functions"><a href="#Tasks-are-like-Functions" class="headerlink" title="Tasks are like Functions"></a>Tasks are like Functions</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test_rake.rake</span></div><div class="line"><span class="comment"># Run with 'rake a'</span></div><div class="line">task <span class="symbol">:a</span> =&gt; [<span class="symbol">:b</span>, <span class="symbol">:c</span>] <span class="keyword">do</span> print <span class="string">"a"</span> <span class="keyword">end</span></div><div class="line">task <span class="symbol">:b</span> =&gt; [<span class="symbol">:d</span>]     <span class="keyword">do</span> print <span class="string">"b"</span> <span class="keyword">end</span></div><div class="line">task <span class="symbol">:c</span> =&gt; [<span class="symbol">:d</span>]     <span class="keyword">do</span> print <span class="string">"c"</span> <span class="keyword">end</span></div><div class="line">task <span class="symbol">:d</span>             <span class="keyword">do</span> print <span class="string">"d"</span> <span class="keyword">end</span></div><div class="line"><span class="comment"># Result: dbca</span></div></pre></td></tr></table></figure>
<h2 id="Warning-Use-do-end"><a href="#Warning-Use-do-end" class="headerlink" title="Warning: Use do/end"></a>Warning: Use do/end</h2><p><code>Actions blocks</code> should be specified using <code>do/end</code>. </p>
<ul>
<li>Rakefile syntax takes advantage of Ruby’s flexible syntax</li>
<li>Using {} for blocks could be ambiguous …</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task :doit =&gt; calc_dependents &#123; actions &#125;</div></pre></td></tr></table></figure>
<p>is parsed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task(:doit =&gt; (calc_dependents &#123; actions &#125;))</div></pre></td></tr></table></figure></p>
<h1 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h1><p>Sometimes you don’t want to write rules for every single file task … so use a rule.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rule <span class="string">'.o'</span> =&gt; [<span class="string">'.c'</span>] <span class="keyword">do</span> <span class="params">|t|</span></div><div class="line">    sh <span class="string">%&#123;cc <span class="subst">#&#123;t.source&#125;</span> -c -o <span class="subst">#&#123;t.name&#125;</span>&#125;</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>When you need to build a file named “main.o”</p>
<ul>
<li>And “main.o” doesn’t exist, But “main.c” does …</li>
<li>Then synthesize a file task to build “main.o” from “main.c”</li>
</ul>
<h2 id="Rule-Limitations"><a href="#Rule-Limitations" class="headerlink" title="Rule Limitations"></a>Rule Limitations</h2><p>Rules will only do <code>one level of inference</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rule <span class="string">".c"</span> =&gt; [<span class="string">".y"</span>] <span class="keyword">do</span> <span class="params">|t|</span> yacc(t.source) <span class="keyword">end</span></div><div class="line">rule <span class="string">".o"</span> =&gt; [<span class="string">".c"</span>] <span class="keyword">do</span> <span class="params">|t|</span> compile_c(t.source) <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>If lex.y exists … Rake will not build lex.c from lex.y and lex.o from lex.c.</p>
<h1 id="Documenting-Tasks"><a href="#Documenting-Tasks" class="headerlink" title="Documenting Tasks"></a>Documenting Tasks</h1><p>Add a <code>desc</code> command before a task to describe it.<br>Use the <code>-T</code> flag to see the described tasks.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">desc &quot;Remove any temporary products&quot;</div><div class="line">task :clean do ... end</div><div class="line"></div><div class="line">desc &quot;Build the presentation&quot;</div><div class="line">task :presentation</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ rake -T</div><div class="line">(in /home/jim/working/doc/talks/buildingwithrake)</div><div class="line">rake archive                       # Copy directory to an archive.</div><div class="line">rake build                         # Build the presentation</div><div class="line">rake clean                         # Remove any temporary products.</div></pre></td></tr></table></figure>
<h1 id="File-Lists"><a href="#File-Lists" class="headerlink" title="File Lists"></a>File Lists</h1><p><code>FileLists</code> are arrays with a few extras</p>
<ul>
<li>sub and sub! supported (no blocks)</li>
<li>add(pattern) will add file matching the glob pattern</li>
</ul>
<h1 id="File-Utils"><a href="#File-Utils" class="headerlink" title="File Utils"></a>File Utils</h1><p>File Commands:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd pwd, mkdir, mkdir_p, rmdir, ln, ln_s, ln_sf, cp, cp_r, mv, rm, rm_r, rm_rf, install, chmod, touch</div></pre></td></tr></table></figure>
<p>Most commands will work with a list of files</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp &quot;file1&quot;, &quot;file2&quot;, &quot;file3&quot;, &quot;destdir&quot;</div></pre></td></tr></table></figure>
<p>Commands can take options</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp &quot;a&quot;, &quot;b&quot;, :verbose=&gt;true, :nowrite=&gt;true</div></pre></td></tr></table></figure>
<h1 id="Extended-File-Utils"><a href="#Extended-File-Utils" class="headerlink" title="Extended File Utils"></a>Extended File Utils</h1><ul>
<li>Functions verbose and nowrite control globally or locally.</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Verbose globally set</span></div><div class="line">verbose(<span class="literal">true</span>)</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Verbose set while executing code</span></div><div class="line">verbose(<span class="literal">true</span>) &#123; code &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Two Commands added to FileUtils:</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Runs an external shell command</span></div><div class="line">sh <span class="string">%&#123;shell command&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Runs an external ruby process</span></div><div class="line">ruby <span class="string">%&#123;ruby command line&#125;</span></div></pre></td></tr></table></figure>
<h1 id="Task-Libraries"><a href="#Task-Libraries" class="headerlink" title="Task Libraries"></a>Task Libraries</h1><ul>
<li>A Task Library <code>defines one or more related rake tasks</code>.</li>
<li>The task library is configured by the user as needed.</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Rake::RDocTask.new &#123; <span class="params">|rdoc|</span></div><div class="line">  rdoc.rdoc_dir = <span class="string">'html'</span></div><div class="line">  rdoc.template = <span class="string">'kilmer'</span></div><div class="line">  rdoc.options &lt;&lt; <span class="string">'--line-numbers'</span></div><div class="line">  rdoc.rdoc_files.add(<span class="string">'README'</span>, <span class="string">'MIT-LICENSE'</span>, <span class="string">'TODO'</span>, <span class="string">'CHANGES'</span>)</div><div class="line">  rdoc.rdoc_files.add(<span class="string">'lib/**/*.rb'</span>, <span class="string">'doc/**/*.rdoc'</span>, <span class="string">'test/*.rb'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Thrift - Detailed Thrift Examples]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/15/distributed%20system/thrift/Apache-Thrift-Detailed-Thrift-Examples/</url>
      <content type="html"><![CDATA[<h1 id="Simple-Thrift-Server-and-Client-Example"><a href="#Simple-Thrift-Server-and-Client-Example" class="headerlink" title="Simple Thrift Server and Client Example"></a>Simple Thrift Server and Client Example</h1><h2 id="1-define-a-service-with-methods-in-a-thrift-file"><a href="#1-define-a-service-with-methods-in-a-thrift-file" class="headerlink" title="1. define a service with methods in a .thrift file"></a>1. define a service with methods in a .thrift file</h2><figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">namespace java server</div><div class="line"></div><div class="line">typedef i64 long</div><div class="line">typedef i32 int</div><div class="line"></div><div class="line">service ArithmeticService &#123;  // defines simple arithmetic service</div><div class="line">    long add(1:int num1, 2:int num2);</div><div class="line"></div><div class="line">    long multiply(1:int num1, 2:int num2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Run-thrift-exe-to-autogenerate-a-corresponding-class-to-the-service"><a href="#2-Run-thrift-exe-to-autogenerate-a-corresponding-class-to-the-service" class="headerlink" title="2. Run thrift .exe to autogenerate a corresponding class to the service,"></a>2. Run thrift .exe to autogenerate a corresponding class to the service,</h2><p>with an interface <code>Iface</code> containing all the methods</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">In</span> Mac/Linux, <span class="built_in">cd</span> to thrift-<span class="number">0</span>.<span class="number">9</span>.<span class="number">2</span> folder</div><div class="line">$ thrift –gen java arithmetic.thrift</div><div class="line">or</div><div class="line">$ "thrift.exe" –gen java arithmetic.thrift</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>The following is generated file by thrift</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"cast"</span>, <span class="string">"rawtypes"</span>, <span class="string">"serial"</span>, <span class="string">"unchecked"</span>&#125;)</div><div class="line"><span class="meta">@Generated</span>(value = <span class="string">"Autogenerated by Thrift Compiler (0.9.2)"</span>, date = <span class="string">"2015-3-10"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> org.apache.thrift.TException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> org.apache.thrift.TException</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncIface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, org.apache.thrift.async.AsyncMethodCallback resultHandler)</span> <span class="keyword">throws</span> org.apache.thrift.TException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, org.apache.thrift.async.AsyncMethodCallback resultHandler)</span> <span class="keyword">throws</span> org.apache.thrift.TException</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure>
<h2 id="3-Write-a-Impl-or-Handler-to-implement-the-Service-Iface-interface-with-method-implementations-The-implementation-and-handler-should-be-on-the-server-side"><a href="#3-Write-a-Impl-or-Handler-to-implement-the-Service-Iface-interface-with-method-implementations-The-implementation-and-handler-should-be-on-the-server-side" class="headerlink" title="3. Write a Impl or Handler to implement the Service.Iface interface with method implementations. The implementation and handler should be on the server side."></a>3. Write a <code>Impl</code> or <code>Handler</code> to implement the <code>Service.Iface</code> interface with method implementations. The implementation and handler should be on the <code>server side</code>.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.thrift.TException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticService</span>.<span class="title">Iface</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> TException </span>&#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> TException </span>&#123;</div><div class="line">        <span class="keyword">return</span> num1 * num2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Write-a-Server-that-initiates-the-following-variants-and-starts-to-listen-to-request"><a href="#4-Write-a-Server-that-initiates-the-following-variants-and-starts-to-listen-to-request" class="headerlink" title="4. Write a Server that initiates the following variants and starts to listen to request:"></a>4. Write a <code>Server</code> that initiates the following variants and starts to listen to request:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TServerSocket(PortNumber)</div><div class="line">Service.Processor&lt;ServiceImpl&gt;(ServiceImpl/ServiceHandler)</div><div class="line">TServer (<span class="keyword">new</span> TServer.Args(TServerSocket).processor(Service.Processor))</div><div class="line">TServer.serve()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TTransportException </span>&#123;</div><div class="line">        TServerSocket serverSocket = <span class="keyword">new</span> TServerSocket(<span class="number">7911</span>);</div><div class="line">        </div><div class="line">        Processor&lt;ArithmeticServiceHandler&gt; processor = <span class="keyword">new</span> Processor&lt;&gt;(<span class="keyword">new</span> ArithmeticServiceHandler());</div><div class="line">        </div><div class="line">        Args options = <span class="keyword">new</span> Args(serverSocket);</div><div class="line">        options.processor(processor)</div><div class="line">        </div><div class="line">        TServer t_server = <span class="keyword">new</span> TSimpleServer(options);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"Starting the simple server..."</span>);</div><div class="line">        </div><div class="line">        t_server.serve();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Write-a-client-that-initiates-the-following-variants-and-connects-to-Server"><a href="#5-Write-a-client-that-initiates-the-following-variants-and-connects-to-Server" class="headerlink" title="5. Write a client that initiates the following variants and connects to Server"></a>5. Write a <code>client</code> that initiates the following variants and connects to <code>Server</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TTransport = TSocket(IP, PortNumber)</div><div class="line">TTransport.open()</div><div class="line">TProtocol(TTransport)</div><div class="line">Service.Client(TProtocol)</div><div class="line">Client calls methods</div><div class="line">TTransport.close()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TException </span>&#123;</div><div class="line">        TTransport t_transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">7911</span>);</div><div class="line">        t_transport.open();</div><div class="line"></div><div class="line">        TProtocol t_protocol = <span class="keyword">new</span> TBinaryProtocol(t_transport);</div><div class="line"></div><div class="line">        ArithmeticService.Client client = <span class="keyword">new</span> ArithmeticService.Client(t_protocol);</div><div class="line"></div><div class="line">        System.out.println(client.add(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line">        System.out.println(client.multiply(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line"></div><div class="line">        t_transport.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Thrift-Multiplexing-Services"><a href="#Thrift-Multiplexing-Services" class="headerlink" title="Thrift Multiplexing Services"></a>Thrift Multiplexing Services</h1><h2 id="Thrift-Multiplexed-Server"><a href="#Thrift-Multiplexed-Server" class="headerlink" title="Thrift Multiplexed Server"></a>Thrift Multiplexed Server</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">TMultiplexedProcessor processor = <span class="keyword">new</span> TMultiplexedProcessor();</div><div class="line"></div><div class="line">processor.registerProcessor(<span class="string">"AddService"</span>,</div><div class="line">                            <span class="keyword">new</span> AddService.Processor(<span class="keyword">new</span> AddHandler()));</div><div class="line">processor.registerProcessor(<span class="string">"MultiplyService"</span>,</div><div class="line">                            <span class="keyword">new</span> MultiplyService.Processor(<span class="keyword">new</span> MultiplyHandler()));</div><div class="line"></div><div class="line">TServerTransport serverTransport = <span class="keyword">new</span> TServerSocket(<span class="number">7911</span>);</div><div class="line"></div><div class="line">TServer.Args args = <span class="keyword">new</span> TServer.Args(serverTransport);</div><div class="line">args.processor(processor);</div><div class="line"></div><div class="line">TTransportFactory factory = <span class="keyword">new</span> TFramedTransport.Factory();</div><div class="line">args.transportFactory(factory);</div><div class="line"></div><div class="line">TSimpleServer server = <span class="keyword">new</span> TSimpleServer(args);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"Starting server on port 7911 ..."</span>);</div><div class="line">server.serve();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// official thrift example</span></div><div class="line"></div><div class="line">TSocket transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">9090</span>);</div><div class="line">TBinaryProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);</div><div class="line">transport.open();</div><div class="line"></div><div class="line">TMultiplexedProtocol mp = <span class="keyword">new</span> TMultiplexedProtocol(protocol, <span class="string">"Calculator"</span>);</div><div class="line">Calculator.Client service = <span class="keyword">new</span> Calculator.Client(mp);</div><div class="line"></div><div class="line">TMultiplexedProtocol mp2 = <span class="keyword">new</span> TMultiplexedProtocol(protocol, <span class="string">"WeatherReport"</span>);</div><div class="line">WeatherReport.Client service2 = <span class="keyword">new</span> WeatherReport.Client(mp2);</div><div class="line"></div><div class="line">System.out.println(service.add(<span class="number">2</span>,<span class="number">2</span>));</div><div class="line">System.out.println(service2.getTemperature());</div></pre></td></tr></table></figure>
<h2 id="Thrift-Multiplexed-Client"><a href="#Thrift-Multiplexed-Client" class="headerlink" title="Thrift Multiplexed Client"></a>Thrift Multiplexed Client</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">TSocket transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">9090</span>);</div><div class="line">transport.open();</div><div class="line"></div><div class="line">TBinaryProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);</div><div class="line"></div><div class="line">TMultiplexedProtocol mp = <span class="keyword">new</span> TMultiplexedProtocol(protocol, <span class="string">"Calculator"</span>);</div><div class="line">Calculator.Client service = <span class="keyword">new</span> Calculator.Client(mp);</div><div class="line"></div><div class="line">TMultiplexedProtocol mp2 = <span class="keyword">new</span> TMultiplexedProtocol(protocol, <span class="string">"WeatherReport"</span>);</div><div class="line">WeatherReport.Client service2 = <span class="keyword">new</span> WeatherReport.Client(mp2);</div><div class="line"></div><div class="line">System.out.println(service.add(<span class="number">2</span>,<span class="number">2</span>));</div><div class="line">System.out.println(service2.getTemperature());</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Singleton]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/15/best%20practices/design%20pattern/Design-Pattern-Singleton/</url>
      <content type="html"><![CDATA[<p>##Eager Initialization</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton s = <span class="keyword">new</span> Singleton();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##Lazy Initialization</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Thread-safe version</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// For thread-safty purpose</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>)</div><div class="line">            s = <span class="keyword">new</span> Singleton();</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Use-“double-checked-locking”-to-reduce-the-use-of-synchronization-in-getInstance"><a href="#Use-“double-checked-locking”-to-reduce-the-use-of-synchronization-in-getInstance" class="headerlink" title="Use “double-checked locking” to reduce the use of synchronization in getInstance()"></a>Use “double-checked locking” to reduce the use of synchronization in getInstance()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Thread-safe version</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span>(s == <span class="keyword">null</span>) &#123;</div><div class="line">                    s = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Adapter Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Adapter-Pattern/</url>
      <content type="html"><![CDATA[<p><code>Adapter Pattern</code> is a software design pattern that <code>allows the interface of an existing class to be used from another interface</code>. It is often used to make existing classes work with others without modifying their source code.</p>
<p>An adapter helps two incompatible interfaces to work together. Adapter pattern works as a bridge between two incompatible interfaces. This is the real world definition for an adapter. Interfaces may be incompatible but the inner functionality should suit the need. The Adapter design pattern allows otherwise incompatible classes to work together by converting the interface of one class into an interface expected by the clients.</p>
<p>This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvancedMediaPlayer</span> </span>&#123;	</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span></span>;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VlcPlayer</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Playing vlc file. Name: "</span>+ fileName);		</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">      <span class="comment">//do nothing</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mp4Player</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">      <span class="comment">//do nothing</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Playing mp4 file. Name: "</span>+ fileName);		</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PlayerType &#123;</div><div class="line">    Vlc(<span class="string">"vlc"</span>), Mp4(<span class="string">"mp4"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaAdapter</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">   AdvancedMediaPlayer advancedMusicPlayer;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MediaAdapter</span><span class="params">(PlayerType audioType)</span></span>&#123;</div><div class="line">      <span class="keyword">if</span>(audioType == PlayerType.Vlc)&#123;</div><div class="line">         advancedMusicPlayer = <span class="keyword">new</span> VlcPlayer();			</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (audioType == PlayerType.mp4))&#123;</div><div class="line">         advancedMusicPlayer = <span class="keyword">new</span> Mp4Player();</div><div class="line">      &#125;	</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(audioType == PlayerType.Vlc)&#123;</div><div class="line">         advancedMusicPlayer.playVlc(fileName);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(audioType == PlayerType.mp4)&#123;</div><div class="line">         advancedMusicPlayer.playMp4(fileName);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</div><div class="line">   MediaAdapter mediaAdapter; </div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(StringPlayerType audioType, String fileName)</span> </span>&#123;</div><div class="line">      <span class="comment">//inbuilt support to play mp3 music files</span></div><div class="line">      <span class="keyword">if</span>(audioType == PlayerType.Mp3)&#123;</div><div class="line">         System.out.println(<span class="string">"Playing mp3 file. Name: "</span> + fileName);			</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(audioType == PlayerType.Vlc || audioType == PlayerType.Mp4)&#123;</div><div class="line">         <span class="comment">//mediaAdapter is providing support to play other file formats</span></div><div class="line">         mediaAdapter = <span class="keyword">new</span> MediaAdapter(audioType);</div><div class="line">         mediaAdapter.play(audioType, fileName);</div><div class="line">      &#125; <span class="keyword">else</span>&#123;</div><div class="line">         System.out.println(<span class="string">"Invalid media. "</span> + audioType + <span class="string">" format not supported"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPatternDemo</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      AudioPlayer audioPlayer = <span class="keyword">new</span> AudioPlayer();</div><div class="line"></div><div class="line">      audioPlayer.play(<span class="string">"mp3"</span>, <span class="string">"beyond the horizon.mp3"</span>);</div><div class="line">      audioPlayer.play(<span class="string">"mp4"</span>, <span class="string">"alone.mp4"</span>);</div><div class="line">      audioPlayer.play(<span class="string">"vlc"</span>, <span class="string">"far far away.vlc"</span>);</div><div class="line">      audioPlayer.play(<span class="string">"avi"</span>, <span class="string">"mind me.avi"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Decorator Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Decorator-Pattern/</url>
      <content type="html"><![CDATA[<ul>
<li><code>Decorator Pattern</code> is used to add additional features or behaviors to a particular instance of a class, while not modifying the other instances of same class.</li>
<li>Decorators provide a flexible alternative to sub-classing for extending functionality. </li>
<li>Please note that the description above implies that decorating an object changes its behavior but not its interface.</li>
<li>This pattern is designed so that multiple decorators can be stacked on top of each other, each time adding a new functionality to the overridden method(s).</li>
</ul>
<h2 id="A-typical-diagram-of-decorator-pattern-looks-like-this"><a href="#A-typical-diagram-of-decorator-pattern-looks-like-this" class="headerlink" title="A typical diagram of decorator pattern looks like this."></a>A typical diagram of decorator pattern looks like this.</h2><p><img src="http://howtodoinjava.com/wp-content/uploads/decorator-design-pattern-participants.png" alt="decorator pattern"></p>
<p>This wrapping could be achieved by the following sequence of steps:</p>
<ol>
<li>Subclass the original “Component” class into a “Decorator” class (see UML diagram);</li>
<li>In the Decorator class, add a Component pointer as a field;</li>
<li>Pass a Component to the Decorator constructor to initialize the Component pointer;</li>
<li>In the Decorator class, redirect all “Component” methods to the “Component” pointer; and</li>
<li>In the ConcreteDecorator class, override any Component method(s) whose behavior needs to be modified.</li>
</ol>
<ul>
<li>Component - this is the wrapper which can have additional responsibilities associated with it at runtime.</li>
<li>ConcreteComponent - is the original object to which the additional responsibilities are added in program.</li>
<li>Decorator - this is an abstract class which contains a reference to the component object and also implements the component interface.</li>
<li>ConcreteDecorator - they extend the decorator and builds additional functionality on top of the Component class.</li>
</ul>
<blockquote>
<p>You have an instance, and you put another instance inside of it. They<br>both support the same (or similar) interfaces. The one on the outside<br>is a “decorator.” You use the one on the outside. It either masks,<br>changes, or pass-troughs the methods of the instance inside of it.</p>
</blockquote>
<h3 id="1-Difference-between-decorator-pattern-and-Adapter-pattern"><a href="#1-Difference-between-decorator-pattern-and-Adapter-pattern" class="headerlink" title="1 Difference between decorator pattern and Adapter pattern"></a>1 Difference between decorator pattern and Adapter pattern</h3><ul>
<li>Adapter Pattern is used to convert the interface of an object into something else. </li>
<li>Decorator Pattern is used to extend the functionality of an object while maintaining its interface. </li>
</ul>
<p>Both of these are probably sometimes called Wrapper Pattern since both of them do “wrap” an object.</p>
<h3 id="2-Difference-between-a-DecoratorPattern-and-Subclassing"><a href="#2-Difference-between-a-DecoratorPattern-and-Subclassing" class="headerlink" title="2 Difference between a DecoratorPattern and Subclassing"></a>2 Difference between a DecoratorPattern and Subclassing</h3><ul>
<li>In subclassing you can decorate any class that implements an interface “with a single class”. Say I wanted to give myself a java.util.Map that printed a message whenever I added or removed a key. If I only ever actually used java.util.HashMap I could just create PrintingMap? as a subclass of HashMap and override put &amp; remove. But if I want to create a printing version of TreeMap then I either create PrintingTreeMap? (which has almost identical code to PrintingMap?</li>
</ul>
<h2 id="Common-usage-of-decorator-pattern"><a href="#Common-usage-of-decorator-pattern" class="headerlink" title="Common usage of decorator pattern:"></a>Common usage of decorator pattern:</h2><p>Java iO library classes e.g. BufferedInputStream bs = new BufferedInputStream(new FileInputStream(new File(“File1.txt”)));</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>The following Java example illustrates the use of decorators using the window/scrolling scenario.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The Window interface class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Window</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>; <span class="comment">// Draws the Window</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>; <span class="comment">// Returns a description of the Window</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Extension of a simple Window without any scrollbars</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWindow</span> <span class="keyword">implements</span> <span class="title">Window</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Draw window</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"simple window"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The following classes contain the decorators for all Window classes, including the decorator classes themselves.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// abstract decorator class - note that it implements Window</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowDecorator</span> <span class="keyword">implements</span> <span class="title">Window</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Window windowToBeDecorated; <span class="comment">// the Window being decorated</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowDecorator</span> <span class="params">(Window windowToBeDecorated)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.windowToBeDecorated = windowToBeDecorated;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        windowToBeDecorated.draw(); <span class="comment">//Delegation</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> windowToBeDecorated.getDescription(); <span class="comment">//Delegation</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The first concrete decorator which adds vertical scrollbar functionality</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalScrollBarDecorator</span> <span class="keyword">extends</span> <span class="title">WindowDecorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VerticalScrollBarDecorator</span> <span class="params">(Window windowToBeDecorated)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(windowToBeDecorated);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.draw();</div><div class="line">        drawVerticalScrollBar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDescription() + <span class="string">", including vertical scrollbars"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVerticalScrollBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Draw the vertical scrollbar</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The second concrete decorator which adds horizontal scrollbar functionality</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HorizontalScrollBarDecorator</span> <span class="keyword">extends</span> <span class="title">WindowDecorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollBarDecorator</span> <span class="params">(Window windowToBeDecorated)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(windowToBeDecorated);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.draw();</div><div class="line">        drawHorizontalScrollBar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDescription() + <span class="string">", including horizontal scrollbars"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHorizontalScrollBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Draw the horizontal scrollbar</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here’s a test program that creates a Window instance which is fully decorated (i.e., with vertical and horizontal scrollbars), and prints its description:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratedWindowTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// Create a decorated Window with horizontal and vertical scrollbars</span></div><div class="line">        Window decoratedWindow = <span class="keyword">new</span> HorizontalScrollBarDecorator (</div><div class="line">                <span class="keyword">new</span> VerticalScrollBarDecorator (<span class="keyword">new</span> SimpleWindow()));</div><div class="line"></div><div class="line">        <span class="comment">// Print the Window's description</span></div><div class="line">        System.out.println(decoratedWindow.getDescription());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Below is the JUnit test class for the Test Driven Development</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowDecoratorTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWindowDecoratorTest</span><span class="params">()</span> </span>&#123;</div><div class="line">		Window decoratedWindow = <span class="keyword">new</span> HorizontalScrollBarDecorator(<span class="keyword">new</span> VerticalScrollbarDecorator(<span class="keyword">new</span> SimpleWindow()));</div><div class="line">		</div><div class="line">        System.out.println(decoratedWindow.getDescription());</div><div class="line">        <span class="comment">// "simple window, including vertical scrollbars, including horizontal scrollbars"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Proxy Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Proxy-Pattern/</url>
      <content type="html"><![CDATA[<p>In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern.</p>
<p>In proxy pattern, we create object having original object to interface its functionality to outer world.</p>
<p>The following Java example illustrates the “virtual proxy” pattern. The <code>ProxyImage</code> class is used to access a remote method.</p>
<p>The example creates first an interface against which the pattern creates the classes. This interface contains only one method to display the image, called <code>displayImage()</code>, that has to be coded by all classes implementing it.</p>
<p>The proxy class <code>ProxyImage</code> is running on another system than the real image class itself and can represent the real image <code>RealImage</code> over there. The image information is accessed from the disk. Using the proxy pattern, the code of the <code>ProxyImage</code> avoids multiple loading of the image, accessing it from the other system in a memory-saving manner. </p>
<blockquote>
<p>It should be noted, however, that the lazy loading demonstrated in this example is not part of the proxy pattern, but is merely an advantage made possible by the use of the proxy.</p>
</blockquote>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Notice that both RealImage and ProxyImage implement the same interface</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//on System A, the real system that handles data</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String filename = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(<span class="keyword">final</span> String filename)</span> </span>&#123; </div><div class="line">        <span class="keyword">this</span>.filename = filename;</div><div class="line">        loadImageFromDisk();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImageFromDisk</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Loading   "</span> + filename);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// The same method</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span> </span>&#123; </div><div class="line">        System.out.println(<span class="string">"Displaying "</span> + filename); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//on System B, a remote proxy/system used to access data remotely </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> RealImage image = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> String filename = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(<span class="keyword">final</span> String filename)</span> </span>&#123; </div><div class="line">        <span class="keyword">this</span>.filename = filename; </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// The same method</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Lazy loading, an advantage brought by Proxy Pattern</span></div><div class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</div><div class="line">           image = <span class="keyword">new</span> RealImage(filename);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        image.displayImage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyExample</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Image IMAGE1 = <span class="keyword">new</span> ProxyImage(<span class="string">"HiRes_10MB_Photo1"</span>);</div><div class="line">        <span class="keyword">final</span> Image IMAGE2 = <span class="keyword">new</span> ProxyImage(<span class="string">"HiRes_10MB_Photo2"</span>);</div><div class="line"> </div><div class="line">        IMAGE1.displayImage(); <span class="comment">// loading necessary</span></div><div class="line">        </div><div class="line">        IMAGE1.displayImage(); <span class="comment">// loading unnecessary</span></div><div class="line">        </div><div class="line">        IMAGE2.displayImage(); <span class="comment">// loading necessary</span></div><div class="line">        </div><div class="line">        IMAGE2.displayImage(); <span class="comment">// loading unnecessary</span></div><div class="line">        </div><div class="line">        IMAGE1.displayImage(); <span class="comment">// loading unnecessary</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The program’s output is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Loading   HiRes_10MB_Photo1</div><div class="line">Displaying HiRes_10MB_Photo1</div><div class="line"></div><div class="line">Displaying HiRes_10MB_Photo1</div><div class="line"></div><div class="line">Loading   HiRes_10MB_Photo2</div><div class="line">Displaying HiRes_10MB_Photo2</div><div class="line"></div><div class="line">Displaying HiRes_10MB_Photo2</div><div class="line"></div><div class="line">Displaying HiRes_10MB_Photo1</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Strategy Pattern - Program to an interface, not an implementation]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Strategy-Pattern-Program-to-an-interface-not-an-implementation/</url>
      <content type="html"><![CDATA[<h2 id="Dependency-Inversion-Principles"><a href="#Dependency-Inversion-Principles" class="headerlink" title="Dependency Inversion Principles"></a>Dependency Inversion Principles</h2><ul>
<li>No variable should hold a reference to a concrete class</li>
<li>No class should derive from a concrete class</li>
<li>No method should override an implemented method of any of its base classes</li>
</ul>
<h2 id="Design-Principles"><a href="#Design-Principles" class="headerlink" title="Design Principles:"></a>Design Principles:</h2><pre><code>1. Identify the aspects of your application that vary and separate them from what stays the same
2. Program to an interface, not an implementation
</code></pre><p>The word <code>interface</code> is overloaded here. There’s the concept of interface, but there’s also the Java construct <code>interface</code>. You can <code>program to an interface</code>, without having to actually use a Java <code>interface</code>. The point is to exploit polymorphism by programming to a supertype so that the actual runtime object isn’t blocked into the code. </p>
<p>We could rephrase <code>program to a supertype</code> as </p>
<blockquote>
<p>the declared type of the variables should be a supertype, usually an<br><code>abstract class</code> or <code>interface</code>, so that the objects assigned to those<br>variables can be of any concrete implementation of the supertype,<br>which means the class declaring them doesn’t have to know about the<br>actual object types!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Animal</div><div class="line">-   makeSound()</div><div class="line"></div><div class="line">Dog</div><div class="line">-   makeSound() &#123;</div><div class="line">        bark();</div><div class="line">    &#125;</div><div class="line">-   bark() &#123;<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">Cat</div><div class="line">-   makeSound() &#123;</div><div class="line">        meow();</div><div class="line">    &#125;</div><div class="line">-   meow() &#123;<span class="comment">//&#125;</span></div></pre></td></tr></table></figure>
<h3 id="Current-Design-version-1"><a href="#Current-Design-version-1" class="headerlink" title="Current Design - version 1"></a>Current Design - version 1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Intefaces</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFlyBehavior</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQuackBehavior</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Implementations</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">IFlyBehavior</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// fly with wings!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWya</span> <span class="keyword">implements</span> <span class="title">IFlyBahavior</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">IQuackBehavior</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// quack</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">IQuackBehavior</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// squeak</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">IQuackBehavior</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Classes</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">    IFlyBehavior flyBehavior;</div><div class="line">    IQuackBehavior quackBahavior;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</div><div class="line">        flyBahavior.fly();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</div><div class="line">        quackBahavior.quack();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Strategy Pattern</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(IFlyBehavior f)</span> </span>&#123;</div><div class="line">        flyBehavior = f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(IQuackBehavior q)</span> </span>&#123;</div><div class="line">        quackBahavior = q;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Add-setXxx-method-to-apply-Strategy-Pattern"><a href="#Add-setXxx-method-to-apply-Strategy-Pattern" class="headerlink" title="Add setXxx() method to apply Strategy Pattern"></a>Add setXxx() method to apply Strategy Pattern</h3><p>the <code>strategy pattern</code> is a software design pattern that enables an algorithm’s behavior to be selected at runtime. The strategy pattern</p>
<ul>
<li>defines a family of algorithms,</li>
<li>encapsulates each algorithm, and</li>
<li>makes the algorithms interchangeable within that family.</li>
</ul>
<h2 id="Design-Principles-1"><a href="#Design-Principles-1" class="headerlink" title="Design Principles:"></a>Design Principles:</h2><pre><code>1. Favor composition over inheritance
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Command Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Command-Pattern/</url>
      <content type="html"><![CDATA[<ul>
<li><p>The goal of this pattern is to <code>encapsulate method invocation</code></p>
<ul>
<li>I.e., decouple the class that is invoking a method from the method itself</li>
<li>The invoker has no knowledge of what the invoked method does or how the method accomplishes its task</li>
</ul>
</li>
<li><p>This will allow a class to execute actions without knowing anything about them</p>
</li>
<li><p>Encapsulating method invocation will facilitate addition and removal of methods<br>from our handler</p>
</li>
<li><p>There are 4 types of objects involved:</p>
<ol>
<li><code>Command</code><br> – This encapsulates the method invocation<br> – We’ll use an interface from which all Commands inherit<br> – It contains a single method - execute - that carries out a particular task</li>
<li><code>Client</code><br> – Creates a command object for a given task</li>
<li><code>Invoker</code><br> – Commands are assigned to the Invoker by the Clients that create the Commands<br> – Receives requests for a task to be performed<br> – Carries out task by invoking the execute method of the Command</li>
<li><code>Receiver</code><br> – Object that actually carries out a task<br> – This is the object that knows all the steps required</li>
</ol>
</li>
</ul>
<h2 id="Uses"><a href="#Uses" class="headerlink" title="Uses"></a>Uses</h2><ul>
<li>GUI buttons and menu items </li>
<li>Parallel Processing</li>
<li>Thread pools</li>
</ul>
<h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g"></a>e.g</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The Command interface */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** The Command for turning on the light - ConcreteCommand #1 */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlipUpCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> Light theLight;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FlipUpCommand</span><span class="params">(Light light)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.theLight = light;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span>    <span class="comment">// Command</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">      theLight.turnOn();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** The Command for turning off the light - ConcreteCommand #2 */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlipDownCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> Light theLight;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FlipDownCommand</span><span class="params">(Light light)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.theLight = light;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span>    <span class="comment">// Command</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">      theLight.turnOff();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The Invoker class */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> List&lt;Command&gt; history = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeAndExecute</span><span class="params">(Command cmd)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.history.add(cmd); <span class="comment">// optional </span></div><div class="line">      cmd.execute();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The Receiver class */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"The light is on"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"The light is off"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The test class or Client */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PressSwitch</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="comment">// Receiver </span></div><div class="line">        Light lamp = <span class="keyword">new</span> Light();</div><div class="line">        </div><div class="line">        <span class="comment">// Command</span></div><div class="line">        Command switchUp = <span class="keyword">new</span> FlipUpCommand(lamp);</div><div class="line">        Command switchDown = <span class="keyword">new</span> FlipDownCommand(lamp);</div><div class="line">        </div><div class="line">        <span class="comment">// Invoker</span></div><div class="line">        Switch mySwitch = <span class="keyword">new</span> Switch();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(args[<span class="number">0</span>]) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"ON"</span>:</div><div class="line">                mySwitch.storeAndExecute(switchUp);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"OFF"</span>:</div><div class="line">                mySwitch.storeAndExecute(switchDown);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                System.err.println(<span class="string">"Argument \"ON\" or \"OFF\" is required."</span>);</div><div class="line">                System.exit(-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Observer Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Observer-Pattern/</url>
      <content type="html"><![CDATA[<h1 id="Keeping-your-Objects-in-the-know-Observer-Pattern"><a href="#Keeping-your-Objects-in-the-know-Observer-Pattern" class="headerlink" title="Keeping your Objects in the know - Observer Pattern"></a>Keeping your Objects in the know - Observer Pattern</h1><blockquote>
<p>Publishers + Subscribers = Observer Pattern</p>
<p><code>Observer Pattern</code> defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.</p>
<p>The key idea is that your <code>Subject</code> will maintain a set of <code>Observers</code> who want to know events happening to <code>Subject</code>. <code>Subject</code> should notify and update all <code>Observers</code> after each observed action by calling <code>Observers&#39;</code> cooresponding methods</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">interface Subject              ---&gt;             interface Observer</div><div class="line">    - registerObserver()                            - update()</div><div class="line">    - removeObserver()</div><div class="line">    - notifyObserver()</div><div class="line">    </div><div class="line">        /\                                              /\</div><div class="line">         |                                               |</div><div class="line"></div><div class="line">ConcreateSubject                &lt;---            ConcreteObserver</div><div class="line">    - registerObserver() &#123;&#125;                         - update()</div><div class="line">    - removeObserver() &#123;&#125;                           - other Observer specific methods </div><div class="line">    - notifyObserver() &#123;&#125;</div><div class="line"></div><div class="line">    - getState()</div><div class="line">    - setState()</div></pre></td></tr></table></figure>
<p>E.g.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// interfaces</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Implementations</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Observers&gt; observers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        observers.add(o);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</div><div class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>) &#123;</div><div class="line">            observers.remove(o);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observers.size(); i ++) &#123;</div><div class="line">            observers.get(i).update(temperature, humidity, pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> h, <span class="keyword">float</span> p)</span> </span>&#123;</div><div class="line">        temperature = t;</div><div class="line">        humidity = h;</div><div class="line">        pressure = p;</div><div class="line">        notifyObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">    <span class="keyword">private</span> Subject weatherData;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject w)</span> </span>&#123;</div><div class="line">        weatherData = w;</div><div class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> h, <span class="keyword">float</span> p)</span> </span>&#123;</div><div class="line">        temperature = t;</div><div class="line">        humidity = h;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        WeatherData w = <span class="keyword">new</span> WeatherData();</div><div class="line">        </div><div class="line">        CurrentConditionDisplay c = <span class="keyword">new</span> CurrentConditionDisplay(w);</div><div class="line">        StatisticsDisplay s = <span class="keyword">new</span> StatisticsDisplay(w);</div><div class="line">        ForecastDisplay f = <span class="keyword">new</span> ForecastDisplay(w);</div><div class="line">        </div><div class="line">        w.serMeasurements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">        w.setMeasurements(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Java-built-in-Observer-Pattern"><a href="#Java-built-in-Observer-Pattern" class="headerlink" title="Java built-in Observer Pattern"></a>Java built-in Observer Pattern</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cache - Design a cache with inspiration from Guava Cache]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/14/system%20design/cache/Cache-Design-a-cache-with-inspiration-from-Guava-Cache/</url>
      <content type="html"><![CDATA[<h2 id="Cache-Design-Google-Guava"><a href="#Cache-Design-Google-Guava" class="headerlink" title="Cache Design - Google Guava"></a>Cache Design - Google Guava</h2><ol>
<li>Cache Heating<ul>
<li><code>Pre-loading</code> v.s. <code>Non-loading</code></li>
</ul>
</li>
<li>Concurrency<ul>
<li>Lock striping (a couple of locks for different key segments)</li>
<li>ReadWriteLock</li>
</ul>
</li>
<li>Weak keys<ul>
<li>What if the cache keys are transient objects (e.g. requests), which don’t belong in the cache if there are no other references elsewhere?</li>
<li>Allow the garbage collector to immediately collect cache keys when other references are gone</li>
</ul>
</li>
<li>Eviction<ul>
<li>Passive<ul>
<li>cache max size</li>
<li>cache max weight</li>
</ul>
</li>
<li>Active<ul>
<li>time to idle - expireAfterAccess()</li>
<li>time to live - expireAfterWrite()</li>
</ul>
</li>
<li>Order<ul>
<li>LRU (Least Recently Used Cache)<ul>
<li>HashMap + DoublyLinkedList</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Two layer caching (L1 + L2 cache)</li>
<li>Cache statistics &amp; performance tuning<ul>
<li>Enable cache runtime configuration<ul>
<li>change max size/weight</li>
</ul>
</li>
<li>Statistics<ul>
<li>Hit rate/ hit count</li>
<li>Miss rate/ miss count</li>
<li>Load exception count</li>
<li>Load success count</li>
<li>Average load penalty</li>
<li>Total load time</li>
</ul>
</li>
</ul>
</li>
<li>RemovalNotification<ul>
<li>Sometimes cached entries are associated with resources which need to be closed or cleaned up</li>
</ul>
</li>
<li>Refresh<ul>
<li><code>Automatic Refresh</code> v.s. <code>Passive Visit-triggered Refresh</code></li>
<li><code>Asynchronized</code> v.s. <code>Synchronized</code></li>
<li><code>Bulk Operation</code> v.s. <code>Single entry</code></li>
</ul>
</li>
<li>Snapshot &amp; iterating<ul>
<li>cache changes dynamically</li>
<li>define asMap() to make a snapshot</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123; </div><div class="line">	<span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span></span>; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Naive-LRU-Cache-O-N-operation"><a href="#Naive-LRU-Cache-O-N-operation" class="headerlink" title="Naive LRU Cache - O(N) operation"></a>Naive LRU Cache - O(N) operation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get O(N)</span></div><div class="line"><span class="comment">// put O(N)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</div><div class="line">	<span class="keyword">private</span> Queue&lt;K&gt; queue;</div><div class="line">	<span class="keyword">private</span> Map&lt;K, V&gt; map;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">		capacity = c;</div><div class="line">		queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;K&gt;();</div><div class="line">		map = <span class="keyword">new</span> ConcurrentHashMap&lt;K, V&gt;(capacity);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            <span class="comment">// When getting an element, re-arrange the sequence</span></div><div class="line">            queue.remove((Integer) key);</div><div class="line">            queue.add(key);</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> map.get(key);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(key == <span class="keyword">null</span> || value == <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(map.containsKey(key))&#123;</div><div class="line">			queue.remove(key);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(queue.size() &gt;= capacity)&#123;</div><div class="line">			K expiredKey = queue.poll();</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(expiredKey != <span class="keyword">null</span>)&#123;</div><div class="line">				map.remove(expiredKey);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		queue.add(key);</div><div class="line">		map.put(key, value);</div><div class="line">		<span class="comment">// printMapQueue();</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">		map.clear();</div><div class="line">		queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;K&gt;();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Advanced-LRU-Cache-O-1-operation"><a href="#Advanced-LRU-Cache-O-1-operation" class="headerlink" title="Advanced LRU Cache - O(1) operation"></a>Advanced LRU Cache - O(1) operation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Use a doubly linked list</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    K key;</div><div class="line">    V value;</div><div class="line">    Node&lt;V&gt; next;</div><div class="line">    Node&lt;V&gt; prev;</div><div class="line">    </div><div class="line">    <span class="comment">// assume getters / setters / constructors / whatever you need</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// get O(1)</span></div><div class="line"><span class="comment">// put O(1)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line">    <span class="keyword">private</span> Node&lt;V&gt; head, end;</div><div class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;V&gt;&gt; map;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        capacity = c;</div><div class="line">        head = <span class="keyword">new</span> Node&lt;V&gt;();</div><div class="line">        end = head;</div><div class="line">        map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            Node n = map.get(key);</div><div class="line">            n.prev.next = n.next;</div><div class="line">            end.next = n;</div><div class="line">            end = end.next;</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> map.get(key).getValue();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        Node n = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            n = map.get(key);</div><div class="line">            n.prev.next = n.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(map.size() &gt;= capacity) &#123;</div><div class="line">            n = head.next;</div><div class="line">            head.next = n.next;</div><div class="line">            </div><div class="line">            map.remove(n.getKey());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Node newn = <span class="keyword">new</span> Node(key, value); </div><div class="line">        end.next = newn;</div><div class="line">        end = end.next;</div><div class="line">        map.put(key, newn);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java - Java Basics]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/08/java/Java-Java-Basics/</url>
      <content type="html"><![CDATA[<p>‘a’ 字符数据<br>“a” 字符串数据</p>
<p>强制类型转换  eg：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;</div><div class="line">b = (<span class="keyword">byte</span>)(b+<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h2 id="Method-Overload-函数的重载"><a href="#Method-Overload-函数的重载" class="headerlink" title="Method Overload 函数的重载"></a>Method Overload 函数的重载</h2><ul>
<li>同一个类中</li>
<li>同名函数</li>
<li><strong>参数个数</strong>或者<strong>参数类型</strong>不同即可</li>
<li><em>函数重载与返回值类型无关</em></li>
</ul>
<h2 id="Stack-Memory-and-Heap-Memory-栈内存和堆内存"><a href="#Stack-Memory-and-Heap-Memory-栈内存和堆内存" class="headerlink" title="Stack Memory and Heap Memory 栈内存和堆内存"></a>Stack Memory and Heap Memory 栈内存和堆内存</h2><blockquote>
<ul>
<li><code>栈内存 (Stack Memory)</code>: 存储局部变量，该变所属的作用域一旦结束，该变量就自动释放</li>
</ul>
</blockquote>
<ul>
<li><p><code>堆内存 (Heap Memory)</code>: 存储数组和对象（其实数组就是对象），凡是new生成的都存放在堆内存中</p>
<ul>
<li>特点：</li>
</ul>
<ol>
<li>每一个实体都有首地址值  </li>
<li>堆内存中的每一个变量都有默认初始化值</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Person p = new Person()</div><div class="line"></div><div class="line">  stack                 heap</div><div class="line">--------------|---------------------------</div><div class="line">   | p |      |      |Person|</div><div class="line">--------------|---------------------------</div><div class="line"></div><div class="line">    |                Person object</div><div class="line">    |</div><div class="line">    --------------------&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Person[99] p = new Person[99];</div><div class="line"></div><div class="line"></div><div class="line">  stack                 heap</div><div class="line"></div><div class="line"></div><div class="line">                     ref of Person     Person objects</div><div class="line">                      |</div><div class="line">                     \/</div><div class="line">--------------|-------------------------------------------------</div><div class="line">  | p |       |      | | | | | |          |Person|    |Person|     |Person| </div><div class="line">--------------|-------------------------------------------------</div><div class="line">                        |  |</div><div class="line">    |                |  |  -------------------------------------------&gt;</div><div class="line">    |                |  ---------------------------------&gt;</div><div class="line">    -------------&gt;   -----------------------&gt;</div></pre></td></tr></table></figure>
<p><strong>reference of Person should be one by one<br>while Person objects do not need to be one by one</strong></p>
<p>##对象 Object</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    String color;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"run"</span>+num+color);    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Car c = <span class="keyword">new</span> Car();</div><div class="line">        c.n = <span class="number">1</span>;</div><div class="line">        c.color = <span class="string">"red"</span>;</div><div class="line">        c.run();</div><div class="line"></div><div class="line">        Car c2 = <span class="keyword">new</span> Car();</div><div class="line">        show(c2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Car c)</span></span>&#123;</div><div class="line">        sop(<span class="string">"show"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##匿名对象  Anonymous Object<br>没有名字的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Car(); <span class="comment">//匿名对象，其实就是定义对象的简写格式</span></div><div class="line"><span class="keyword">new</span> Car().num = <span class="number">5</span>;</div><div class="line"><span class="keyword">new</span> Car().color=<span class="string">"green"</span>;</div><div class="line"><span class="keyword">new</span>.Car().run();</div></pre></td></tr></table></figure>
<p>匿名对象可以作为实际参数传递</p>
<p>##封装 Encapsulation<br>指隐藏对象的属性和实现细节，仅对外提供公共访问方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//私有</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(age&gt;<span class="number">0</span> &amp;&amp; age&lt;<span class="number">150</span>)</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            sop(<span class="string">"wrong data"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        p.setAge(<span class="number">40</span>);</div><div class="line">        sop(p.getAge());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装的好处：</p>
<ul>
<li>提高安全性</li>
<li>将变化隔离</li>
<li>便于使用</li>
</ul>
<p>##构造函数 Constructor<br>构造函数即创建对象时调用的函数，创建对象都必须通过构造函数初始化<br>一个类中如果没有定义构造函数，那么该类中会有一个默认的空参构造函数；<br>如果在类中定义了指定的构造函数，那么类中的默认构造函数就没有了，所以必须自己写一个默认构造函数，否则compiler会报错  </p>
<p>特点：</p>
<ul>
<li>函数与类名相同</li>
<li>不用定义返回值类型</li>
<li>没有具体的返回值</li>
</ul>
<p>作用： 对对象进行初始化</p>
<p>注意：</p>
<ol>
<li>默认构造函数的特点</li>
<li>多个构造函数是以重载 (overload) 的形式存在的 </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    Person()&#123;</div><div class="line">        name = <span class="string">"default"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person(String name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person(String name, <span class="keyword">int</span> age)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Person p1 = <span class="keyword">new</span> Person();</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"p2"</span>);</div><div class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"p3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##this 关键字<br>当局部变量与成员变量重名时，用this关键字区分</p>
<p><strong>this 代表当前对象，this就是所在函数所属对象的引用。简单地说，哪个对象调用了this所在的函数，this就代表哪个对象。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    Person()&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="string">"default"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person(String name)&#123;</div><div class="line">        <span class="keyword">this</span>();</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Person(String name, <span class="keyword">int</span> age)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##static 关键字 </p>
<ol>
<li>static是一个修饰符（modifier），用于修饰成员，称为静态变量</li>
<li><strong>static修饰的成员被所在类的所有对象共享</strong></li>
<li><strong>static variables 静态变量先于对象存在</strong></li>
<li>static修饰的成员多了一种调用方式   类名.静态成员</li>
<li><strong>static修饰的数据是共享数据，对象中存储的是特有的数据</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    String name; <span class="comment">//实例变量，or 成员变量</span></div><div class="line">    <span class="keyword">static</span> String country = <span class="string">"CN"</span>; <span class="comment">//类变量，or静态变量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(country+name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        sop(p.country);</div><div class="line">        sop(Person.country);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>成员变量和静态变量的区别</strong></p>
<ol>
<li><p>生命周期不同<br> 成员变量随着对象的创建而存在，随着对象的被回收而释放<br> 静态变量随着类的加载而存在，随着类的消失而消失  </p>
</li>
<li><p>调用方式不同</p>
</li>
<li><p>别名不同<br> 成员变量称为实例变量<br> 静态变量称为类变量</p>
</li>
<li><p>数据存储的位置不同<br> 成员变量数据存储在<strong>堆内存</strong>中<br> 静态变量数据存储在<strong>方法区（的静态区）</strong>中</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">static</span> String country = <span class="string">"CN"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(Person.country+<span class="keyword">this</span>.name);</div><div class="line">    &#125;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Person.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###静态使用的注意事项</p>
<ol>
<li><strong>静态方法只能访问静态变量（非静态方法可访问静态和非静态变量）</strong></li>
<li><strong>静态方法中不可以使用this或者super关键字</strong></li>
<li>主函数是静态的</li>
</ol>
<p>###主函数的特殊之处</p>
<ol>
<li>格式固定</li>
<li>被JVM所识别和调用</li>
</ol>
<p>public： 权限最大<br>static：不需要对象，直接调用主函数所属类名即可调用<br>void：主函数没有具体的返回值<br>main：函数名，不是关键字，一个被JVM识别的固定名称<br>String[] args： 主函数参数列表，是一个数组类型的参数，而且元素都是字符串类型  </p>
<p>###静态什么时候用？</p>
<ol>
<li>静态变量： 当对象中所具备的成员变量的值都相同时</li>
<li>静态函数： 函数是否用静态修饰就参考一点——该函数功能是否访问到了对象中的特有数据  </li>
</ol>
<p>##静态代码块 staic block<br><strong>随着类的加载而执行，而且只执行一次</strong></p>
<p>作用： 用于给类进行初始化（用的不多）  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticCodes</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="comment">//静态代码块</span></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        n=<span class="number">1</span>;</div><div class="line">        sop(<span class="string">"hello world"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"show run"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        StaticCodes.show();</div><div class="line">        <span class="comment">//输出结果   hello world      show run</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##继承 Inheritance </p>
<p>继承的优点：  </p>
<ul>
<li>提高代码复用性</li>
<li>让类与类之间产生关系，给多态提供了前提</li>
</ul>
<p>java只支持单继承，不直接支持多继承</p>
<p>java支持多层（多重）继承</p>
<p>什么时候定义继承？<br>当类与类之间存在所属关系（is a）的时候，就定义继承</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Student s = <span class="keyword">new</span> Student();</div><div class="line">        s.name = <span class="string">"1"</span>;</div><div class="line">        s.age = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###在子父类中，成员特点的体现    <br></p>
<p>###1. 成员变量 member variables<br>   当本类的成员和局部变量同名，用this区分<br>   当子父类中的成员变量重名，用super区分</p>
<p>this和super用法很相似：<br>this代表当前对象的引用<br>super代表当前对象的父类的空间  </p>
<p><strong>子类不能直接访问父类中的私有内容，必须在父类中定义public getXxx()方法，然后子类用super.getXxx()方法调用</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="keyword">this</span>.n+<span class="string">" "</span>+<span class="keyword">super</span>.n); <span class="comment">//输出 5  4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###2. 成员函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"dad"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"son"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Son s = <span class="keyword">new</span> Son();</div><div class="line">        s.show1(); <span class="comment">//output: dad</span></div><div class="line">        s.show2(); <span class="comment">//output: son</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当子父类中出现成员函数一模一样的情况，会运行子类的函数，这称为<strong>覆盖(override)</strong>，这是函数在子父类中的特性</p>
<hr>
<p>函数的两个特性  </p>
<ol>
<li>重载 —— 同一类中  </li>
<li>覆盖 —— 在子类中</li>
</ol>
<p>**覆盖注意事项：  </p>
<ol>
<li>子类方法覆盖父类方法时，子类权限必须要大于等于父类权限  </li>
<li>静态只能覆盖静态**  </li>
</ol>
<p>什么时候用覆盖？<br>当对一个类进行子类的扩展时，子类需要保留父类的功能声明，但要定义子类中该功能的特有内容时，就用覆盖。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"phone"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smartphone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.show();</div><div class="line">        sop(<span class="string">"smartphone"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###3. 子父类的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">    </div><div class="line">    Person(<span class="keyword">int</span> age)&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;    </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person(<span class="keyword">int</span> age, String name)&#123;</div><div class="line">        <span class="keyword">this</span>(age);</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line">    String id;</div><div class="line"></div><div class="line">    Student(<span class="keyword">int</span> age, String name, String id)&#123;</div><div class="line">        <span class="keyword">super</span>(age, name);</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">``` java  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    Dad()&#123;</div><div class="line">        sop(<span class="string">"1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Dad(<span class="keyword">int</span> x)&#123;</div><div class="line">        sop(<span class="string">"2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    Son()&#123;</div><div class="line">        <span class="comment">//super;  隐式语句，调用的是父类中空参的构造函数</span></div><div class="line">        sop(<span class="string">"3"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Son(<span class="keyword">int</span> x)&#123;</div><div class="line">        <span class="comment">//super;  隐式语句，调用的是父类中空参的构造函数</span></div><div class="line">        sop(<span class="string">"4"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Son(<span class="number">5</span>); <span class="comment">//输出   1  4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在子类构造对象时，发现访问子类构造函数时，父类也运行了，原因是：子类的构造函数中第一行有一个默认的隐式语句： super();</strong>  </p>
<p><strong>子类的实例化过程，子类中多有的构造函数都默认会访问父类中的空参数的构造函数</strong>  </p>
<p><strong>为什么子类实例化的时候要访问父类中的构造函数？<br>因为子类继承了父类，获取到了父类中的内容（属性），所以在使用父类内容之前，要先看父类是如何对自己的内容进行初始化的</strong>  </p>
<p><strong>如果父类中没有定义空参构造函数，那么子类的构造函数必须用super明确要调用的父类中的哪个构造函数</strong>  </p>
<p><strong>同时子类构造函数中如果使用this调用了本类构造函数时，那么super就没有了，因为super和this都只能定义第一行，所以只能有一个。但是可以保证的是，子类中肯定会有其他的构造函数访问父类的构造函数</strong>  </p>
<p><strong>注意：super语句必须要定义在子类构造函数的第一行，因为父类的初始化动作必须先完成</strong>  </p>
<p>##一个对象的实例化过程<br>1，JVM读取指定路径下的Person.class文件，加载进内存，并会先加载Person的父类（如果有直接父类）<br>2，在对内存中开辟空间，分配地址<br>3，在对象空间中，对对象中的属性进行默认初始化<br>4，调用对应的构造函数进行初始化<br>5，在构造函数中，第一行会先调用父类中的构造函数进行初始化<br>6，父类初始化完毕后，再对子类的属性进行显示初始化<br>7，再进行子类构造函数的特定初始化<br>8，初始化完毕后，将地址值赋值给引用变量  </p>
<p>##final 关键字<br>继承的弊端：打破了封装性</p>
<p>1，final是一个修饰符，可以修饰类、方法、变量<br>2，<strong>final修饰的类不可以被继承</strong><br>3，<strong>final修饰的方法不可以被覆盖</strong><br>4，final修饰的变量是一个常量，只能赋值一次  </p>
<p>为什么要用final修饰变量，其实在程序中如果一个数据是固定的，那么直接就用这个数据就可以了，但是这样阅读性差，这个变量的值不能变化，所以加上final固定</p>
<p>写法规定：常量所有字母都大写，中间用_隔开</p>
<p>##抽象类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>; <span class="comment">//注意！没有&#123;&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roar</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roar</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"dog"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roar</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"cat"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###抽象类的特点<br>1，方法只有声明没有实现时，是抽象方法，需要被abstract修饰<br>      <strong>抽象方法必须定义在抽象类中，该类必须被abstract修饰</strong>  </p>
<p>2，抽象类不能被实例化，不能用new创建对象    </p>
<p>3，<strong>抽象类必须由其子类覆盖了所有抽象方法后，该子类才能实例化，否则，该子类还是抽象类</strong>  </p>
<p>1，<strong>抽象类中有构造函数么？     有，用于给子类初始化</strong>  </p>
<p>2，<strong>抽象类可以不定义抽象方法么？  可以，但少见</strong>，目的是不让该类创建对象，AWT的适配器对象就是这种类<br>通常这个类中的方法有方法体，但是却没有内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="comment">//与void show(); 有本质区别</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3，抽象关键字不可以与哪些关键字共存？<br>private   不行   -&gt;  不能覆盖<br>static    不行<br>final     不行   -&gt;  不能覆盖<br>public    可以</p>
<p>4，<strong>抽象类和一般类的异同点<br>相同点：都用来描述事物，都在内部定义成员<br>不同点：<br>1）一般类有足够的信息描述事物 &lt;-&gt; 抽象类描述事物的信息可能不足<br>2）一般类中不能定义抽象方法，只能定义非抽象方法 &lt;-&gt; 抽象类中可定义抽象方法，同时也可定义非抽象方法<br>3）一般类可以被实例化 &lt;-&gt; 抽象类不可以被实例化</strong>  </p>
<p>5，抽象类一定是父类吗？<br>是的，因为需要子类覆盖其方法后才可以对子类实例化  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*雇员示例：</span></div><div class="line">需求：</div><div class="line">- 公司中程序员有姓名，工号，薪水，工作内容</div><div class="line">- 项目经理除此之外还有奖金</div><div class="line">- 对给出的需求进行数据建模</div><div class="line"></div><div class="line">分析：</div><div class="line">在此问题领域中，先找出涉及的对象。通过名词提炼法：</div><div class="line">程序员：  </div><div class="line">属性：姓名，工号，薪水 </div><div class="line">行为：工作</div><div class="line"></div><div class="line">经理：</div><div class="line">属性：姓名，工号，薪水，奖金</div><div class="line">行为：工作</div><div class="line"></div><div class="line">程序员和经理不存在直接的继承关系，但程序员和经理却具有共性内容。可以进行抽取，建立体系，因为他们都是公司职员 */</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</div><div class="line">    </div><div class="line">    Employee(String name. String id, <span class="keyword">double</span> salary)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.salary = salary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</div><div class="line">    Programmer(String name, String id, <span class="keyword">double</span> salary)&#123;</div><div class="line">        <span class="keyword">super</span>(name, id, salary);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"programmer work"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> doubel bonus;</div><div class="line"></div><div class="line">    Manager(String name, String id, <span class="keyword">double</span> salary, <span class="keyword">double</span> bonus)&#123;</div><div class="line">        <span class="keyword">super</span>(name, id, salary);</div><div class="line">        <span class="keyword">this</span>.bonus = bonus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"manager work"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##接口 Interface</p>
<p>当一个抽象类中的方法都是抽象的时候，可以将该抽象类用另一种形式定义和表示，即接口（interface）</p>
<p><strong>定义接口的关键字不是class，是interface，但编译以后还是class，interface只是换了一种表述方式</strong></p>
<p>对于接口中常见的成员，都有固定的修饰符  </p>
<ol>
<li><strong>全局常量  public static final</strong>  </li>
<li><strong>抽象方法  public abstract</strong><br>由此得出结论，接口中的成员都是公共的权限</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> n =<span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>类与类是继承关系，类与接口是实现关系</strong><br><strong>接口不可以实例化，只能由实现了接口的子类并覆盖了接口中所有抽象方法后，该子类才可以实例化</strong>  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">dE</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        D d = <span class="keyword">new</span> D();</div><div class="line">        sop(d.n); <span class="comment">//三种方式都对</span></div><div class="line">        sop(D.n);</div><div class="line">        sop( .n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在java中不支持多继承，因为会出现调用的不确定性，所以java将多继承机制进行改良，变为多实现。<br>一个类可以实现多个接口  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AB</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span></span>&#123; <span class="comment">//multiple implementation</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//override the method1() function in A and B</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###接口的特点  features of interface<br>1，接口是对外暴露的规则<br>2，接口是程序的功能扩展<br>3，接口的出现降低耦合性   reduces coupling<br>4，接口可以用来多实现     multiple implementations</p>
<p>###接口与抽象类的异同<br>相同点： abstract from lower levels to upper levels</p>
<p>不同点：  </p>
<ol>
<li>抽象类需要被继承，只能单继承  an abstract class has to be inherited, and only single inheritance is allowed<br>接口需要被实现，可以多实现  an interface has to be implemented, and multiple implementations are allowed</li>
</ol>
<p>2.<strong>抽象类中可以定义抽象方法和非抽象方法</strong>，子类继承后，可以直接使用非抽象方法<br>  <strong>an abstract class can contain abstract methods and non-abstract methods.</strong> When a subclass inherits a abstract class, the subclass can use non-abstract methods directly </p>
<p>  接口中只能定义抽象方法，必须由子类去实现<br>  an interface can only contain abstract methods, and all these abstract methods have to be implemented by subclass</p>
<p>3.抽象类的继承是 is a 关系，定义该体系的基本共性内容<br>  inheritance from an abstract class is an “is a” relationship, it defines the common content of the inheritance system</p>
<p>  接口的实现是 like a 关系，定义体系的额外功能<br>  implementation of an interface is a “like a” relationship, it defines extra functions of the system</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roar</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">class</span> <span class="title">Navi</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navi</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Navidog</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Navi</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roar</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navi</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##多态 polymorphism</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;&#125;</div><div class="line"></div><div class="line">Animal c = <span class="keyword">new</span> Cat();</div></pre></td></tr></table></figure>
<p><strong>Cat这类事物既具备了Cat的形态，又具备了Animal的形态，这就是对象的多态性<br>简单说，就是一个对象对应着不同类型<br>多态在代码中的体现：父类或者接口的引用指向其子类的对象</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"啃骨头"</span>);</div><div class="line">    &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookHome</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"看家"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"吃鱼"</span>);</div><div class="line">    &#125;</div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"抓老鼠"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"饲料"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gongDi</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"拱地"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poly</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Animal a = <span class="keyword">new</span> Cat(); </div><div class="line">        <span class="comment">/* </span></div><div class="line">           自动类型提升，猫对象提升为动物类型。我们可以访问Animal和Cat的共有方法，</div><div class="line">        由于Cat对Aminal中的方法进行了覆盖，所以实际是运行Cat中的方法但是cat的特有</div><div class="line">        方法无法访问。向上转型的作用就是限制对特有功能的访问。专业讲：向上转型。将子</div><div class="line">        类型隐藏，就不能使用子类的特有方法。</div><div class="line">        */</div><div class="line">        a.eat();  <span class="comment">//output: 吃鱼</span></div><div class="line"></div><div class="line">        <span class="comment">//如果还想用具体动物猫的特有功能，你可以将该对象进行类型强转，向下转型。</span></div><div class="line">        Cat c = (Cat)a;  <span class="comment">//向下转型的目的是为了使用子类中的特有方法</span></div><div class="line">        c.eat();  <span class="comment">//output: 吃鱼</span></div><div class="line">        c.catchMouse();</div><div class="line"> </div><div class="line">        <span class="comment">//注意：对于转型，自始自终都是子类对象在做着类型的变化。</span></div><div class="line">        Animal a1 = <span class="keyword">new</span> Dog();</div><div class="line">        Cat c1 = (Cat)a1;  <span class="comment">//会抛异常ClassCastException</span></div><div class="line">   &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Animal a)</span></span>&#123;  <span class="comment">//Animal a = new Dog()</span></div><div class="line">        a.eat();</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat) &#123;  </div><div class="line">              <span class="comment">/*</span></div><div class="line">                  instanceof：用于判断对象的具体类型。只能用于引用数据类型判断。</div><div class="line">              通常在向下转型前用于健壮性的判断 </div><div class="line">              */</div><div class="line">              Cat c = (Cat)a;</div><div class="line">              c.catchMouse();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)&#123;</div><div class="line">                Dog d = (Dog)a;</div><div class="line">                d.lookHome();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        &#125; </div><div class="line">    &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>instanceof  用于判断对象的具体类型</strong>  </p>
<p>向下转型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line"></div><div class="line">A a =  <span class="keyword">new</span> B();</div><div class="line">B b = (B) b;</div></pre></td></tr></table></figure></p>
<p><strong>多态的好处：提高了代码的扩展性，前期定义的代码可以使用后期的内容<br>多态的弊端：前期代码不能使用（调用）后期子类的特有内容</strong></p>
<p><strong>多 态 的 前 提<br>1，必须有关系：继承或实现<br>2，要有覆盖</strong></p>
<p>###多 态 时，成 员 的 特 点<br>1，成员变量：<strong>了解即可</strong><br>     编译时，参考引用型变量所属的类中是否有调用的成员变量，有，编译通过；没有，编译失败<br>     运行时，参考引用型变量所属的类中是否有调用的成员变量，并运行该所属类中的成员变量<br>     简单说，编译和运行都参考等号左边的类型<br>      <strong>即 Fu f=new Zi(); 属于Fu类</strong>   </p>
<p>2，<strong>成员函数（非静态）：非常重要！</strong><br>     编译时，参考引用型变量所属的类中是否有调用的函数，有，编译通过；没有，编译失败<br>     运行时，参考的是对象所属的类中是否有调用的函数<br>     简单地说，<strong>编译看左边，运行看右边</strong></p>
<p>3，静态函数<br>     编译时，参考引用型变量所属的类中是否有调用的成员    变量<br>     运行时，参考引用型变量所属的类中是否有调用的成员变量<br>     简单说，编译和运行都参考等号左边的类型<br>     其实对于静态方法，不需要对象，直接用类名调用就行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"Dad"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"Dad static"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Dad</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"Son"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"Son static"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poly</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Dad d=<span class="keyword">new</span> Son(); <span class="comment">//d是Dad类的实例</span></div><div class="line">        sop(d.num);      <span class="comment">//结果是1！</span></div><div class="line">        d.show();        <span class="comment">//结果是Son，是因为覆盖，但Dad中必须有show()才能通过编译</span></div><div class="line">        d.method();      <span class="comment">//结果是Dad static，不需要，因为直接用Dad.method() 或 Son.method()就行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##内部类 inner class</p>
<p>内 部 类 访 问 特 点<br><strong>1，内部类可以直接访问外部类中的成员<br>2，外部类要访问内部类，必须建立内部类对象</strong><br>     <strong>例子：铁扇公主与孙悟空</strong></p>
<p>一般用于类的设计<br>分析事物时，发现该事物描述中还有事物，而且这个事物还在访问被描述事物的内容，这时就把还有的事物定义为内部来描述  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//内部类</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</div><div class="line">            sop(<span class="string">"show1 run"</span>+n);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/*  如果内部类中定义了静态成员，该内部类也必须是静态的</span></div><div class="line">        static void show2()&#123;</div><div class="line">            sop("show2 run"+n);</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        Inner in = <span class="keyword">new</span> Inner();</div><div class="line">        in.method1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Outer o = <span class="keyword">new</span> Outer();</div><div class="line">        out.method();  <span class="comment">//直接访问外部类中的内部类中的成员</span></div><div class="line">        </div><div class="line">        Outer.Inner i1 = <span class="keyword">new</span> Outer().new Inner();</div><div class="line">        in.show();  <span class="comment">//通过创建内部类访问内部类中的成员</span></div><div class="line"></div><div class="line">        <span class="comment">//如果内部类是静态的，其就相当于一个外部类</span></div><div class="line">        Outer.Inner i2 = <span class="keyword">new</span> Outer.Inner();</div><div class="line">        in.show();</div><div class="line">        </div><div class="line">        <span class="comment">//如果内部类是静态的，成员是静态的</span></div><div class="line">        Outer.Inner.show2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为什么内部类能直接访问外部类中的成员呢？</strong><br><strong>因为内部类持有了外部类的引用 —— 外部类名.this</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">4</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">int</span> n = <span class="number">5</span>;</div><div class="line">            sop(Outer.<span class="keyword">this</span>.n); <span class="comment">//输出 3</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Inner().show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Outer().method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部类可以存放在局部位置上<br><strong>内部类在局部位置上只能访问局部中被final修饰的局部变量</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> x = <span class="number">9</span>;</div><div class="line">    </div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"Inner..."</span> + x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Object in = <span class="keyword">new</span> Inner();</div><div class="line">        <span class="keyword">return</span> in;  <span class="comment">//0x0045</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Outer out = <span class="keyword">new</span> Outer();</div><div class="line">        Object obj = out.method();</div><div class="line">        sop(obj);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###匿名内部类  Anonymous Inner Classes<br>匿名内部类——就是内部类的简写形式<br>必须有前提：内部类必须继承或者实现一个外部类或者接口</p>
<p>匿名内部类：其实就是一个匿名子类对象<br>格式：new superclass/interface(){ }</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abst</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">4</span>;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">Abst</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">            sop(<span class="string">"show..."</span>+n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Inner().show();</div><div class="line">        <span class="comment">//或者</span></div><div class="line">        <span class="keyword">new</span> Abst()&#123;  <span class="comment">// anonymous inner class</span></div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">                sop(<span class="string">"show..."</span>+n);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Outer().method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interf</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Interf</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        Interf i = <span class="keyword">new</span> Interf()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        i.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>通常使用场景之一<br>当函数参数是接口类型时，而且接口中的方法不超过三个，可以用匿名内部类作为实际参数进行传递</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        sop(<span class="string">"Hello World!"</span>);</div><div class="line"></div><div class="line">        show(<span class="keyword">new</span> Interf()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Interf i)</span></span>&#123;</div><div class="line">        i.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        Object obj = <span class="keyword">new</span> Object()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">                sop(<span class="string">"show run"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        obj.show(); <span class="comment">//因为匿名内部类这个子类对象被向上转型为了Object类，这样就不能使用子类特有的方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Outer().method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##对象初始化<br><img src="https://raw.github.com/phoenixjiangnan/phoenixjiangnan.github.com/master/images/2013-01/object-initialization.png">  <img src="https://raw.github.com/phoenixjiangnan/phoenixjiangnan.github.com/master/images/2013-01/object-initialization2.png"> </p>
<p>##异 常 Exception<br>异常：是在运行时期发生的不正常的情况  </p>
<p>在java中用类的形式对不正常情况进行了描述和封装对象<br>描述不正常的情况的类，就成为异常类 Exception</p>
<p>以前：正常流程代码和问题处理代码相结合<br>现在：将正常流程代码和问题处理代码分离，提高阅读性</p>
<p>其实异常就是java通过面向对象的思想将问题封装成了对象，用异常类进行描述。问题很多，意味着描述的类也很多，将其共性进行向上抽取，形成了异常体系</p>
<p>###不正常情况分为两大类<br>1，一般不可处理的 Error 是由JVM抛出的严重性的问题，一般不针对性处理，直接修改程序<br>2，可处理的  Exception<br>该体系的特点在于Throwable及其所有的子类都具有可抛性 Throwable -&gt;  通过两个关键字来体现  throws   throw 凡是被两个关键字所操作的类和对象都具备可抛型</p>
<p>该体系的特点：子类的后缀名都是用其父类名作为后缀，阅读性很强<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinusIndexException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line">    MinusIndexException()&#123;&#125;</div><div class="line">    MinuxIndexException(String msg)&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span>[]arr. <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> MinusIndexException</span>&#123;</div><div class="line">        <span class="keyword">if</span>(arr==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"数组为空"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arr.length&lt;=index)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayOutOfBoundsException(<span class="string">"数组角标越界"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MinusIndexException(<span class="string">"角标为副"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> arr[index];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MinusIndexException</span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">        </div><div class="line">          d = <span class="keyword">new</span>  ();</div><div class="line">        <span class="keyword">int</span> n =  d.method(<span class="keyword">null</span>,-<span class="number">30</span>);</div><div class="line">        d.method(arr,<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###异常抛出过程<br><img src="https://raw.github.com/phoenixjiangnan/phoenixjiangnan.github.com/master/images/2013-01/throw-exception.png"></p>
<p>###异 常 的 分 类<br><strong>1，编译时被检测异常 :<br>exception that will be detected during compiling：</strong>  </p>
<p>只要是Exception及其子类都是，除了特殊子类RuntimeException体系<br>这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式，因为这类问题都可以针对性的处理</p>
<p><strong>2，编译时不检测异常（运行时异常）<br>exception that won’t be detected during compiling :</strong>  </p>
<p>就是Exception中的RuntimeException及其子类<br>这种问题的发生无法让功能继续，运算无法进行，更多是因为调用的原因导致的，或者引发了内部状态的改变导致的<br>这种问题一般不处理，直接编译通过，让调用者调用时的程序强制停止，让调用者对代码进行修改</p>
<p>所以自定义异常时，须继承Exception或RuntimeException</p>
<p><strong>throws和throw的区别<br>1，throws使用在函数上；throw使用在函数内<br>2，throws抛出的是异常类，可以抛出多个，用逗号隔开；throw抛出的是异常对象</strong></p>
<p>###自定义异常  user-defined exception<br>按照java异常的创建思想，面向对象，进行自定义描述，并封装成对象  </p>
<p>注意：如果让一个类成为异常类，必须要继承异常体系，因为只有成为异常体系的子类才有资格具备可抛型，才可以被两个关键字所操作  throws   throw  </p>
<p>###异常捕捉<br>异常处理的捕捉形式：对异常进行针对性处理的方式</p>
<p>格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">    //需要被检测异常的代码    </div><div class="line">&#125;catch(异常类  变量)&#123;   //该变量用于接收发生的异常对象</div><div class="line">    //处理异常的代码</div><div class="line">&#125;finally&#123;</div><div class="line">    //一定会被执行的代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###异常处理的原则<br>1，函数内容如果抛出需要检测的异常，那么<strong>函数上</strong>必须要声明，否则必须在函数内用try catch捕捉，否则编译失败</p>
<p><strong>2，如果调用到了声明异常的函数，要么try catch，要么throws，否则编译失败</strong></p>
<p><strong>3，什么时候catch，什么时候throws？<br>功能内部可以解决，用catch<br>解决不了，用throws告诉调用者，由调用者解决</strong>  </p>
<p>4，一个功能如果抛出了多个异常，则调用时必须对多个catch进行针对性的处理<br>内部有几个需要检测的异常，就抛出几个异常，就catch几个  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinusIndexException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line">    MinusIndexException()&#123;&#125;</div><div class="line">    MinusIndexException(String msg)&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> NullPointerException, MinusIndexException</span>&#123;</div><div class="line">        <span class="keyword">if</span>(arr==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"没有任何数组实体"</span>);</div><div class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MinusIndexException();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> arr[index];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">        Test t = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">int</span> n = d.method(<span class="keyword">null</span>,-<span class="number">1</span>);</div><div class="line">            sop(<span class="string">"n="</span>+n);</div><div class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</div><div class="line">            sop(<span class="string">"e.toString"</span>);</div><div class="line">        &#125;<span class="keyword">catch</span>(MinusIndexException e)&#123;</div><div class="line">            sop(<span class="string">"message: "</span>+e.getMessage());</div><div class="line">            sop(<span class="string">"string: "</span>+e.toString());</div><div class="line"></div><div class="line">            e.printStackTrace(); <span class="comment">//JVM默认的异常处理机制就是调用一场对象这个方法</span></div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">        <span class="keyword">return</span> arr[index];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###异常处理 （try catch）<br><img src="https://raw.github.com/phoenixjiangnan/phoenixjiangnan.github.com/master/images/2013-01/try-catch-exception.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> arr[<span class="number">3</span>];</div><div class="line">        <span class="keyword">return</span> arr[index];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Test t = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            t.show(-<span class="number">1</span>);</div><div class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</div><div class="line">            sop(e.toString());</div><div class="line">            <span class="keyword">return</span>; <span class="comment">//在此处结束运行，执行finally&#123;&#125;的内容   </span></div><div class="line">            <span class="comment">//System.exit(0);  //退出JVM， 什么都不执行</span></div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            sop(<span class="string">"finally"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###try catch finally 代码块组合的特点<br>形式<br>1, try catch finally  </p>
<p>2, try catch (multiple)<br>if there’s no resource that has to be released, finally block is unnecessary  </p>
<p>3, try finally<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void show()&#123;</div><div class="line">    try&#123;</div><div class="line">        throw new Exception();</div><div class="line">    &#125;catch(Exception e)&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void show() throws Exception&#123;</div><div class="line">    try&#123;</div><div class="line">        throw new Exception()</div><div class="line">    &#125;finally&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class SQLAddException extends Exception&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void addData(Data d) throws SQLAddException&#123;  //SQLException</div><div class="line">    connect to DB....</div><div class="line">    </div><div class="line">    try&#123;</div><div class="line">        add data, exception occurs...</div><div class="line">    &#125;catch(SQLException e)&#123;</div><div class="line">        throw new SQLAddException(); //Exception transition </div><div class="line">    &#125;finally&#123;</div><div class="line">        close DB connection...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###异常的注意事项<br><strong>1，子类在覆盖父类方法时，父类的方法如果抛出了异常，那么子类的方法只能抛出父类的异常或该异常的子类</strong></p>
<p><strong>2，如果父类抛出多个异常，那么子类只能抛出父类异常的子集<br>如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛出异常</strong>    </p>
<p>简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Exception   |--A  </div><div class="line">              |--B  </div><div class="line">            |--C</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superc</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> A</span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subc</span> <span class="keyword">extends</span> <span class="title">Superc</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> A, B</span>&#123;</div><div class="line">        可抛A,B，不可抛C</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlueScreenException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line">    BlueScreenException(String msg)&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line">    PowerException(String msg)&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line">    DelayException(String msg)&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> BlueScreenException, PowerException</span>&#123;</div><div class="line">        <span class="keyword">if</span>(status==<span class="number">1</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlueScreenException();</div><div class="line">        <span class="keyword">if</span>(status==<span class="number">2</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PowerException();</div><div class="line">        </div><div class="line">        sop(<span class="string">"computer is running"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</div><div class="line">        status = <span class="number">0</span>;</div><div class="line">        sop(<span class="string">"computer restarts"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> Computer comp;</div><div class="line"></div><div class="line">    Teacher(String name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        comp = <span class="keyword">new</span> Computer();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> <span class="keyword">throws</span> DelayException</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            comp.run();</div><div class="line">            sop(<span class="string">"teaching"</span>);</div><div class="line">        &#125;<span class="keyword">catch</span>(BlueScreenException e)&#123;</div><div class="line">            sop(e.toString());</div><div class="line"></div><div class="line">            comp.reset();</div><div class="line">            teach();</div><div class="line">        &#125;<span class="keyword">catch</span>(PowerException e)&#123;</div><div class="line">            sop(e.toString());</div><div class="line">            doExercise();</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DelayException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doExercise</span><span class="params">()</span></span>&#123;</div><div class="line">        sop(<span class="string">"everyone does some exercise"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Teacher t = <span class="keyword">new</span> Teacher(<span class="string">"John"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            t.teach();  <span class="comment">//遇到PowerException，抛出DelayException</span></div><div class="line">        &#125;<span class="keyword">catch</span>(DelayException e)&#123;</div><div class="line">            sop(e.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##Object 类   Object class<br>Object: 所有类的根类<br>Object是不断抽取而来、具备所有对象都具备的共性内容  </p>
<p>常用共性方法<br>boolean equals(Object obj)  —— 比较的是地址</p>
<p><strong>一般会覆盖equals()方法，根据对象的特有内容，建立判断对象是否相同的依据</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    Person(<span class="keyword">int</span> age)&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Person p)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age==p.age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Person))&#123;</div><div class="line">            <span class="comment">//return false;</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="string">"类型错误"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Person p = (Person) obj;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age==p.age; <span class="comment">//obj向上转型，特有成员隐藏</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>);</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">20</span>);</div><div class="line">        </div><div class="line">        sop(p1.equals(p2));  <span class="comment">//true</span></div><div class="line"></div><div class="line">        Person p3 = p1;</div><div class="line"></div><div class="line">        sop(p1==p2); <span class="comment">//false</span></div><div class="line">        sop(p1.equals(p2)); <span class="comment">//false</span></div><div class="line">        sop(p1.equals(p3)); <span class="comment">//true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Employee&#123;</div><div class="line">	...</div><div class="line"></div><div class="line">	public boolean equals(Object obj)&#123;</div><div class="line">		if(this==obj)</div><div class="line">			return true;</div><div class="line">			</div><div class="line">		if(obj==null)</div><div class="line">			return flase;</div><div class="line">			</div><div class="line">		if(getClass()!=obj.getClass())</div><div class="line">			return false;</div><div class="line">			</div><div class="line">		Employee e = (Employee)obj;</div><div class="line">		return name.equals(e.name)&amp;&amp;salary==e.salary&amp;&amp;hireDay.equals(e.hireDay);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">###hashCode() function</div><div class="line">**p如果重新定义了equals方法，就必须重新定义hashCode方法，以便用户可以讲对象插入到散列表中**</div><div class="line"></div><div class="line">``` java</div><div class="line">class Employee&#123;</div><div class="line">	…</div><div class="line">	</div><div class="line">	public int hashCode()&#123;</div><div class="line">		return 7*name.hashCode()+11*new Double(salary).hashCode()+13*hireDay.hashCode();</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###getClass() function</p>
<p>###toString() function<br>obj.toString() 与 obj.getClass().getName()+”@”+Integer.toHexString(obj.hashCode()) 的结果相同</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</div><div class="line">	…</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getClass().getName()+name+salary+hireDay;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</div><div class="line">	…</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.toString()+bonus;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##Package 包<br>• 对类文件进行分类管理<br>• 给类提供多层命名（名称）空间<br>• 写在程序文件的第一行<br>• 类名的全称是  包名.类名<br>• 包也是一种封装形式  </p>
<p>###包之间的访问<br>包与包之间的类进行访问，被访问的包中的类必须是public的，被访问的包中的类的方法也必须是public的  </p>
<p>import 干嘛用的啊？为了简化类名书写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">         public   protected     default   private  </div><div class="line"></div><div class="line">          </div><div class="line">同一类中   ok         ok           ok        ok  </div><div class="line"></div><div class="line"></div><div class="line">同一包中   ok         ok           ok             </div><div class="line"></div><div class="line"></div><div class="line">子类中     ok         ok </div><div class="line"></div><div class="line"></div><div class="line">不同包中   ok</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unit Test - JMockit - What are the differences between @Mocked and @Injectable in JMockit, and when to use @Injectable rather than @Mocked]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/06/test/jmockit/Unit-Test-JMockit-What-are-the-differences-between-Mocked-and-Injectable-in-JMockit-and-when-to-use-Injectable-rather-than-Mocked/</url>
      <content type="html"><![CDATA[<p>Recently, an engineer from my company sent out an email encouraging devs to use more <code>@Injectable</code> not <code>@Mocked</code>. He gave some examples demonstrating that <code>@Mocked</code> will mock more things than we expect, like class constructors. Personally, I usually just use <code>@Mocked</code>. I read about the differences between <code>@Injectable</code> and <code>@Mocked</code> before from JMockit official doc, but didn’t fully get what they are exactly about. So I kept his remindings in mind. Today, when I worked on some java unit tests, I tried <code>@Injectable</code> (normally I just use <code>@Mocked</code>), and while writing a few tests I think I understand much deeper about what the differences between them are and what the scenarios to apply one of them.</p>
<p>In one sentence, <code>@Mocked</code> will mock everything and all instances of that class, and <code>@Injectable</code> will only mock a specific method/field of one instance of that class.</p>
<p>Let’s understand this better by discussing about when to use one rather than the other. I summarized some principles from my own experience:</p>
<a id="more"></a>
<blockquote>
<ul>
<li>Mark an instance <code>@Injectable</code> when you CAN pass that instance to the class that you want to actually test</li>
<li>Mark an instance/class <code>@Mocked</code> when you CANNOT pass that instance to the class that you want to actually test</li>
</ul>
</blockquote>
<p>For example, we have a class named <code>Team</code> that we want to test, and it’s like this<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Team</span><span class="params">(Leader leader)</span> </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasADiscussion</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(leader.getName());</div><div class="line">        Discussion d = <span class="keyword">new</span> Discussion();</div><div class="line">        <span class="keyword">return</span> d.started();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In this case, <code>Leader</code> is an instance that you can pass to the class that you want to actually test (class <code>Team</code>), and <code>Discussion</code> is an instance that you cannot pass to <code>Team</code> because <code>Discussion</code> is created within <code>hasADiscussion()</code> method.</p>
<p>So how should we use @Mocked and @Injectable correctly for the unit test with the right mocking scope? The unit test should look like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Injectable</span> Leader aLeader;</div><div class="line">    <span class="comment">/**</span></div><div class="line">		* Usually you will write `<span class="doctag">@Mocked</span> Leader aLeader`, which is fine in most </div><div class="line">		* cases but you will hit hidden issues when mocking too much than what you need</div><div class="line">		*/</div><div class="line">    <span class="meta">@Mocked</span> Discussion aDiscussion;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHasADiscussion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> NonStrictExpectations() &#123;&#123;</div><div class="line">            aLeader.getName(); result = <span class="string">"dev_leader"</span>;</div><div class="line">            aDiscussion.start(); result = <span class="keyword">true</span>;</div><div class="line">        &#125;&#125;;</div><div class="line">        </div><div class="line">        Team t = <span class="keyword">new</span> Team(aLeader); <span class="comment">// Note! You can pass in `aLeader` (but not aDiscussion) to `Team` here!</span></div><div class="line">        assertTrue(t.hasADiscussion());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>See what I mean by “it depends on whether you can pass in the instance/class or not”!</p>
<p>The scope of mocking objects are already ok here, much better that mocking the entire <code>Leader</code> class. If you really want to make the scope more correct, you can go with<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Injectable</span> Leader aLeader;  <span class="comment">// Usually you will write `@Mocked Leader aLeader`, which is fine in most cases but you will hit hidden issues and don't know why</span></div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHasADiscussion</span><span class="params">(@Mocked <span class="keyword">final</span> Discussion aDiscussion)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> NonStrictExpectations() &#123;&#123;</div><div class="line">            aLeader.getName(); result = <span class="string">"dev_leader"</span>;</div><div class="line">            aDiscussion.start(); result = <span class="keyword">true</span>;</div><div class="line">        &#125;&#125;;</div><div class="line">        </div><div class="line">        Team t = <span class="keyword">new</span> Team(aLeader); <span class="comment">// Note! You can pass in `aLeader` (but not aDiscussion) to `Team` here!</span></div><div class="line">        assertTrue(t.hasADiscussion());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This way, the scope of mocking <code>Discussion</code> class will not go out of the boundary of <code>testHasADiscussion</code> test.</p>
<p>Things can get trickier if you have some business logic in class <code>Discussion</code> because <code>@Mocked</code>‘s mocking scope is so wide that it will even mock constructors and change constructor’s behaviors. We can discuss this later.</p>
<p>Hope this blog can help you understand what are the best options when considering mocking things in unit test with JMockit!</p>
<hr>
<p>And the following part is copied from JMockit official doc. To be honest, I don’t find it useful until I figured the essence out myself. Because everything it’s talking about it high level ideas without any concrete examples.</p>
<h2 id="Mocked-types-and-instances"><a href="#Mocked-types-and-instances" class="headerlink" title="Mocked types and instances"></a>Mocked types and instances</h2><p><code>Methods</code> and <code>constructors</code> invoked from the unit under test, and which belong to a dependency of said unit, are the usual targets for mocking. </p>
<p>Mocking provides the mechanism that we need in order to isolate the tested unit from (some of) its dependencies. We specify which particular dependencies are to be mocked for a given test (or tests) by declaring suitable <code>mock fields</code> and/or <code>mock parameters</code>; </p>
<ul>
<li><code>mock fields</code> are declared as annotated instance fields of the test class</li>
<li><code>mock parameters</code> are declared as annotated parameters of a test method. </li>
</ul>
<p>The type of the dependency to be mocked will be the type of the mock field or parameter. Such a type can be any kind of reference type: an interface, a class (including abstract and final ones), an annotation, or an enum.</p>
<blockquote>
<p>By default, all methods of the mocked type will be mocked for the duration of the test. <code>If the declared mocked type is a class, then all of its super-classes up to but not including java.lang.Object will also be mocked, recursively.</code> Therefore, inherited methods will automatically be mocked as well. Again in the case of a class, all of its constructors will also get mocked. Even more, whatever Java language modifiers happen to be applied to the methods/constructors of a mocked class, they will still get mocked: private, static, final, native, it doesn’t really matter.</p>
<p>When a method or constructor is mocked, its original implementation code won’t be executed for invocations occurring during the test. Instead, the call will be redirected to JMockit so it can be dealt with in the manner that was explicitly or implicitly specified for the test.</p>
</blockquote>
<p>The following example test skeleton serves as a basic illustration for the declaration of <code>mock fields</code> and <code>mock parameters</code>, as well as the way in which they are typically used in test code. In this tutorial, we use many code snippets like this, where the parts in bold font are the current focus of explanation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "Dependency" is mocked for all tests in this test class.</span></div><div class="line"><span class="comment">// The "mockInstance" field holds a mocked instance automatically created for use in each test.</span></div><div class="line"><span class="meta">@Mocked</span> Dependency mockInstance;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBusinessOperationXyz</span><span class="params">(@Mocked <span class="keyword">final</span> AnotherDependency anotherMock)</span> </span>&#123;</div><div class="line">   <span class="keyword">new</span> Expectations() &#123;&#123; <span class="comment">// an "expectation block"</span></div><div class="line">      <span class="comment">// Record an expectation, with a given value to be returned:</span></div><div class="line">      mockInstance.mockedMethod(...); result = <span class="number">123</span>;</div><div class="line">   &#125;&#125;;</div><div class="line">   </div><div class="line">   <span class="comment">// Call the code under test.</span></div><div class="line">   </div><div class="line">   <span class="keyword">new</span> Verifications() &#123;&#123; <span class="comment">// a "verification block"</span></div><div class="line">      <span class="comment">// Verifies an expected invocation:</span></div><div class="line">      anotherMock.save(any); times = <span class="number">1</span>;</div><div class="line">   &#125;&#125;;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For a mock parameter declared in a test method, an instance of the declared type will be automatically created by JMockit and passed by the JUnit/TestNG test runner when it executes the test method; therefore, the parameter value will never be null. For a mock field, an instance of the declared type will be automatically created by JMockit and assigned to the field, provided it’s not final.</p>
<p>There are a few different annotations available for the declaration of mock fields and parameters, and ways in which the default mocking behavior can be modified to suit the needs of a particular test. The basics are: </p>
<ul>
<li><code>@Mocked</code> is the central mocking annotation, having a few optional attributes which are useful in particular situations</li>
<li><code>@Injectable</code> is another mocking annotation, which constrains mocking to the instance methods of a single mocked instance</li>
<li><code>@Capturing</code> is yet another mocking annotation, which extends mocking to the classes implementing a mocked interface, or the subclasses extending a mocked class. </li>
</ul>
<p>When <code>@Injectable</code> or <code>@Capturing</code> is applied to a mock field or mock parameter, <code>@Mocked</code> is implied so it doesn’t need to (but can) be applied as well.</p>
<p>The mocked instances created by JMockit can be used normally in test code (for the recording and verification of expectations), and/or passed to the code under test. Or they may simply go unused. Differently from other mocking APIs, these mocked objects don’t have to be the ones used by the unit under test when it calls instance methods on its dependencies. By default (ie, when <code>@Injectable</code> is not used), JMockit does not care on which object a mocked instance method is called. This allows the transparent mocking of instances created directly inside code under test, when said code invokes constructors on brand new instances using the new operator; the classes instantiated must be covered by mocked types declared in test code, that’s all.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - Executor and Thread Pools]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-Executor-and-Thread-Pools/</url>
      <content type="html"><![CDATA[<h1 id="Executor-Interfaces"><a href="#Executor-Interfaces" class="headerlink" title="Executor Interfaces"></a>Executor Interfaces</h1><p>The <code>java.util.concurrent</code> package defines <code>three executor interfaces</code>to <code>provide us the basic interface for a thread pool</code>:</p>
<ul>
<li><code>Executor</code>, a simple interface that supports launching new tasks.</li>
<li><code>ExecutorService</code>, a subinterface of <code>Executor</code>, which adds features that help manage the lifecycle, both of the individual tasks and of the executor itself.</li>
<li><code>ScheduledExecutorService</code>, a subinterface of <code>ExecutorService</code>, supports future and/or periodic execution of tasks.</li>
</ul>
<p>Typically, variables that refer to executor objects are declared as one of these three interface types, not with an executor class type. </p>
<h2 id="The-Executor-Interface"><a href="#The-Executor-Interface" class="headerlink" title="The Executor Interface"></a>The Executor Interface</h2><p>Provides a single method, <code>execute</code>, designed to be a drop-in replacement for a common thread-creation idiom. If <code>r</code> is <code>a Runnable object</code>, and <code>e</code> is <code>an Executor object</code> you can replace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(new Thread(r)).start();</div></pre></td></tr></table></figure></p>
<p>with<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e.execute(r);</div></pre></td></tr></table></figure></p>
<p>However, the definition of execute is less specific. The low-level idiom creates a new thread and launches it immediately. Depending on the Executor implementation, execute may do the same thing, but is more likely to use an existing worker thread to run r, or to place r in a queue to wait for a worker thread to become available. (We’ll describe worker threads in the section on Thread Pools.)</p>
<p>The executor implementations in java.util.concurrent are designed to make full use of the more advanced <code>ExecutorService</code> and <code>ScheduledExecutorService</code> interfaces, although they also work with the base Executor interface.</p>
<a id="more"></a>
<h2 id="The-ExecutorService-Interface"><a href="#The-ExecutorService-Interface" class="headerlink" title="The ExecutorService Interface"></a>The ExecutorService Interface</h2><p>Supplements execute with a similar, but more versatile <code>submit</code> method. Like <code>execute</code>, <code>submit</code> accepts <code>Runnable</code> objects, but also accepts <code>Callable</code> objects, which allow the task to return a value. The <code>submit</code> method returns a <code>Future</code> object, which is used to retrieve the <code>Callable</code> return value and to manage the status of both <code>Callable</code> and <code>Runnable</code> tasks.</p>
<p><code>ExecutorService</code> also provides methods for submitting large collections of Callable objects. Finally, ExecutorService provides a number of methods for managing the shutdown of the executor. To support immediate shutdown, tasks should handle <code>interrupts</code> correctly.</p>
<h2 id="The-ScheduledExecutorService-Interface"><a href="#The-ScheduledExecutorService-Interface" class="headerlink" title="The ScheduledExecutorService Interface"></a>The ScheduledExecutorService Interface</h2><p>Supplements the methods of its parent <code>ExecutorService</code> with <code>schedule</code>, which executes a <code>Runnable</code> or <code>Callable</code> task <code>after a specified delay</code>. In addition, the interface defines <code>scheduleAtFixedRate</code> and <code>scheduleWithFixedDelay</code>, which executes specified tasks repeatedly, at defined intervals.</p>
<h2 id="Pool-Management"><a href="#Pool-Management" class="headerlink" title="Pool Management"></a>Pool Management</h2><p>Various management methods exist for the pools. </p>
<ul>
<li><code>shutdown()</code> will reject any future submissions but complete processing of in-process executions and even those that had not yet started but were submitted before the shutdown was initiated. More aggressively, </li>
<li><code>shutdownNow()</code> will also prevent any future submissions, but it has a few different, notable behaviours. It will not start execution of submitted but unstarted tasks. They will be in the returned list. It will also attempt to stop, or more precisely, <code>Thread.interrupt()</code> currently executing tasks. This is a best effort with no guarantee that these tasks will be successfully interrupted.</li>
</ul>
<h1 id="Thread-Pools"><a href="#Thread-Pools" class="headerlink" title="Thread Pools"></a>Thread Pools</h1><h2 id="Thread-Factory"><a href="#Thread-Factory" class="headerlink" title="Thread Factory"></a>Thread Factory</h2><p> You’ll want to take advantage of <code>ThreadFactory</code> support in <code>Executors (not Executor)</code> and be in the habit of providing your own. The default <code>ThreadFactory</code> will give you an incrementing numbered pool naming scheme which is not all that helpful in logs or other monitoring. </p>
<p>For the first pool created, you’ll get threads named <code>pool-1-thread-1</code>, <code>pool-1-thread-2</code> and the second one starts with <code>pool-2-thread-1</code>, etc. By providing your own ThreadFactory, you can have threads named like ReportProcessingThread1 and HttpThread1. Here’s a simple example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread t = <span class="keyword">new</span> Thread(<span class="string">"my-thread"</span>);</div><div class="line">t.setName(<span class="string">"my-next-thread"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Thread-Pools-1"><a href="#Thread-Pools-1" class="headerlink" title="Thread Pools"></a>Thread Pools</h2><p>Most of the executor implementations in <code>java.util.concurrent</code> use thread pools, which consist of worker threads. This kind of thread exists separately from the Runnable and Callable tasks it executes and is often used to execute multiple tasks.</p>
<p><code>Using worker threads minimizes the overhead due to thread creation.</code> Thread objects use a significant amount of memory, and in a large-scale application, allocating and deallocating many thread objects creates a significant memory management overhead.</p>
<p>One common type of thread pool is the <code>fixed thread pool</code>. This type of pool always has <code>a specified number of threads running</code>; <code>if a thread is somehow terminated while it is still in use, it is automatically replaced with a new thread</code>. Tasks are submitted to the pool via an internal queue, which holds extra tasks whenever there are more active tasks than threads.</p>
<p>An important advantage of the fixed thread pool is that <code>applications using it degrade gracefully</code>. To understand this, consider a web server application where each HTTP request is handled by a separate thread. If the application simply creates a new thread for every new HTTP request, and the system receives more requests than it can handle immediately, the application will suddenly stop responding to all requests when the overhead of all those threads exceed the capacity of the system. With a limit on the number of the threads that can be created, the application will not be servicing HTTP requests as quickly as they come in, but it will be servicing them as quickly as the system can sustain.</p>
<p>Methods in <code>java.util.concurrent.Executors</code>.</p>
<ul>
<li><code>newFixedThreadPool()</code> - Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.</li>
<li><code>newCachedThreadPool()</code> - Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. It creates an <code>executor</code> with an expandable thread pool. This executor is suitable for applications that launch many short-lived tasks.</li>
<li><code>newScheduledThreadPool()</code> - Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.</li>
<li><code>newSingleThreadExecutor()</code> - Creates an Executor that uses a single worker thread operating off an unbounded queue.</li>
<li>Several factory methods are <code>ScheduledExecutorService</code> versions of the above executors.</li>
</ul>
<p>If none of the executors provided by the above factory methods meet your needs, constructing instances of <code>java.util.concurrent.ThreadPoolExecutor</code> or <code>java.util.concurrent.ScheduledThreadPoolExecutor</code> will give you additional options</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - java.util.concurrent.atomic package]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-java-util-concurrent-atomic-package/</url>
      <content type="html"><![CDATA[<h1 id="package-java-util-concurrent-atomic"><a href="#package-java-util-concurrent-atomic" class="headerlink" title="package java.util.concurrent.atomic"></a>package java.util.concurrent.atomic</h1><h2 id="volatile-keyword-in-Java"><a href="#volatile-keyword-in-Java" class="headerlink" title="volatile keyword in Java"></a>volatile keyword in Java</h2><p>Essentially, <code>volatile</code> is used to indicate that <code>a variable&#39;s value will be modified by different threads</code>.</p>
<p>Declaring a volatile Java variable means:</p>
<blockquote>
<ul>
<li>The value of this variable will <code>never be cached thread-locally</code>: all reads and writes will go straight to “main memory”</li>
<li>Access to the variable <code>acts as though it is enclosed in a synchronized block</code>, synchronized on itself</li>
</ul>
</blockquote>
<p><code>Static variables</code> are used in the context of Object where update made by one object would reflect in all the other objects of the same class but not in the context of Thread where update of one thread to the static variable will reflect the changes immediately to all the threads (in their local cache).</p>
<p><code>Volatile variable</code>: If two Threads(suppose t1 and t2) are accessing the same object and updating a variable which is declared as volatile then it means t1 and t2 can make their own local cache of the Object except the variable which is declared as a volatile . So the volatile variable will have only one main copy which will be updated by different threads and update made by one thread to the volatile variable will immediately reflect to the other Thread.</p>
<a id="more"></a>
<h2 id="atomic-actions"><a href="#atomic-actions" class="headerlink" title="atomic actions"></a>atomic actions</h2><p>In programming, <code>an atomic action</code> is <code>one that effectively happens all at once</code>. An atomic action cannot stop in the middle: it either happens completely, or it doesn’t happen at all. No side effects of an atomic action are visible until the action is complete.</p>
<p>there are actions you can specify that are atomic:</p>
<ul>
<li>Reads and writes are atomic for reference variables and for most primitive variables (all types except long and double).</li>
<li>Reads and writes are atomic for all variables declared <code>volatile</code> (including long and double variables).</li>
</ul>
<!-- more -->
<p>A small toolkit of classes that support <code>lock-free</code> <code>thread-safe</code> programming on <code>single variables</code>. In essence, the classes in this package extend the notion of <code>volatile</code> values, fields, and array elements to those that also provide an atomic conditional update operation of the form:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean compareAndSet(expectedValue, updateValue);</div></pre></td></tr></table></figure></p>
<p>This method (which varies in argument types across different classes) atomically sets a variable to the <code>updateValue</code> if it currently holds the <code>expectedValue</code>, <code>reporting true on success</code>. The classes in this package also contain methods to get and unconditionally set values, as well as a weaker conditional atomic update operation <code>weakCompareAndSet</code> described below.</p>
<p>The specifications of these methods enable implementations to employ efficient machine-level atomic instructions that are available on contemporary processors. However on some platforms, support may entail some form of internal locking. Thus the methods are not strictly guaranteed to be non-blocking – a thread may block transiently before performing the operation.</p>
<p>Instances of classes <code>AtomicBoolean</code>, <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicReference</code> each provide access and updates to a single variable of the corresponding type. Each class also provides appropriate utility methods for that type. For example, classes AtomicLong and AtomicInteger provide atomic increment methods. </p>
<p>One application is to generate sequence numbers, as in:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sequencer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong sequenceNumber = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sequenceNumber.getAndIncrement();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>It is straightforward to define new utility functions that, like <code>getAndIncrement</code>, apply a function to a value atomically. For example, given some transformation<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">long transform(long input)</div></pre></td></tr></table></figure></p>
<p>write your utility method as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">long getAndTransform(AtomicLong var) &#123;</div><div class="line">    long prev, next;</div><div class="line">    do &#123;</div><div class="line">        prev = var.get();</div><div class="line">        next = transform(prev);</div><div class="line">    &#125; while (!var.compareAndSet(prev, next));</div><div class="line">    return prev; // return next; for transformAndGet</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The memory effects for accesses and updates of atomics generally follow the rules for volatiles, as stated in The Java Language Specification (17.4 Memory Model):</p>
<ul>
<li>get has the memory effects of reading a volatile variable.</li>
<li>set has the memory effects of writing (assigning) a volatile variable.</li>
<li>lazySet has the memory effects of writing (assigning) a volatile variable except that it permits reorderings with subsequent (but not previous) memory actions that do not themselves impose reordering constraints with ordinary non-volatile writes. Among other usage contexts, lazySet may apply when nulling out, for the sake of garbage collection, a reference that is never accessed again.</li>
<li>weakCompareAndSet atomically reads and conditionally writes a variable but does not create any happens-before orderings, so provides no guarantees with respect to previous or subsequent reads and writes of any variables other than the target of the weakCompareAndSet.</li>
<li>compareAndSet and all other read-and-update operations such as getAndIncrement have the memory effects of both reading and writing volatile variables.</li>
</ul>
<p>In addition to classes representing single values, this package contains <code>Updater</code> classes that can be used to obtain <code>compareAndSet</code> operations on any selected <code>volatile</code> field of any selected class. <code>AtomicReferenceFieldUpdater</code>, <code>AtomicIntegerFieldUpdater</code>, and <code>AtomicLongFieldUpdater</code> are reflection-based utilities that provide access to the associated field types. These are mainly of use in atomic data structures in which several <code>volatile</code> fields of the same node (for example, the links of a tree node) are independently subject to atomic updates. These classes enable greater flexibility in how and when to use atomic updates, at the expense of more awkward reflection-based setup, less convenient usage, and weaker guarantees.</p>
<p>The <code>AtomicIntegerArray</code>, <code>AtomicLongArray</code>, and <code>AtomicReferenceArray</code> classes further extend atomic operation support to arrays of these types. These classes are also notable in providing <code>volatile</code> access semantics for their array elements, which is not supported for ordinary arrays.</p>
<p>The atomic classes also support method <code>weakCompareAndSet</code>, which has limited applicability. On some platforms, the weak version may be more efficient than <code>compareAndSet</code> in the normal case, but differs in that any given invocation of the <code>weakCompareAndSet</code> method may return false spuriously (that is, for no apparent reason). A false return means only that the operation may be retried if desired, relying on the guarantee that repeated invocation when the variable holds expectedValue and no other thread is also attempting to set the variable will eventually succeed. (Such spurious failures may for example be due to memory contention effects that are unrelated to whether the expected and current values are equal.) Additionally weakCompareAndSet does not provide ordering guarantees that are usually needed for synchronization control. However, the method may be useful for updating counters and statistics when such updates are unrelated to the other happens-before orderings of a program. When a thread sees an update to an atomic variable caused by a weakCompareAndSet, it does not necessarily see updates to any other variables that occurred before the weakCompareAndSet. This may be acceptable when, for example, updating performance statistics, but rarely otherwise.</p>
<p>The <code>AtomicMarkableReference</code> class associates a single boolean with a reference. For example, this bit might be used inside a data structure to mean that the object being referenced has logically been deleted. The <code>AtomicStampedReference</code> class associates an integer value with a reference. This may be used for example, to represent version numbers corresponding to series of updates.</p>
<blockquote>
<p>Atomic classes are <code>designed primarily as building blocks for
implementing non-blocking data structures and related infrastructure
classes</code>. The compareAndSet method is not a general replacement for<br>locking. It applies only when critical updates for an object are<br>confined to a single variable.</p>
</blockquote>
<p>Atomic classes are not general purpose replacements for <code>java.lang.Integer</code> and related classes. They do not define methods such as <code>equals</code>, <code>hashCode</code> and <code>compareTo</code>. (Because atomic variables are expected to be mutated, they are poor choices for hash table keys.) Additionally, classes are provided only for those types that are commonly useful in intended applications. For example, there is no atomic class for representing <code>byte</code>. In those infrequent cases where you would like to do so, you can use an <code>AtomicInteger</code> to hold <code>byte</code> values, and cast appropriately. You can also hold floats using <code>Float.floatToRawIntBits(float)</code> and <code>Float.intBitsToFloat(int)</code> conversions, and doubles using <code>Double.doubleToRawLongBits(double)</code> and <code>Double.longBitsToDouble(long)</code> conversions.</p>
<h2 id="AtomicBoolean"><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">AtomicBoolean ab1 = <span class="keyword">new</span> AtomicBoolean();      <span class="comment">// a new AtomicBoolean with the value false;</span></div><div class="line">AtomicBoolean ab2 = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">true</span>);  <span class="comment">// set an explicit initial value for the AtomicBoolean instance</span></div><div class="line"></div><div class="line"><span class="keyword">boolean</span> value = ab2.get();  <span class="comment">// get the value</span></div><div class="line">ab2.set(<span class="keyword">false</span>);             <span class="comment">// set the value</span></div><div class="line"></div><div class="line"><span class="keyword">boolean</span> oldValue = ab2.getAndSet(<span class="keyword">false</span>);  <span class="comment">// returns the AtomicBoolean's current value, and sets a new value for it</span></div><div class="line"><span class="keyword">boolean</span> wasNewValueSet = ab2.compareAndSet(expectedValue, newValue); <span class="comment">// compare the current value of the AtomicBoolean to an expected value, and if current value is equal to the expected value, a new value can be set</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - CountDownLatch]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-CountDownLatch/</url>
      <content type="html"><![CDATA[<p>#java.util.concurrent.CountDownLatch – a more general wait/notify mechanism</p>
<blockquote>
<p>A synchronization aid that allows one or more threads to wait until a<br>set of operations being performed in other threads completes.</p>
</blockquote>
<p>A <code>CountDownLatch</code> is <code>initialized with a given count</code>. </p>
<blockquote>
<p>The await methods block until the current count reaches zero due to<br>invocations of the countDown() method, after which all waiting threads<br>are released and any subsequent invocations of await return<br>immediately.</p>
</blockquote>
<p> This is a one-shot phenomenon – the count cannot be reset. If you need a version that resets the count, consider using a <code>CyclicBarrier</code>.</p>
<p>A CountDownLatch is a versatile synchronization tool and can be used for a number of purposes. </p>
<ul>
<li>A CountDownLatch initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking await wait at the gate until it is opened by a thread invoking countDown().</li>
<li>A CountDownLatch initialized to N can be used to make one thread wait until N threads have completed some action, or some action has been completed N times.</li>
</ul>
<a id="more"></a>
<p>A useful property of a CountDownLatch is that it doesn’t require that threads calling countDown wait for the count to reach zero before proceeding, it simply prevents any thread from proceeding past an await until all threads could pass.</p>
<p>Sample usage: Here is a pair of classes in which a group of worker threads use two countdown latches:</p>
<ul>
<li>The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed;</li>
<li>The second is a completion signal that allows the driver to wait until all workers have completed.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123; <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// create and start threads</span></div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(startSignal, doneSignal)).start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        doSomethingElse();            <span class="comment">// don't let run yet</span></div><div class="line">        startSignal.countDown();      <span class="comment">// let all threads proceed</span></div><div class="line">        doSomethingElse();</div><div class="line">        doneSignal.await();           <span class="comment">// wait for all to finish</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</div><div class="line">    </div><div class="line">    Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</div><div class="line">        <span class="keyword">this</span>.startSignal = startSignal;</div><div class="line">        <span class="keyword">this</span>.doneSignal = doneSignal;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            startSignal.await();</div><div class="line">            doWork();</div><div class="line">            doneSignal.countDown();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        </div><div class="line">        &#125; <span class="comment">// return;</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Another typical usage would be to divide a problem into N parts, describe each part with a <code>Runnable</code> that executes that portion and counts down on the latch, and queue all the Runnables to an Executor. When all sub-parts are complete, the coordinating thread will be able to pass through await. (When threads must repeatedly count down in this way, instead use a CyclicBarrier.)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver2</span> </span>&#123; <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</div><div class="line">        Executor e = ...</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// create and start threads</span></div><div class="line">            e.execute(<span class="keyword">new</span> WorkerRunnable(doneSignal, i));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        doneSignal.await();           <span class="comment">// wait for all to finish</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    WorkerRunnable(CountDownLatch doneSignal, <span class="keyword">int</span> i) &#123;</div><div class="line">        <span class="keyword">this</span>.doneSignal = doneSignal;</div><div class="line">        <span class="keyword">this</span>.i = i;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            doWork(i);</div><div class="line">            doneSignal.countDown();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">        &#125; <span class="comment">// return;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Memory consistency effects: Until the count reaches zero, actions in a thread prior to calling countDown() happen-before actions following a successful return from a corresponding await() in another thread.</p>
<p>Java developers of all sorts should be familiar with the <code>wait/notify approach</code> to blocking until a condition is reached. Here is a little sample of how it works:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWaitNotify</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object mutex = <span class="keyword">new</span> Object();</div><div class="line">    Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// we must acquire the lock before waiting to be notified</span></div><div class="line">            <span class="keyword">synchronized</span>(mutex) &#123;</div><div class="line">                System.out.println(<span class="string">"Going to wait (lock held by "</span> + Thread.currentThread().getName() + <span class="string">")"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                   mutex.wait(); <span class="comment">// this will release the lock to be notified (optional timeout can be supplied)</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">                &#125; </div><div class="line">    </div><div class="line">                System.out.println(<span class="string">"Done waiting (lock held by "</span> + Thread.currentThread().getName() + <span class="string">")"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    t.start(); <span class="comment">// start her up and let her wait()</span></div><div class="line"></div><div class="line">    <span class="comment">// not normally how we do things, but good enough for demonstration purposes</span></div><div class="line">    Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">    <span class="comment">// we acquire the lock released by wait(), and notify()</span></div><div class="line">    <span class="keyword">synchronized</span> (mutex) &#123;</div><div class="line">        System.out.println(<span class="string">"Going to notify (lock held by "</span> + Thread.currentThread().getName() + <span class="string">")"</span>);</div><div class="line">        mutex.notify();</div><div class="line">        System.out.println(<span class="string">"Done notify (lock held by "</span> + Thread.currentThread().getName() + <span class="string">")"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Going to wait (lock held by Thread-0)</div><div class="line">Going to notify (lock held by main)</div><div class="line">Done notify (lock held by main)</div><div class="line">Done waiting (lock held by Thread-0)</div></pre></td></tr></table></figure>
<p>A CountDownLatch can actually be used similar to a wait/notify with only one notify – that is, as long as you don’t want wait() to stall if notify() is called before you have acquired the lock and invoked wait(). It is actually more forgiving because of this, and in some cases, it’s just what you want. Here’s a sample:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWaitNotify</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>); <span class="comment">// just one time</span></div><div class="line">    Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// no lock to acquire!</span></div><div class="line">            System.out.println(<span class="string">"Going to count down..."</span>);</div><div class="line">            latch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    t.start(); <span class="comment">// start her up and let her wait()</span></div><div class="line">    System.out.println(<span class="string">"Going to await..."</span>);</div><div class="line">    latch.await();</div><div class="line">    System.out.println(<span class="string">"Done waiting!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As you can see, it is simpler than wait/notify, and requires less code. It also allows us to invoke the condition that ultimately releases the block before we call wait(). This can mean safer code.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency - Semaphore]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/03/java/concurrency/Java-Concurrency-Semaphore/</url>
      <content type="html"><![CDATA[<h1 id="java-util-concurrent-Semaphore"><a href="#java-util-concurrent-Semaphore" class="headerlink" title="java.util.concurrent.Semaphore"></a>java.util.concurrent.Semaphore</h1><p>A <code>Semaphore</code> is a thread synchronization construct that can be used either <code>to send signals between threads to avoid missed signals</code>, or <code>to guard a critical section like you would with a lock</code>.</p>
<p>A counting semaphore. Conceptually, a semaphore maintains <code>a set of permits</code>, or <code>a given number of &quot;permits&quot;</code>, with the following characteristics.</p>
<blockquote>
<ul>
<li>For each call to <code>acquire()</code>, a permit is taken by the calling thread. </li>
<li>For each call to <code>release()</code>, a permit is returned to the semaphore. </li>
<li>Thus, at most N threads can pass the <code>acquire()</code> method without any <code>release()</code> calls, where N is the number of permits the semaphore was initialized with. </li>
<li>Each <code>acquire()</code> blocks if necessary until a permit is available, and then takes it. </li>
<li>Each <code>release()</code> adds a permit, potentially releasing a blocking acquirer. </li>
</ul>
<p>It safely allows us to ensure that only n processes can access a certain resource at a given time.</p>
</blockquote>
<p>However, no actual permit objects are used; the <code>Semaphore</code> just keeps a count of the number available and acts accordingly. The permits are just a simple counter. Nothing fancy here.</p>
<h1 id="Semaphore-Classification"><a href="#Semaphore-Classification" class="headerlink" title="Semaphore Classification"></a>Semaphore Classification</h1><p>The semaphores in computer science can be broadly classified as :</p>
<blockquote>
<ul>
<li>Binary Semaphore</li>
<li>Counting Semaphore</li>
</ul>
</blockquote>
<p><code>A semaphore initialized to one (1)</code>, and which is used such that it only has at most one permit available, <code>can serve as a mutual exclusion lock</code>. This is more commonly known as a <code>binary semaphore</code>, because it only has two states: one permit available, or zero permits available. When used in this way, <code>the binary semaphore has the property</code> (unlike many Lock implementations), <code>that the &quot;lock&quot; can be released by a thread other than the owner</code> <code>(as semaphores have no notion of ownership)</code>. <code>This can be useful in some specialized contexts, such as deadlock recovery</code>.</p>
<h1 id="Build-a-simple-Semaphore"><a href="#Build-a-simple-Semaphore" class="headerlink" title="Build a simple Semaphore"></a>Build a simple Semaphore</h1><p>Here is a simple Semaphore implementation:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> signal = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> </span>&#123;</div><div class="line">		signal = <span class="keyword">true</span>;</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">		<span class="keyword">while</span>(!signal) &#123;</div><div class="line">			wait();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		signal = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>The <code>acquire()</code> method sends a signal which is stored internally in the <code>Semaphore</code>. The <code>release()</code> method waits for a signal. When received the signal flag is cleared again, and the <code>release()</code> method exited.</p>
</blockquote>
<p>Using a semaphore like this you can avoid missed signals. You will call <code>acquire()</code> instead of <code>notify()</code> and <code>release()</code> instead of <code>wait()</code>. If the call to <code>acquire()</code> happens before the call to <code>release()</code> the thread calling <code>release()</code> will still know that <code>acquire()</code> was called, because the signal is stored internally in the signal variable. This is not the case with <code>wait()</code> and <code>notify()</code>.</p>
<p>The names <code>acquire()</code> and <code>release()</code> may seem a bit odd when using a semaphore for signaling. The names origin from the use of semaphores as locks, as explained later in this text. In that case the names make more sense.</p>
<h1 id="Building-a-Counting-Semaphore"><a href="#Building-a-Counting-Semaphore" class="headerlink" title="Building a Counting Semaphore"></a>Building a Counting Semaphore</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSemaphore</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> signals = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</div><div class="line">		signals++;</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">		<span class="keyword">while</span>(signals == <span class="number">0</span>) &#123;</div><div class="line">			wait();</div><div class="line">		&#125;</div><div class="line">		signals--;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Building-a-Bounded-Semaphore"><a href="#Building-a-Bounded-Semaphore" class="headerlink" title="Building a Bounded Semaphore"></a>Building a Bounded Semaphore</h1><p>The <code>CoutingSemaphore</code> has no upper bound on how many signals it can store. We can change the semaphore implementation to have an upper bound, like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBoundedSemaphore</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> signal;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBoundedSemaphore</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">        signal = <span class="number">0</span>;</div><div class="line">        capacity = cap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * Notice how the acquire() method now blocks if the number of signals is equal to the upper bound.</div><div class="line">    *</div><div class="line">    * Not until a thread has called release() will the thread calling take() be allowed to deliver its signal,</div><div class="line">    * if the BoundedSemaphore has reached its upper signal limit.</div><div class="line">    * </div><div class="line">    * If the queue size is not equal to either bound when enqueue() or dequeue() is called,</div><div class="line">    * there can be no threads waiting to either enqueue or dequeue items.</div><div class="line">    * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(signal == capacity) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(signal == <span class="number">0</span>) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        signal ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span>(signal == <span class="number">0</span>) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(signal == capacity) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        signal --;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Notice how the <code>take()</code> method now blocks if the number of signals is equal to the upper bound. Not until a thread has called <code>release()</code> will the thread calling <code>take()</code> be allowed to deliver its signal, if the <code>BoundedSemaphore</code> has reached its upper signal limit.</p>
<h2 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h2><p>I had one interview that requires to build a Semaphore class with the following primitives</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</div><div class="line">	<span class="keyword">private</span> ILock lock;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">		counter = v;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">		lock.enter();</div><div class="line">		</div><div class="line">		lock.leave();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</div><div class="line">		lock.enter();</div><div class="line">		</div><div class="line">		lock.leave();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here is a simple Semaphore implementation:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ILock &#123;</div><div class="line">	enter();</div><div class="line">	leave();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class IEvent &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class IMutex &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Semaphore-Usage"><a href="#Semaphore-Usage" class="headerlink" title="Semaphore Usage"></a>Semaphore Usage</h2><p>As semaphore typically has two uses:</p>
<blockquote>
<ul>
<li>To guard a critical section against entry by more than N threads at a time.</li>
<li>To send signals between two threads.</li>
</ul>
</blockquote>
<h3 id="1-Guarding-Critical-Sections"><a href="#1-Guarding-Critical-Sections" class="headerlink" title="1) Guarding Critical Sections"></a>1) Guarding Critical Sections</h3><p>If you use a semaphore to guard a critical section, the thread trying to enter the critical section will typically first try to acquire a permit, enter the critical section, and then release the permit again after. Like this:</p>
<p>Semaphores are often used to <code>restrict the number of threads than can access some (physical or logical) resource</code>. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line"><span class="comment">//critical section</span></div><div class="line">semaphore.acquire();</div><div class="line">...</div><div class="line">semaphore.release();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_AVAILABLE = <span class="number">100</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Semaphore available = <span class="keyword">new</span> Semaphore(MAX_AVAILABLE, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">     available.acquire();</div><div class="line">     <span class="keyword">return</span> getNextAvailableItem();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putItem</span><span class="params">(Object x)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (markAsUnused(x))</div><div class="line">       available.release();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Not a particularly efficient data structure; just for demo</span></div><div class="line">   <span class="keyword">protected</span> Object[] items = ... whatever kinds of items being managed</div><div class="line">   <span class="keyword">protected</span> <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[MAX_AVAILABLE];</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Object <span class="title">getNextAvailableItem</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;</div><div class="line">       <span class="keyword">if</span> (!used[i]) &#123;</div><div class="line">          used[i] = <span class="keyword">true</span>;</div><div class="line">          <span class="keyword">return</span> items[i];</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// not reached</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">markAsUnused</span><span class="params">(Object item)</span> </span>&#123;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;</div><div class="line">       <span class="keyword">if</span> (item == items[i]) &#123;</div><div class="line">          <span class="keyword">if</span> (used[i]) &#123;</div><div class="line">            used[i] = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125; <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With the above example. Before obtaining an item each thread must acquire a permit from the semaphore, guaranteeing that an item is available for use. When the thread has finished with the item it is returned back to the pool and a permit is returned to the semaphore, allowing another thread to acquire that item. Note that no synchronization lock is held when acquire() is called as that would prevent an item from being returned to the pool. The semaphore encapsulates the synchronization needed to restrict access to the pool, separately from any synchronization needed to maintain the consistency of the pool itself.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</div><div class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</div><div class="line">		</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLock</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="keyword">try</span> &#123;</div><div class="line">           semaphore.acquire();</div><div class="line">	        System.out.println(<span class="string">"Locks acquired"</span>);</div><div class="line">	        System.out.println(<span class="string">"Locks remaining &gt;&gt; "</span> +semaphore.availablePermits());</div><div class="line">        &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123;</div><div class="line">	        ie.printStackTrace();</div><div class="line">	    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">	        semaphore.release();</div><div class="line">	        System.out.println(<span class="string">"Locks Released"</span>);</div><div class="line">	    &#125;	    </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    <span class="keyword">final</span> SemaphoreDemo semaphoreDemo = <span class="keyword">new</span> SemaphoreDemo();</div><div class="line">	    Thread thread = <span class="keyword">new</span> Thread()&#123;</div><div class="line">    	    <span class="meta">@Override</span></div><div class="line">    	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    	           semaphoreDemo.printLock();</div><div class="line">    	    &#125;</div><div class="line">    	&#125;;</div><div class="line">	    thread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Locks acquired</div><div class="line">Locks remaining &gt;&gt; <span class="number">9</span></div><div class="line">Locks Released</div></pre></td></tr></table></figure>
<h3 id="2-Sending-Signals-Between-Threads"><a href="#2-Sending-Signals-Between-Threads" class="headerlink" title="2) Sending Signals Between Threads"></a>2) Sending Signals Between Threads</h3><p>If you use a semaphore to send signals between threads, then you would typically have one thread call the <code>acquire()</code> method, and the other thread to call the <code>release()</code> method.</p>
<blockquote>
<p>If no permits are available, the <code>acquire()</code> call will block until a permit is released by another thread. Similarly, a <code>release()</code> calls is blocked if no more permits can be released into this semaphore.</p>
</blockquote>
<p>Thus it is possible to coordinate threads. For instance, if acquire was called after <code>Thread 1</code> had inserted an object in a shared list, and <code>Thread 2</code> had called <code>release()</code> just before taking an object from that list, you had essentially created a blocking queue. The number of permits available in the semaphore would correspond to the maximum number of elements the blocking queue could hold.</p>
<p>Here is a simplified example of two threads signaling each other using a Semaphore:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore();</div><div class="line"></div><div class="line">SendingThread sender = <span class="keyword">new</span> SendingThread(semaphore);</div><div class="line"></div><div class="line">ReceivingThread receiver = <span class="keyword">new</span> ReceivingThread(semaphore);</div><div class="line"></div><div class="line">receiver.start();</div><div class="line">sender.start();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendingThread</span> </span>&#123;</div><div class="line">  Semaphore semaphore = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SendingThread</span><span class="params">(Semaphore semaphore)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">      <span class="comment">//do something, then signal</span></div><div class="line">      <span class="keyword">this</span>.semaphore.take();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecevingThread</span> </span>&#123;</div><div class="line">  Semaphore semaphore = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReceivingThread</span><span class="params">(Semaphore semaphore)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">      <span class="keyword">this</span>.semaphore.release();</div><div class="line">      <span class="comment">//receive signal, then do something...</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Fairness"><a href="#Fairness" class="headerlink" title="Fairness"></a>Fairness</h2><p>The constructor for this class optionally accepts <code>a fairness parameter</code>. When set false, this class makes no guarantees about the order in which threads acquire permits. In particular, barging is permitted, that is, a thread invoking acquire() can be allocated a permit ahead of a thread that has been waiting - logically the new thread places itself at the head of the queue of waiting threads. When fairness is set true, the semaphore guarantees that threads invoking any of the acquire methods are selected to obtain permits in the order in which their invocation of those methods was processed (first-in-first-out; FIFO). Note that FIFO ordering necessarily applies to specific internal points of execution within these methods. So, it is possible for one thread to invoke acquire before another, but reach the ordering point after the other, and similarly upon return from the method. Also note that the untimed tryAcquire methods do not honor the fairness setting, but will take any permits that are available.</p>
<p><code>Generally, semaphores used to control resource access should be initialized as fair</code>, to ensure that no thread is starved out from accessing a resource. When using semaphores for other kinds of synchronization control, the throughput advantages of non-fair ordering often outweigh fairness considerations.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = new Semaphore(1, true);</div></pre></td></tr></table></figure>
<p>This class also provides convenience methods to acquire and release multiple permits at a time. Beware of the increased risk of indefinite postponement when these methods are used without fairness set true.</p>
<p>Memory consistency effects: Actions in a thread prior to calling a “release” method such as release() happen-before actions following a successful “acquire” method such as acquire() in another thread.</p>
<h2 id="Limiting-connections"><a href="#Limiting-connections" class="headerlink" title="Limiting connections"></a>Limiting connections</h2><p>Perhaps we have a process that downloads resources for us periodically via HTTP. We don’t want to spam any of the hosts and at the same time, we want to limit how many connections we are making so we don’t exhaust the limited file handles or outbound connections we are permitted. A simple way to do this would be with a semaphore:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionLimiter</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="title">ConnectionLimiter</span><span class="params">(<span class="keyword">int</span> maxConcurrentRequests)</span> </span>&#123;</div><div class="line">       semaphore = <span class="keyword">new</span> Semaphore(maxConcurrentRequests);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> URLConnection <span class="title">acquire</span><span class="params">(URL url)</span> <span class="keyword">throws</span> InterruptedException,</span></div><div class="line">                                                IOException &#123;</div><div class="line">       semaphore.acquire();</div><div class="line">       <span class="keyword">return</span> url.openConnection();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(URLConnection conn)</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">/*</span></div><div class="line">           * ... clean up here</div><div class="line">           */</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           semaphore.release();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Dangers"><a href="#Dangers" class="headerlink" title="Dangers"></a>Dangers</h2><p>As with most methods of locking or synchronization, there are some potential issues.</p>
<p>The number one thing to remember is, <code>always release what you acquire</code>. This is done by using try..finally constructs.</p>
<p>There are other less obvious problems that can befall you when using semaphores. The following class shows a <code>deadlock</code> that only the luckiest of you will avoid. You’ll notice that the <code>two threads which acquire the two semaphore permits do so in opposite order</code>. (try..finally is left out for the sake of brevity).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Semaphore s1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line">   Semaphore s2 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line"></div><div class="line">   Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DoubleResourceGrabber(s1, s2));</div><div class="line">   <span class="comment">// now reverse them ... here comes trouble!</span></div><div class="line">   Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DoubleResourceGrabber(s2, s1));</div><div class="line"></div><div class="line">   t.start();</div><div class="line">   t2.start();</div><div class="line"></div><div class="line">   t.join();</div><div class="line">   t2.join();</div><div class="line">   System.out.println(<span class="string">"We got lucky!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleResourceGrabber</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> Semaphore first;</div><div class="line">   <span class="keyword">private</span> Semaphore second;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DoubleResourceGrabber</span><span class="params">(Semaphore s1, Semaphore s2)</span> </span>&#123;</div><div class="line">       first = s1;</div><div class="line">       second = s2;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Thread t = Thread.currentThread();</div><div class="line"></div><div class="line">           first.acquire();</div><div class="line">           System.out.println(t + <span class="string">" acquired "</span> + first);</div><div class="line"></div><div class="line">           Thread.sleep(<span class="number">200</span>); <span class="comment">// demonstrate deadlock</span></div><div class="line"></div><div class="line">           second.acquire();</div><div class="line">           System.out.println(t + <span class="string">" acquired "</span> + second);</div><div class="line"></div><div class="line">           second.release();</div><div class="line">           System.out.println(t + <span class="string">" released "</span> + second);</div><div class="line"></div><div class="line">           first.release();</div><div class="line">           System.out.println(t + <span class="string">" released "</span> + first);</div><div class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">           ex.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you run this, you will more than likely have a hung process. Issues of <code>lock ordering</code> apply to semaphores as much as regular mutexes or synchronization in Java. In some cases, timeouts (see note on tryAcquire() later in the article) can be used to prevent deadlocks from causing a process to hang up, but typically a deadlock is a symptom of a logic error which can be avoided. </p>
<p>The main things that you should be careful of when using semaphores (including binary semaphores, i.e. mutexes) are:</p>
<ul>
<li>Not releasing after acquire (either missing release call or an exception is thrown and there is no finally block)</li>
<li>Long held semaphores, causing thread starvation</li>
<li>Deadlocks (as seen above)</li>
</ul>
<h2 id="Useful-Tricks-with-Semaphores"><a href="#Useful-Tricks-with-Semaphores" class="headerlink" title="Useful Tricks with Semaphores"></a>Useful Tricks with Semaphores</h2><p>One interesting property of Semaphores in Java is that <code>release doesn’t have to be called by the same thread as acquire</code>. This means you could have a thread limiter that pools or creates threads based on a semaphore by calling acquire(). Then, the running thread could release its own semaphore permit when it completes. This is a useful property that we don’t have with normal mutexes in Java.</p>
<p>Another trick is to <code>increase the number of permits at runtime</code>. Contrary to what you might guess, <code>the number of permits in a semaphore isn’t fixed</code>, and <code>a call to release() will always increment the number of permits, even if no corresponding acquire() call was made</code>. Note that this can also result in bugs if you are incorrectly calling release() when no acquire() was made.</p>
<p>Finally, there are a few useful methods to be familiar with in Java’s Semaphore. The method <code>acquireInterruptibly()</code> will acquire a resource, reattempting if it is interrupted. This means no outside handling of InterruptedException. The method <code>tryAcquire()</code> allows us to limit how long we will wait for a permit – <code>we can either return immediately if there is no permit to obtain, or wait a specified timeout</code>. If you somehow have known deadlocks that you can’t fix easily or track down, you could help prevent locking up processes by using tryAcquire() with suitable timeouts.</p>
<h2 id="Uses"><a href="#Uses" class="headerlink" title="Uses"></a>Uses</h2><p>What are some possible uses for counting semaphores? The following come to mind:<br>Limiting concurrent access to disk (this can kill performance due to competing disk seeks)</p>
<ul>
<li>Thread creation limiting</li>
<li>JDBC connection pooling / limiting</li>
<li>Network connection throttling</li>
<li>Throttling CPU or memory intensive tasks</li>
</ul>
<hr>
<p>Reference</p>
<p><a href="http://tutorials.jenkov.com/java-concurrency/semaphores.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/semaphores.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Spring configuration styles]]></title>
      <url>https://phoenixjiangnan.github.io/2016/04/03/spring/Spring-Spring-configuration-styles/</url>
      <content type="html"><![CDATA[<p>JavaConfig can be used in conjunction with any or all of Spring’s other container configuration approaches.</p>
<h2 id="6-1-JavaConfig-and-XML"><a href="#6-1-JavaConfig-and-XML" class="headerlink" title="6.1. JavaConfig and XML"></a>6.1. JavaConfig and XML</h2><h3 id="6-1-1-Bootstrapping-JavaConfig-from-XML-with-ConfigurationPostProcessor"><a href="#6-1-1-Bootstrapping-JavaConfig-from-XML-with-ConfigurationPostProcessor" class="headerlink" title="6.1.1.  Bootstrapping JavaConfig from XML with ConfigurationPostProcessor"></a>6.1.1.  Bootstrapping JavaConfig from XML with ConfigurationPostProcessor</h3><p>You may desire or be required to use XML as the primary mechanism for configuring the container, but wish to selectively use @Configuration classes to define certain beans. For such cases, JavaConfig provides ConfigurationPostProcessor, a Spring BeanPostProcessor capable of processing @Configuration classes.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- first, define your individual @Configuration classes as beans --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myapp.config.AppConfig"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myapp.config.DataConfig"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- be sure to include the JavaConfig bean post-processor --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.config.java.process.ConfigurationPostProcessor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Then, bootstrap an XML ApplicationContext:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application-config.xml"</span>);</div></pre></td></tr></table></figure>
<p>The beans defined in AppConfig and DataConfig will be available via context.</p>
<a id="more"></a>
<p>6.1.1.1. Configuring configurations</p>
<p>An added benefit that comes along with bootstrapping JavaConfig from XML is that the configuration bean instances are eligible, just as any other bean, for dependency injection:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- a possible "configurable configuration" --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.my.company.config.AppConfiguration"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"env"</span> <span class="attr">value</span>=<span class="string">"TESTING"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"monitoring"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"certificates"</span> <span class="attr">value</span>=<span class="string">"classpath:/META-INF/config/MyCompany.certs"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- JavaConfig post-processor --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.config.java.process.ConfigurationPostProcessor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>6.1.2.  Bootstrapping XML from JavaConfig with @ImportXml</p>
<p>The @ImportXml annotation is provided to support importing beans defined in XML into @Configuration classes.</p>
<p>datasource-config.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:hsqldb:hsql://localhost:9001"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.hsqldb.jdbcDriver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@AnnotationDrivenConfig</span> <span class="comment">// enable the @Autowired annotation</span></div><div class="line"><span class="meta">@ImportXml</span>(<span class="string">"classpath:com/company/app/datasource-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">    <span class="comment">// autowire the DataSource bean declared in datasource-config.xml</span></div><div class="line">    <span class="meta">@Autowired</span> DataSource dataSource;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooRepository <span class="title">fooRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// inject the autowired-from-XML dataSource</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcFooRepository(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooService <span class="title">fooService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FooServiceImpl(fooRepository());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[Tip]    Tip<br>Regardless of the bootstrapping mechanism used - ConfigurationPostProcessor or @ImportXml - bean references may always be bi-directional. XML-defined beans may reference @Configuration-defined beans and vice-versa.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Enum and EnumSet]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/30/best%20practices/design%20pattern/Enum-and-EnumSet/</url>
      <content type="html"><![CDATA[<h1 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h1><h2 id="Enum-with-Single-Value"><a href="#Enum-with-Single-Value" class="headerlink" title="Enum with Single Value"></a>Enum with Single Value</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ScheduleType &#123;</div><div class="line">    Hourly(<span class="number">0</span>), Daily(<span class="number">1</span>), Weekly(<span class="number">2</span>), Monthly(<span class="number">3</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> m_type;</div><div class="line"></div><div class="line">    ScheduleType(<span class="keyword">int</span> type) &#123;</div><div class="line">        m_type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m_type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ScheduleType s = ScheduleType.Daily;</div><div class="line">System.out.println(s.getType()); <span class="comment">// 1</span></div><div class="line">System.out.println(s.name());    <span class="comment">// Daily</span></div><div class="line"></div><div class="line"><span class="comment">// ### Create enum from ordinal ###</span></div><div class="line">ScheduledAction s = ScheduledAction.values()[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// ### Create enum from String ###</span></div><div class="line">s = ScheduleType.valueOf(<span class="string">"Hourly"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NotificationType &#123;</div><div class="line">    Server(<span class="string">"Server"</span>), Client(<span class="string">"Client"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String m_notificationType;</div><div class="line"></div><div class="line">    NotificationType(String type) &#123;</div><div class="line">        m_notificationType = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNotificationType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m_notificationType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Enum-with-Multiple-Value"><a href="#Enum-with-Multiple-Value" class="headerlink" title="Enum with Multiple Value"></a>Enum with Multiple Value</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> States &#123;</div><div class="line">    MASSA(<span class="string">"Massachusetts"</span>,  <span class="string">"MA"</span>,   <span class="keyword">true</span>),</div><div class="line">    MICHI(<span class="string">"Michigan"</span>,       <span class="string">"MI"</span>,   <span class="keyword">false</span>),;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String full;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String abbr;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> originallyColony;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">States</span><span class="params">(String full, String abbr, <span class="keyword">boolean</span> originallyColony)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.full = full;</div><div class="line">        <span class="keyword">this</span>.abbr = abbr;</div><div class="line">        <span class="keyword">this</span>.originallyColony = originallyColony;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> full;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbbrName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> abbr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOriginallyColony</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> originallyColony;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out.println(States.ALABAMA);                         <span class="comment">// Prints "ALABAMA"</span></div><div class="line">System.out.println(States.ALABAMA.getFullName());           <span class="comment">// Prints "Alabama"</span></div><div class="line">System.out.println(States.ALABAMA.getAbbrName());           <span class="comment">// Prints "AL"</span></div><div class="line">System.out.println(States.ALABAMA.isOriginallyColony());    <span class="comment">// Prints "false"</span></div><div class="line"></div><div class="line">States s = States.MASS;</div><div class="line">s = States.valueOf(<span class="string">"MASS"</span>);</div></pre></td></tr></table></figure>
<h1 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h1><p>A specialized <code>Set</code> implementation for use with enum types. All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors. This representation is extremely compact and efficient. The space and time performance of this class should be good enough to allow its use as a high-quality, typesafe alternative to traditional int-based “bit flags.” Even bulk operations (such as containsAll and retainAll) should run very quickly if their argument is also an enum set.</p>
<p>The <code>iterator</code> returned by the iterator method traverses the elements in their natural order (the order in which the enum constants are declared). The returned iterator is weakly consistent: it will never throw ConcurrentModificationException and it may or may not show the effects of any modifications to the set that occur while the iteration is in progress.</p>
<p>Null elements are not permitted. Attempts to insert a null element will throw NullPointerException. Attempts to test for the presence of a null element or to remove one will, however, function properly.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Factory Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/30/best%20practices/design%20pattern/Design-Pattern-Factory-Pattern/</url>
      <content type="html"><![CDATA[<h2 id="Use-Scenario"><a href="#Use-Scenario" class="headerlink" title="Use Scenario:"></a>Use Scenario:</h2><ul>
<li>When you want to create objects implementing some interface, or having the same parent</li>
<li>Creating an object is complex, e.g. lots of constructor parameters</li>
<li><p>Possible to simplify choice of objects</p>
</li>
<li><p>If object creation code is spread in whole application, and if you need to change the process of object creation then you need to go in each and every place to make necessary changes. After finishing this article, while writing your application, consider using factory pattern.</p>
</li>
</ul>
<h3 id="E-g-1"><a href="#E-g-1" class="headerlink" title="E.g. 1"></a>E.g. 1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Interface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Imagine that this class requires lots of </div><div class="line">* configuration before use, e.g. via constructor parameters</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">AbstractAnimal</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"cat"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">AbstractAnimal</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"dog"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAT = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DOG = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* static method!!!  IMPORTANT!!!*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">createAnimal</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">        <span class="keyword">switch</span>(type)&#123;</div><div class="line">            <span class="keyword">case</span> CAT:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat();</div><div class="line">            <span class="keyword">case</span> DOG:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dog();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Animal animal = AnimalFactory.createAnimal(AnimalFactory.CAT);</div><div class="line">        animal.speak(); <span class="comment">// cat</span></div><div class="line">        animal.eat(); <span class="comment">// chomp chomp</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="E-g-2"><a href="#E-g-2" class="headerlink" title="E.g. 2"></a>E.g. 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CarType &#123;</div><div class="line">    Benz(<span class="string">"Benz"</span>), BMW(<span class="string">"BMW"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"Driving Benz "</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"Driving Bmw "</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverFactory</span></span>&#123;  </div><div class="line">    <span class="comment">// Notice! return an Interface instead of an implementation!</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(CarType t)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">if</span>(t == CarType.Benz)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == CarType.BMW)  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bmw();  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> Exception();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Magnate</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123; </div><div class="line">            Car car = DriverFactory.getCar(<span class="string">"benz"</span>); </div><div class="line">            car.drive();</div><div class="line">            ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="E-g-3"><a href="#E-g-3" class="headerlink" title="E.g. 3"></a>E.g. 3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ShapeType &#123;</div><div class="line">    Rectangle(<span class="string">"Rectangle"</span>), Square(<span class="string">"Square"</span>), Circle(<span class="string">"Circle"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(ShapeType t)</span></span>&#123;</div><div class="line">      <span class="keyword">if</span>(t == <span class="keyword">null</span>)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;		</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(t == ShapeType.Circle)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(t == ShapeType.RECTANGLE)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(t == ShapeType.Square)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPatternDemo</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      Shape shape1 = ShapeFactory.getShape(<span class="string">"CIRCLE"</span>);</div><div class="line">      shape1.draw();</div><div class="line"></div><div class="line">      Shape shape2 = ShapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</div><div class="line">      shape2.draw();</div><div class="line"></div><div class="line">      Shape shape3 = ShapeFactory.getShape(<span class="string">"SQUARE"</span>);</div><div class="line">      shape3.draw();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring-and-Factory-Pattern"><a href="#Spring-and-Factory-Pattern" class="headerlink" title="Spring and Factory Pattern"></a>Spring and Factory Pattern</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Template interface to generate emails for different type of notifications</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Generate email subject</div><div class="line">     * */</div><div class="line">    <span class="function">String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Generate email body</div><div class="line">     * */</div><div class="line">    <span class="function">String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TimeZoneSupportService timeZoneSupportService;</div><div class="line">    <span class="keyword">private</span> Date lastCheckTime;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor to override batch size</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralEmailTemplate</span><span class="params">(TimeZoneSupportService timeZoneSupportService, Date lastCheckTime)</span> </span>&#123;</div><div class="line">        m_timeZoneSupportService = timeZoneSupportService;</div><div class="line">        m_lastCheckTime = lastCheckTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerEmailTemplate</span> <span class="keyword">extends</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerHealthEmailTemplate</span><span class="params">(TimeZoneSupportService timeZoneSupportService)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(timeZoneSupportService, <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server health"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowDiskSpaceEmailTemplate</span> <span class="keyword">extends</span> <span class="title">GeneralEmailTemplate</span> <span class="keyword">implements</span> <span class="title">IEmailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LowDiskSpaceEmailTemplate</span><span class="params">(TimeZoneSupportService timeZoneSupportServicet)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(timeZoneSupportService, <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"low disk"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"low disk space"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.xxx"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailTemplateFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> TimeZoneSupportService timeZoneSupportService;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ServerHealth"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getServerHealthEmailTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerHealthEmailTemplate(timeZoneSupportService);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"LowDiskSpace"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getLowDiskSpaceEmailTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LowDiskSpaceEmailTemplate(timeZoneSupportService);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> appropriate email template according to given NotificationType</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> IEmailTemplate <span class="title">getEmailTemplate</span><span class="params">(NotificationType notificationType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(notificationType == NotificationType.ServerHealth) &#123;</div><div class="line">            <span class="keyword">return</span> getServerHealthEmailTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(notificationType == NotificationType.LowDiskSpace) &#123;</div><div class="line">            <span class="keyword">return</span> getLowDiskSpaceEmailTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IEmailTemplate() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">makeSubject</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">makeBody</span><span class="params">(List&lt;INotification&gt; notificationList)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Abstract Factory Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/30/best%20practices/design%20pattern/Design-Pattern-Abstract-Factory-Pattern/</url>
      <content type="html"><![CDATA[<p>Abstract Factory patterns work around  <code>a super-factory which creates other factories</code>. This factory is also called as <code>factory of factories</code>. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>In Abstract Factory pattern, <code>an interface is responsible for creating a factory of related objects without explicitly specifying their classes</code>. Each generated factory can give the objects as per the Factory pattern.</p>
<h3 id="E-g-1"><a href="#E-g-1" class="headerlink" title="E.g. 1"></a>E.g. 1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(Shape s)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Shape s)</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"s - Inside Red::fill() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"s - Inside Green::fill() method."</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create an Abstract class to get factories for Color and Shape Objects.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</div><div class="line">   <span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Create Factory classes extending AbstractFactory to generate object of concrete class based on given information.</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</div><div class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;		</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">         </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">         </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;		</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"RED"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Red();</div><div class="line">         </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"GREEN"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Green();</div><div class="line">         </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"BLUE"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Blue();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a Factory generator/producer class to get factories by passing an information such as Shape or Color</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</div><div class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"SHAPE"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</div><div class="line">         </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"COLOR"</span>))&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Use the FactoryProducer to get AbstractFactory in order to get factories of concrete classes by passing an information such as type.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPatternDemo</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</div><div class="line"></div><div class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</div><div class="line">      shape1.draw();</div><div class="line"></div><div class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</div><div class="line">      shape2.draw();</div><div class="line">      </div><div class="line">      Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</div><div class="line">      shape3.draw();</div><div class="line"></div><div class="line">      AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">"COLOR"</span>);</div><div class="line"></div><div class="line">      Color color1 = colorFactory.getColor(<span class="string">"RED"</span>);</div><div class="line">      color1.fill(shape2);</div><div class="line"></div><div class="line">      Color color2 = colorFactory.getColor(<span class="string">"Green"</span>);</div><div class="line">      color2.fill(shape3);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="E-g-2"><a href="#E-g-2" class="headerlink" title="E.g. 2"></a>E.g. 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Abstract Product</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Button</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OSXButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"I'm an OSXButton"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"I'm a WinButton"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Abstract Product</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Label</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OSXLabel</span> <span class="keyword">implements</span> <span class="title">Label</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"I'm an OSXLabel"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinLabel</span> <span class="keyword">implements</span> <span class="title">Label</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"I'm a WinLabel"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Abstract Factory</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GUIFactory</span> </span>&#123;</div><div class="line">	<span class="function">Button <span class="title">createButton</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Label <span class="title">createLabel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Concrete Factory</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WinButton();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Label <span class="title">createLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WinLabel();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Concrete Factory</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OSXFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> OSXButton();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Label <span class="title">createLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> OSXLabel();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Client application is not aware about the how the product is created. Its only responsible to give a name of </span></div><div class="line"><span class="comment">//concrete factory</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Application</span><span class="params">(GUIFactory factory)</span> </span>&#123;</div><div class="line">		Button button = factory.createButton();</div><div class="line">		Label label = factory.createLabel();</div><div class="line">		button.paint();</div><div class="line">		label.paint();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationRunner</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> Application(createOsSpecificFactory());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GUIFactory <span class="title">createOsSpecificFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">		String osname = System.getProperty(<span class="string">"os.name"</span>).toLowerCase();</div><div class="line">		<span class="keyword">if</span>(osname != <span class="keyword">null</span> &amp;&amp; osname.contains(<span class="string">"windows"</span>))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> WinFactory();</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> OSXFactory();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Design Pattern - Builder Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/30/best%20practices/design%20pattern/Design-Pattern-Builder-Pattern/</url>
      <content type="html"><![CDATA[<p>The builder pattern is an object creation software design pattern. </p>
<blockquote>
<p>Unlike the <code>abstract factory pattern</code> and the <code>factory method pattern</code> whose intention is to enable polymorphism, the intention of the builder pattern is to </p>
<ul>
<li>find a solution to the telescoping constructor anti-pattern</li>
<li>separate the construction of a complex object from its representation. </li>
</ul>
<p>By doing so the same construction process can create different representations.</p>
<p>The <code>telescoping constructor anti-pattern</code> occurs when the increase of object constructor parameter combination leads to an exponential list of constructors. Instead of using numerous constructors, the builder pattern uses another object, a builder, that receives each initialization parameter step by step and then returns the resulting constructed object at once.</p>
</blockquote>
<p>The builder pattern has another benefit. It can be used for objects that contain flat data (html code, SQL query, X.509 certificate…), that is to say, data that can’t be easily edited. This type of data cannot be edited step by step and must be edited at once. The best way to construct such an object is to use a builder class.</p>
<p>Builder often builds a Composite. Often, designs start out using Factory Method (less complicated, more customizable, subclasses proliferate) and evolve toward Abstract Factory, Prototype, or Builder (more flexible, more complex) as the designer discovers where more flexibility is needed. Sometimes creational patterns are complementary: Builder can use one of the other patterns to implement which components are built. Builders are good candidates for a fluent interface.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreetMap</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Point origin;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Point destination;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Color waterColor;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Color landColor;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">		<span class="comment">// Required parameters</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Point origin;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Point destination;</div><div class="line"></div><div class="line">		<span class="comment">// Optional parameters - initialize with default values</span></div><div class="line">		<span class="keyword">private</span> Color waterColor         = Color.BLUE;</div><div class="line">		<span class="keyword">private</span> Color landColor          = <span class="keyword">new</span> Color(<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line">	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Point origin, Point destination)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.origin = origin;</div><div class="line">			<span class="keyword">this</span>.destination = destination;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">waterColor</span><span class="params">(Color color)</span> </span>&#123;</div><div class="line">			waterColor = color;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">landColor</span><span class="params">(Color color)</span> </span>&#123;</div><div class="line">			landColor = color;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> StreetMap <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> StreetMap(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// private constructor</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">StreetMap</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">		<span class="comment">// Required parameters</span></div><div class="line">		origin      = builder.origin;</div><div class="line">		destination = builder.destination;</div><div class="line"></div><div class="line">		<span class="comment">// Optional parameters</span></div><div class="line">		waterColor         = builder.waterColor;</div><div class="line">		landColor          = builder.landColor;</div><div class="line">		highTrafficColor   = builder.highTrafficColor;</div><div class="line">		mediumTrafficColor = builder.mediumTrafficColor;</div><div class="line">		lowTrafficColor    = builder.lowTrafficColor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">		StreetMap map = <span class="keyword">new</span> StreetMap.Builder(<span class="keyword">new</span> Point(<span class="number">50</span>, <span class="number">50</span>), <span class="keyword">new</span> Point(<span class="number">100</span>, <span class="number">100</span>))</div><div class="line">		                    .landColor(Color.GRAY)</div><div class="line">		                    .waterColor(Color.BLUE.brighter())</div><div class="line">				            .build();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Guava - Cache]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/30/java/guava/Guava-Cache/</url>
      <content type="html"><![CDATA[<h1 id="Google-Guava"><a href="#Google-Guava" class="headerlink" title="Google Guava"></a><a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="external">Google Guava</a></h1><ol>
<li>Cache Heating<ul>
<li><code>Pre-loading</code> v.s. <code>Non-loading</code></li>
</ul>
</li>
<li>Concurrency<ul>
<li>Lock striping (a couple of locks for different key segments)</li>
<li>ReadWriteLock</li>
</ul>
</li>
<li>Weak keys<ul>
<li>What if the cache keys are transient objects (e.g. requests), which don’t belong in the cache if there are no other references elsewhere?</li>
<li>Allow the garbage collector to immediately collect cache keys when other references are gone</li>
</ul>
</li>
<li>Eviction<ul>
<li>Passive<ul>
<li>cache max size</li>
<li>cache max weight</li>
</ul>
</li>
<li>Active<ul>
<li>time to idle - expireAfterAccess()</li>
<li>time to live - expireAfterWrite()</li>
</ul>
</li>
<li>Order<ul>
<li>LRU (Least Recently Used Cache)<ul>
<li>HashMap + DoublyLinkedList</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Two layer caching (L1 + L2 cache)</li>
<li>Cache statistics &amp; performance tuning<ul>
<li>Enable cache runtime configuration<ul>
<li>change max size/weight</li>
</ul>
</li>
<li>Statistics<ul>
<li>Hit rate/ hit count</li>
<li>Miss rate/ miss count</li>
<li>Load exception count</li>
<li>Load success count</li>
<li>Average load penalty</li>
<li>Total load time</li>
</ul>
</li>
</ul>
</li>
<li>RemovalNotification<ul>
<li>Sometimes cached entries are associated with resources which need to be closed or cleaned up</li>
</ul>
</li>
<li>Refresh<ul>
<li><code>Automatic Refresh</code> v.s. <code>Passive Visit-triggered Refresh</code></li>
<li><code>Asynchronized</code> v.s. <code>Synchronized</code></li>
<li><code>Bulk Operation</code> v.s. <code>Single entry</code></li>
</ul>
</li>
<li>Snapshot &amp; iterating<ul>
<li>cache changes dynamically</li>
<li>define asMap() to make a snapshot</li>
</ul>
</li>
</ol>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123; </div><div class="line">	<span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span></span>; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Naive-LRU-Cache-O-N-operation"><a href="#Naive-LRU-Cache-O-N-operation" class="headerlink" title="Naive LRU Cache - O(N) operation"></a>Naive LRU Cache - O(N) operation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get O(N)</span></div><div class="line"><span class="comment">// put O(N)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</div><div class="line">	<span class="keyword">private</span> Queue&lt;K&gt; queue;</div><div class="line">	<span class="keyword">private</span> Map&lt;K, V&gt; map;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">		capacity = c;</div><div class="line">		queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;K&gt;();</div><div class="line">		map = <span class="keyword">new</span> ConcurrentHashMap&lt;K, V&gt;(capacity);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            <span class="comment">// When getting an element, re-arrange the sequence</span></div><div class="line">            queue.remove((Integer) key);</div><div class="line">            queue.add(key);</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> map.get(key);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(key == <span class="keyword">null</span> || value == <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(map.containsKey(key))&#123;</div><div class="line">			queue.remove(key);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(queue.size() &gt;= capacity)&#123;</div><div class="line">			K expiredKey = queue.poll();</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(expiredKey != <span class="keyword">null</span>)&#123;</div><div class="line">				map.remove(expiredKey);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		queue.add(key);</div><div class="line">		map.put(key, value);</div><div class="line">		<span class="comment">// printMapQueue();</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">		map.clear();</div><div class="line">		queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;K&gt;();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Advanced-LRU-Cache-O-1-operation"><a href="#Advanced-LRU-Cache-O-1-operation" class="headerlink" title="Advanced LRU Cache - O(1) operation"></a>Advanced LRU Cache - O(1) operation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Use a doubly linked list</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    K key;</div><div class="line">    V value;</div><div class="line">    Node&lt;V&gt; next;</div><div class="line">    Node&lt;V&gt; prev;</div><div class="line">    </div><div class="line">    <span class="comment">// assume getters / setters / constructors / whatever you need</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// get O(1)</span></div><div class="line"><span class="comment">// put O(1)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line">    <span class="keyword">private</span> Node&lt;V&gt; head, end;</div><div class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;V&gt;&gt; map;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        capacity = c;</div><div class="line">        head = <span class="keyword">new</span> Node&lt;V&gt;();</div><div class="line">        end = head;</div><div class="line">        map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            Node n = map.get(key);</div><div class="line">            n.prev.next = n.next;</div><div class="line">            end.next = n;</div><div class="line">            end = end.next;</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> map.get(key).getValue();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        Node n = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</div><div class="line">            n = map.get(key);</div><div class="line">            n.prev.next = n.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(map.size() &gt;= capacity) &#123;</div><div class="line">            n = head.next;</div><div class="line">            head.next = n.next;</div><div class="line">            </div><div class="line">            map.remove(n.getKey());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Node newn = <span class="keyword">new</span> Node(key, value); </div><div class="line">        end.next = newn;</div><div class="line">        end = end.next;</div><div class="line">        map.put(key, newn);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown - Markdown tutorial - how to write in Markdown]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/28/tools/markdown/Markdown-Markdown-tutorial-how-to-write-in-Markdown/</url>
      <content type="html"><![CDATA[<h1 id="MD-tutorial"><a href="#MD-tutorial" class="headerlink" title="MD tutorial"></a>MD tutorial</h1><p>标签（空格分隔）： backbone</p>
<hr>
<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜"><a href="#1-制作一份待办事宜" class="headerlink" title="1. 制作一份待办事宜"></a>1. 制作一份待办事宜</h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制"><a href="#4-高效绘制" class="headerlink" title="4. 高效绘制"></a>4. 高效绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制"><a href="#5-高效绘制" class="headerlink" title="5. 高效绘制"></a>5. 高效绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cache - Design a distributed cache system]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/27/system%20design/cache/Cache-Design-a-distributed-cache-system/</url>
      <content type="html"><![CDATA[<p>Here’s <a href="http://jimwebber.org/2011/02/scaling-neo4j-with-cache-sharding-and-neo4j-ha/" target="_blank" rel="external">A blog</a> talking about the cache sharding mechanism for Neo4j.</p>
<p>The way that </p>
<a id="more"></a> 
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cache - Best practices to design cache system for your system]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/27/system%20design/cache/Cache-Best-Practices-to-design-cache-system-for-your-system/</url>
      <content type="html"><![CDATA[<p>In this post, we are gonna discuss some best practices when you design a local cache. Another post ‘System Design: Cache - design a distributed cache system’ will talk about designing a distributed cache system or cluster.</p>
<h2 id="1-A-key-value-collection-is-not-a-Cache"><a href="#1-A-key-value-collection-is-not-a-Cache" class="headerlink" title="1. A key/value collection is not a Cache"></a>1. A key/value collection is not a Cache</h2><p>Almost all projects I worked on have been using some sort of custom caching solutions, built on top of Java Maps. A Map is not an out-of-the-box Caching solution, since a Cache is more than a key/value store. And it’s defninitely more complicated that the general LRU cache implementation you ran into in interviewing. </p>
<p>A Cache also requires:</p>
<blockquote>
<ul>
<li>eviction policies (LRU is one policy, but there are more)</li>
<li>max size limit (this is easier to implement use hashmap)</li>
<li>persistent store</li>
<li>weak references keys</li>
<li>statistics</li>
</ul>
</blockquote>
<p>A Java Map doesn’t offer these features and you shouldn’t spend your customer’s money to write a custom cache solution either. You should choose a professional cache like <code>EHCache</code> or <code>Guava Cache</code>, which are both powerful and simple to use. Those tools are constantly tested by all those projects employing them, so the code quality is higher than most custom built solutions.</p>
<h2 id="2-Use-a-cache-abstraction-layer"><a href="#2-Use-a-cache-abstraction-layer" class="headerlink" title="2. Use a cache abstraction layer"></a>2. Use a cache abstraction layer</h2><p>A very flexible solution is the <code>Spring Cache abstraction</code>. The <code>@Cacheable</code> annotation allows you to separate the business logic code from the <code>caching cross-cutting concern</code>. The caching solution is therefore configurable and it’s not going to pollute your business methods.</p>
<h2 id="3-Beware-of-the-caching-overhead"><a href="#3-Beware-of-the-caching-overhead" class="headerlink" title="3. Beware of the caching overhead"></a>3. Beware of the caching overhead</h2><p>Every API has a cost, and caching is no different. If you cache a web service or an expensive database call, then the overhead is probably negligible. If you use a local cache for a recursive algorithm, you need to be aware of the overall caching solution overhead. Even the Spring cache abstraction has an overhead, so make sure the benefits outweigh the costs.</p>
<h2 id="4-If-your-database-queries-are-slow-the-cache-should-be-your-last-resort"><a href="#4-If-your-database-queries-are-slow-the-cache-should-be-your-last-resort" class="headerlink" title="4. If your database queries are slow, the cache should be your last resort"></a>4. If your database queries are slow, the cache should be your last resort</h2><h3 id="4-1-Optimize-your-query-first"><a href="#4-1-Optimize-your-query-first" class="headerlink" title="4.1 Optimize your query first"></a>4.1 Optimize your query first</h3><blockquote>
<p>If you use an ORM tool like <code>Hibernate</code>, that’s the first place where your optimization process should start from.</p>
</blockquote>
<p>Make sure the fetching strategy is properly designed, and you don’t suffer from <code>N+1 query problems</code>. You could also assert the SQL statement count to validate the ORM generated queries.</p>
<h3 id="4-2-Optimize-your-database-index"><a href="#4-2-Optimize-your-database-index" class="headerlink" title="4.2 Optimize your database index"></a>4.2 Optimize your database index</h3><blockquote>
<p>When you’re done optimizing your ORM SQL query generation, you should check your database for slow queries. Make sure all indexes are in place and that your SQL queries are effective.</p>
</blockquote>
<p>The indexes must always fit into RAM, otherwise you will hit the more expensive SSD or HDD. Your database has the ability to cache query results, so take advantage of it.</p>
<h3 id="4-3-First-Level-Cache-a-k-a-JPA-cache"><a href="#4-3-First-Level-Cache-a-k-a-JPA-cache" class="headerlink" title="4.3 First Level Cache, a.k.a JPA cache"></a>4.3 First Level Cache, a.k.a JPA cache</h3><p>Caching the object’s state for the duration of a transaction or request is normally not an issue. First-level cache always Associates with the Session object. This is normally called a <code>1st level cache</code>, or the <code>EntityManager cache</code>, and is <code>required</code> by JPA for proper transaction semantics.</p>
<p>Hibernate uses this cache by default. Here, it processes one transaction after another one, means wont process one transaction many times. Mainly it reduces the number of SQL queries it needs to generate within a given transaction. That is instead of updating after every modification done in the transaction, it updates the transaction only at the end of the transaction.</p>
<h3 id="4-4-Second-Level-Cache"><a href="#4-4-Second-Level-Cache" class="headerlink" title="4.4 Second Level Cache"></a>4.4 Second Level Cache</h3><p>The 2nd level cache spans transactions and EntityManagers, and is not required as part of JPA. Second-level cache always associates with the Session Factory object.</p>
<p>Most JPA providers support a 2nd level cache, but the implementation and semantics vary. Some JPA providers default to enabling a 2nd level cache, and some do not use a 2nd level cache by default.</p>
<p><a href="https://en.wikibooks.org/wiki/Java_Persistence/Caching#1st_Level_Cache" target="_blank" rel="external">https://en.wikibooks.org/wiki/Java_Persistence/Caching#1st_Level_Cache</a></p>
<h3 id="4-5-Cache-Sharding-and-Distribued-Cache"><a href="#4-5-Cache-Sharding-and-Distribued-Cache" class="headerlink" title="4.5 Cache Sharding and Distribued Cache"></a>4.5 Cache Sharding and Distribued Cache</h3><p>If the data set is large and the growth rate is high you could horizontally scale it on multiple <code>shards</code>.</p>
<p>If all of those actions are not enough, you may consider a professional caching solution such as <code>Memcached</code>.</p>
<p>Another post <a href="">System Design: Cache - design a distributed cache system</a> will talk about designing a distributed cache system or cluster in detail.</p>
<h2 id="5-What-about-data-consistency"><a href="#5-What-about-data-consistency" class="headerlink" title="5. What about data consistency?"></a>5. What about data consistency?</h2><blockquote>
<p>When you start using a cache in front of your business layer, the data consistency constraint is being challenged.</p>
</blockquote>
<p>The benefits of ACID may be compromised if the cache is not properly synchronized with the database. This is like keeping a denormalized form of your actual data. If a root entity changes it may affect a large portion of your cache. If you discard the cache entries, all the caching benefits are lost. If you asynchronously update the cache entries you loose the strong data consistency, leaving you with an <code>eventual consistent</code> data model.</p>
<blockquote>
<p>Reference:<br><a href="http://vladmihalcea.com/2014/03/03/caching-best-practices/" target="_blank" rel="external">http://vladmihalcea.com/2014/03/03/caching-best-practices/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Factory Pattern]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/27/spring/Spring-Factory-Pattern/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITemplate</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">generateSubject</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">String <span class="title">generateBody</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"Server"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTemplate</span> <span class="keyword">implements</span> <span class="title">ITemplate</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateSubject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server subject"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateBody</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server body"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"Client"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTemplate</span> <span class="keyword">implements</span> <span class="title">ITemplate</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateSubject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"client subject"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateBody</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"client body"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Factory</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"template"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"Server"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ITemplate <span class="title">getServerTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"Client"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ITemplate <span class="title">getClientTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ITemplate <span class="title">getTemplate</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(type == Type.Server) &#123;</div><div class="line">            <span class="keyword">return</span> getServerTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == Type.Client) &#123;</div><div class="line">            <span class="keyword">return</span> getClientTemplate();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Junit test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateFactoryTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Tested</span> TemplateFactory templateFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        ITemplate template = templateFactory.getTemplate(Type.Server);</div><div class="line">        Assert.assertTrue(template <span class="keyword">instanceof</span> ServerTemplate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring - Dynamic DataSource]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/25/spring/Spring-Dynamic-Datasource/</url>
      <content type="html"><![CDATA[<p>Recently I was involved in a project that requires dynamic determining data sources between multiple PostgreSQL databases. The use case is that, after the primary database fails over to a secondary one, applications should be able to switch their jdbc connections to the new primary dynamically at runtime.</p>
<p>I found this blog quite useful as an entry point for the dynamic datasource domain <a href="http://spring.io/blog/2007/01/23/dynamic-datasource-routing/" target="_blank" rel="external">http://spring.io/blog/2007/01/23/dynamic-datasource-routing/</a></p>
<blockquote>
<p>Spring 2.0.1 introduced an <code>AbstractRoutingDataSource</code>. I believe that it deserves attention, since (based on frequent questions from clients) I have a hunch that there are quite a few ‘home-grown’ solutions to this problem floating around. That combined with the fact that it is trivial to implement yet easy to overlook, and now I have several reasons to dust off my corner of the team blog.</p>
<p>The general idea is that a routing DataSource acts as an <code>intermediary</code> - while the <code>real</code> DataSource can be determined <code>dynamically at runtime</code> based upon <code>a lookup key</code>. </p>
<p>One potential use-case is for ensuring transaction-specific isolation levels which are not supported by standard JTA. For that, Spring provides an implementation: <code>IsolationLevelDataSourceRouter</code>. Consult its JavaDoc for a detailed description including configuration examples.</p>
<p>Another interesting use-case is determination of the DataSource based on some attribute of the current user’s context.</p>
</blockquote>
<a id="more"></a>
<p>So let dive into the ideas and details.</p>
<p><a href="http://mvnrepository.com/artifact/org.springframework/spring-jdbc" target="_blank" rel="external"><code>Spring JDBC</code></a> makes it happen by having an abstract class <code>AbstractRoutingDataSource</code>.</p>
<p><code>AbstractRoutingDataSource</code> class only has one abstract method (many concrete methods) that children classes need to override - that’s</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>which is used to route requests to different data sources according to a lookup key.</p>
<p>Let’s get the idea of how it works via an example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> FileWatchService fws;</div><div class="line">	<span class="keyword">private</span> Key key; </div><div class="line">	</div><div class="line">	<span class="comment">// constructor</span></div><div class="line">	<span class="comment">// FileWatchService is a class that you create to watch config changes in a file</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestRoutingDataSource</span> <span class="params">(FileWatchService service)</span> </span>&#123;</div><div class="line">		Preconditions.checkNotNull(service);</div><div class="line">		fws = serivce;</div><div class="line">		<span class="comment">// This makes sure if key's value gets changed in the file</span></div><div class="line">		<span class="comment">// key in TestRoutingDataSource gets updated</span></div><div class="line">		fws.watchForKey(TestRoutingDataSource, key.getName());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> key.getValue();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(Key k)</span> </span>&#123;</div><div class="line">		key = k;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So now, we have a concrete impl of the method, and it will return different values based on that value in the file (which is watched by the FileWatchService). The file’s content should be something like:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key_name: key_value (* key_value will be switched between host names of primary and secondary PostgreSQL)</div></pre></td></tr></table></figure>
<p>Our next step is to construct a routing data source bean for applications to use.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBeanFactory</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String db1_name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> db1_port;</div><div class="line">	<span class="keyword">private</span> String db2_name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> db2_port;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">getRoutingDataSource</span><span class="params">(FileWatchService service)</span> </span>&#123;</div><div class="line">		TestRoutingDataSource trds = <span class="keyword">new</span> TestRoutingDataSource(service);</div><div class="line">		</div><div class="line">		Map&lt;Object, Object&gt; dsmap = Maps.newHashMap();</div><div class="line">		</div><div class="line">		DataSource ds1 = getBasicDataSourceByHostName(db1_name, db1_port);</div><div class="line">		DataSource ds2 = getBasicDataSourceByHostName(db2_name, db2_port);</div><div class="line">		</div><div class="line">		<span class="comment">// put hostnames and data sources to a mapping</span></div><div class="line">		dsmap.put(db1_name, ds1);</div><div class="line">		dsmap.put(db2_name, ds2);</div><div class="line">		</div><div class="line">		<span class="comment">// set the mapping between hostnames and data sources</span></div><div class="line">		trds.setTargetDataSources(dsmap);</div><div class="line">		</div><div class="line">		<span class="comment">// set the default data source</span></div><div class="line">		trds.setDefaultTargetDataSource(ds1);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> trds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> DataSource <span class="title">getBasicDataSourceByHostName</span><span class="params">(String hostname, <span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">		BasicDataSource bds = <span class="keyword">new</span> BasicDataSource();</div><div class="line">		<span class="comment">// basic settings for a data source</span></div><div class="line">		bds.setDriverClassName(...);</div><div class="line">		bds.seturl(getUrl(hostname, port));</div><div class="line">		bds.setUsername(...);</div><div class="line">		bds.setPassword(...);</div><div class="line">		</div><div class="line">		<span class="comment">// set validation query, max wait millis, max total, max idle</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> bds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Method Reference]]></title>
      <url>https://phoenixjiangnan.github.io/2016/03/05/java/java%208/lambda/Java-8-Method-Reference/</url>
      <content type="html"><![CDATA[<p>You use lambda expressions to create anonymous methods. Sometimes, however, a lambda expression does nothing but call an existing method. In those cases, it’s often clearer to refer to the existing method by name. Method references enable you to do this; they are compact, easy-to-read lambda expressions for methods that already have a name.</p>
<h1 id="What-is-Method-References"><a href="#What-is-Method-References" class="headerlink" title="What is Method References?"></a>What is Method References?</h1><p>It is a feature which is related to Lambda Expression. It allows us to reference constructors or methods without executing them. Method references and Lambda are similar in that they both require a target type that consist of a compatible functional interface.</p>
<h1 id="Types-of-Method-Reference"><a href="#Types-of-Method-Reference" class="headerlink" title="Types of Method Reference"></a>Types of Method Reference</h1><p>There are four types of method reference, the table below summarizes this.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Example</th>
<th>Syntax</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. Reference to a static method</td>
<td>ContainingClass::staticMethodName</td>
<td>Class::staticMethodName</td>
</tr>
<tr>
<td>2. Reference to a constructor</td>
<td>ClassName::new</td>
<td>ClassName::new</td>
</tr>
<tr>
<td>3. Reference to an instance method of an arbitrary object of a particular type</td>
<td>ContainingType::methodName</td>
<td>Class::instanceMethodName</td>
</tr>
<tr>
<td>4. Reference to an instance method of a particular object</td>
<td>containingObject::instanceMethodName</td>
<td>object::instanceMethodName</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h1 id="1-Reference-to-a-Static-Method"><a href="#1-Reference-to-a-Static-Method" class="headerlink" title="1 . Reference to a Static Method"></a>1 . Reference to a Static Method</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List  numbers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</div><div class="line">        List primeNumbers = StaticMethod.findPrimeNumbers(numbers, StaticMethod::isPrime);</div><div class="line"> </div><div class="line">        System.out.println(<span class="string">"Prime Numbers are "</span>+primeNumbers);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(number == <span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= number; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">findPrimeNumbers</span><span class="params">(List list, Predicate predicate)</span> </span>&#123;</div><div class="line">        List sortedNumbers = <span class="keyword">new</span> ArrayList();</div><div class="line">        list.stream().filter((i) -&gt; (predicate.test(i))).forEach((i) -&gt; &#123;</div><div class="line">            sortedNumbers.add(i);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> sortedNumbers;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
<p>As you can see in this code, we made reference to a static method in this class.</p>
<p>Method reference is very similar to Lambda.Lets look at the difference here</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Lambda Form	</div><div class="line">List ns = StaticMethod.testPredicate(numbers, a -&gt; StaticMethod.isPrime(a));</div><div class="line"></div><div class="line">// Method Reference</div><div class="line">List ns = StaticMethod.testPredicate(numbers, StaticMethod::isPrime);</div></pre></td></tr></table></figure>
<h1 id="2-Reference-To-Constructor"><a href="#2-Reference-To-Constructor" class="headerlink" title="2. Reference To Constructor"></a>2. Reference To Constructor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constructor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO code application logic here</span></div><div class="line">        List  numbers = Arrays.asList(<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>);</div><div class="line">        List squaredNumbers = Constructor.findSquareRoot(numbers,Double::<span class="keyword">new</span>);</div><div class="line">         System.out.println(<span class="string">"Square root of numbers = "</span>+squaredNumbers);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">findSquareRoot</span><span class="params">(List list, Function&lt;Double, Double&gt; f)</span></span>&#123;</div><div class="line">        List result = <span class="keyword">new</span> ArrayList();</div><div class="line">        list.forEach(x -&gt; result.add(f.apply(Math.sqrt(x))));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This is very similar to reference to to a static method.The difference between the two is, the constructor reference method name is new.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Lambda Form</div><div class="line">List squaredNumbers = Constructor.findSquareRoot(numbers, x -&gt; new Double(x));</div><div class="line"></div><div class="line">// Method Reference</div><div class="line">List squaredNumbers = Constructor.findSquareRoot(numbers,Double::new);</div></pre></td></tr></table></figure>
<h1 id="3-Reference-To-an-Instance-Method-Of-An-Arbitrary-Object-Of-A-Particular-Type"><a href="#3-Reference-To-an-Instance-Method-Of-An-Arbitrary-Object-Of-A-Particular-Type" class="headerlink" title="3. Reference To an Instance Method Of An Arbitrary Object Of A Particular Type"></a>3. Reference To an Instance Method Of An Arbitrary Object Of A Particular Type</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceMethodAOPT</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line"> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> age;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List persons = Arrays.asList(</div><div class="line">            <span class="keyword">new</span> Person(<span class="string">"Albert"</span>, <span class="number">80</span>),</div><div class="line">            <span class="keyword">new</span> Person(<span class="string">"Ben"</span>, <span class="number">15</span>),</div><div class="line">            <span class="keyword">new</span> Person(<span class="string">"Charlote"</span>, <span class="number">20</span>),</div><div class="line">            <span class="keyword">new</span> Person(<span class="string">"Dean"</span>, <span class="number">6</span>),</div><div class="line">            <span class="keyword">new</span> Person(<span class="string">"Elaine"</span>, <span class="number">17</span>));</div><div class="line"> </div><div class="line">            List allAges = InstanceMethodAOPT.listAllAges(persons, Person::getAge);</div><div class="line">            System.out.println(<span class="string">"Printing out all ages \n"</span>+allAges);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">listAllAges</span><span class="params">(List person, Function&lt;Person, Integer&gt; f)</span></span>&#123;</div><div class="line">        List result = <span class="keyword">new</span> ArrayList();</div><div class="line">        person.forEach(x -&gt; result.add(f.apply(x)));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This mean providing reference to any of the persons object in the List of a particular type which is the Person.So the containing type is persons and the method name is getAge();</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Lambda Form</div><div class="line">List allAges = InstanceMethodAOPT.listAllAges(persons, x -&gt; x.getAge());</div><div class="line"></div><div class="line">// Method Reference</div><div class="line">List allAges = InstanceMethodAOPT.listAllAges(persons, Person::getAge);</div></pre></td></tr></table></figure>
<h1 id="4-Reference-To-An-Instance-Method-Of-A-Particular-Object"><a href="#4-Reference-To-An-Instance-Method-Of-A-Particular-Object" class="headerlink" title="4. Reference To An Instance Method Of A Particular Object"></a>4. Reference To An Instance Method Of A Particular Object</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceMethodOAPO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List names = Arrays.asList(<span class="string">"David"</span>, <span class="string">"Richard"</span>, <span class="string">"Samuel"</span>, <span class="string">"Rose"</span>, <span class="string">"John"</span>);</div><div class="line">        InstanceMethodOAPO.printNames(names,System.out::println);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNames</span><span class="params">(List list, Consumer c )</span></span>&#123;</div><div class="line">        list.forEach(x -&gt; c.accept(x));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Since System.out is an instance of type PrintStream, we then call theprintln method of the instance.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Lambda Form</div><div class="line">ReferenceToInstanceMethodOAPO.printNames(names, x -&gt; System.out.println(x));</div><div class="line"></div><div class="line">// Method Reference</div><div class="line">ReferenceToInstanceMethodOAPO.printNames(names,System.out::println);</div></pre></td></tr></table></figure>
<h1 id="Take-Away"><a href="#Take-Away" class="headerlink" title="Take Away?"></a>Take Away?</h1><ul>
<li>You can use replace <code>Lambda Expressions</code> with <code>Method References</code> where Lamdba is invoking already defined methods.</li>
<li>You can’t pass arguments to methods Reference</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Merkle Tree and Anti-Entropy]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/16/distributed%20system/algorithems/Merkle-Tree-and-Anti-Entropy/</url>
      <content type="html"><![CDATA[<p><a href="http://www.slideshare.net/quipo/modern-algorithms-and-data-structures-1-bloom-filters-merkle-trees" target="_blank" rel="external">http://www.slideshare.net/quipo/modern-algorithms-and-data-structures-1-bloom-filters-merkle-trees</a></p>
<p><a href="http://thornydev.blogspot.com/2015/06/merkle-tree.html" target="_blank" rel="external">http://thornydev.blogspot.com/2015/06/merkle-tree.html</a><br><a href="https://github.com/apache/cassandra/blob/4a748f31599b7add59c522e72f0b52d372351041/src/java/org/apache/cassandra/utils/MerkleTrees.java" target="_blank" rel="external">https://github.com/apache/cassandra/blob/4a748f31599b7add59c522e72f0b52d372351041/src/java/org/apache/cassandra/utils/MerkleTrees.java</a><br><a href="https://github.com/apache/cassandra/blob/05de664acd369d98154148dbf441accfa7f0552c/src/java/org/apache/cassandra/utils/MerkleTree.java" target="_blank" rel="external">https://github.com/apache/cassandra/blob/05de664acd369d98154148dbf441accfa7f0552c/src/java/org/apache/cassandra/utils/MerkleTree.java</a><br><a href="http://adc.sourceforge.net/draft-jchapweske-thex-02.html" target="_blank" rel="external">http://adc.sourceforge.net/draft-jchapweske-thex-02.html</a></p>
<h1 id="1-Merkle-Tree"><a href="#1-Merkle-Tree" class="headerlink" title="1. Merkle Tree"></a>1. Merkle Tree</h1><p>Merkle trees are typically implemented as <code>binary trees</code> where<br>1) each non-leaf node is a hash of the two nodes below it<br>2) The leaves can either be the data itself or a hash/signature of the data.</p>
<p>Thus, if any difference at the root hash is detected between systems, a binary search can be done through the tree to determine which particular subtree has the problem. Thus typically only <code>log(N)</code> nodes need to be inspected rather than all N nodes to find the problem area.</p>
<p>Merkle trees are particularly effective in distributed systems where two separate systems can compare the data on each node via a <code>Merkle tree</code> and quickly determine which data sets (subtrees) are lacking on one or the other system. Then only the subset of missing data needs to be sent. Cassandra, based on Amazon’s Dynamo, for example, uses Merkle trees as an anti-entropy measure to detect inconsistencies between replicas.</p>
<p>In the diagram below <code>IH=InternalHashFn</code> and <code>LH=LeafHashFn</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, consider a file made up of 4 segments, S1, S2, S3, and S4</div><div class="line">            ROOT=IH(E+F)</div><div class="line">                /      \</div><div class="line">               /        \</div><div class="line">        E=IH(A+B)       F=IH(C+D)</div><div class="line">        /     \           /    \</div><div class="line">       /       \         /      \</div><div class="line">  A=LH(S1)  B=LH(S2) C=LH(S3)  D=LH(S4)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">For example, consider a file made up of 5 segments, S1, S2, S3, S4, and S5.</div><div class="line"></div><div class="line">                       ROOT=IH(H+E)</div><div class="line">                        /        \</div><div class="line">                       /          \</div><div class="line">                H=IH(F+G)          E</div><div class="line">                /       \           \</div><div class="line">               /         \           \</div><div class="line">        F=IH(A+B)       G=IH(C+D)     E</div><div class="line">        /     \           /     \      \</div><div class="line">       /       \         /       \      \</div><div class="line">  A=LH(S1)  B=LH(S2) C=LH(S3)  D=LH(S4) E=LH(S5)</div></pre></td></tr></table></figure>
<h1 id="2-Tree-Hash-EXchange-format-THEX"><a href="#2-Tree-Hash-EXchange-format-THEX" class="headerlink" title="2. Tree Hash EXchange format (THEX)"></a>2. Tree Hash EXchange format (THEX)</h1><p>It is common practice in distributed systems to use secure hash algorithms to verify the integrity of content. The employment of <code>secure hash algorithms</code> enables systems to retreive content from completely untrusted hosts with only a small amount of trusted metadata.</p>
<p>Typically, algorithms such as <code>SHA-1</code> and <code>MD5</code> have been used to check the content integrity after <code>retrieving the entire file</code>. These full file hash techniques work fine in an environment where the content is received from a single host and there are no streaming requirements. However, there are an increasing number of systems that retrieve a single piece of content from multiple untrusted hosts, and require content verification well in advance of retrieving the entire file.</p>
<p>Many modern peer-to-peer content delivery systems employ <code>fixed size &quot;block hashes&quot;</code> to provide a finer level of granularity in their integrity checking. This approach is still limited in the verification resolution it can attain. Additionally, all of the hash information must be retrieved from a trusted host, which can limit the scalability and reliability of the system.</p>
<blockquote>
<p>Another way to verify content is to use the <code>hash tree approach</code>. This approach has the desired characteristics missing from the full file hash approach and works well for very large files. The idea is to break the file up into a number of small pieces, hash those pieces, and then iteratively combine and rehash the resulting hashes in a tree-like fashion until a single “root hash” is created.</p>
</blockquote>
<p>The root hash by itself behaves exactly the same way that full file hashes do. If the root hash is retrieved from a trusted source, it can be used to verify the integrity of the entire content. More importantly, the root hash can be combined with a small number of other hashes to verify the integrity of any of the file segments.</p>
<p>For example, consider a file made up of four segments, S1, S2, S3, and S4. Let H() be the hash function, and ‘+’ indicate concatenation. You could take the traditional hash value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VALUE=H(S1+S2+S3+S4)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Or, you could employ a tree approach. The tree hash utilizes two hash algorithms - one for leaf hashes and one for internal hashes. Let LH() be the leaf hash function and IH() be the internal hash function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">             ROOT=IH(E+F)</div><div class="line">              /      \</div><div class="line">             /        \</div><div class="line">      E=IH(A+B)       F=IH(C+D)</div><div class="line">      /     \           /    \</div><div class="line">     /       \         /      \</div><div class="line">A=LH(S1)  B=LH(S2) C=LH(S3)  D=LH(S4)</div></pre></td></tr></table></figure>
<p>Now, assuming that the <code>ROOT</code> is retrieved from a trusted source, the integrity of a file segment coming from an untrusted source can be checked with a small amount of hash data. For instance, if S1 is received from an untrusted host, the integrity of S1 can be verified with just B and F. With these, it can be verified that, yes: S1 can be combined up to equal the ROOT hash, even without seeing the other segments. (It is just as impractical to create falsified values of B and F as it is to manipulate any good hash function to give desired results – so B and F can come from untrusted sources as well.) Similarly, if some other untrusted source provides segments S3 and S4, their integrity can be easily checked when combined with hash E. From segments S3 and S4, the values of C and D and then F can be calculated. With these, you can verify that S3 and S4 can combine up to create the ROOT – even if other sources are providing bogus S1 and S2 segments. Bad info can be immediately recognized and discarded, and good info retained, even in situations where you could not even begin to calculate a traditional full-file hash.</p>
<p>Another interesting property of the tree approach is that it can be used to verify (tree-aligned) subranges whose size is any multiple of the base segment size.</p>
<pre><code>Consider for example an initial segment size of 1,024 bytes (=1KB), and a file of 32GB (=2^25KB). You could verify:

- a single 1,024-byte block, with about 25 proof-assist values
- or a block of size 16GB (=2^24KB), with a single proof-assist value
- or anything in between.
</code></pre><h2 id="2-1-Hash-Functions"><a href="#2-1-Hash-Functions" class="headerlink" title="2.1 Hash Functions"></a>2.1 Hash Functions</h2><blockquote>
<p><code>The strength of the hash tree construct is only as strong as the underlying hash algorithm.</code> Thus, it is RECOMMENDED that a secure hash algorithm such as <code>SHA-1</code> be used as the basis of the hash tree.</p>
<p>In order to protect against collisions between <code>leaf hashes</code> and <code>internal hashes</code>, different hash constructs are used to hash the leaf nodes and the internal nodes. The same hash algorithm is used as the basis of each construct, but a single ‘1’ byte in network byte order, or 0x01 is prepended to the input of the internal node hashes, and a single ‘0’ byte, or 0x00 is prepended to the input of the leaf node hashes.</p>
</blockquote>
<p>Let <code>H()</code> be the secure hash algorithm, for example <code>SHA-1</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">internal hash function = IH(X) = H(0x01, X)</div><div class="line"></div><div class="line">leaf hash function = LH(X) = H(0x00, X)</div></pre></td></tr></table></figure>
<h2 id="2-2-Unbalanced-Trees"><a href="#2-2-Unbalanced-Trees" class="headerlink" title="2.2 Unbalanced Trees"></a>2.2 Unbalanced Trees</h2><blockquote>
<p>For trees that are unbalanced – that is, they have a number of leaves which is not a power of 2 – interim hash values which do not have a sibling value to which they may be concatenated are promoted, unchanged, up the tree until a sibling is found.</p>
</blockquote>
<p>For example, consider a file made up of 5 segments, S1, S2, S3, S4, and S5.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">                     ROOT=IH(H+E)</div><div class="line">                      /        \</div><div class="line">                     /          \</div><div class="line">              H=IH(F+G)          E</div><div class="line">              /       \           \</div><div class="line">             /         \           \</div><div class="line">      F=IH(A+B)       G=IH(C+D)     E</div><div class="line">      /     \           /     \      \</div><div class="line">     /       \         /       \      \</div><div class="line">A=LH(S1)  B=LH(S2) C=LH(S3)  D=LH(S4) E=LH(S5)</div></pre></td></tr></table></figure>
<p>In the above example, E does not have any immediate siblings with which to be combined to calculate the next generation. So, E is promoted up the tree, without being rehashed, until it can be paired with value H. The values H and E are then concatenated, and hashed, to produce the ROOT hash.</p>
<h2 id="2-3-Choice-Of-Segment-Size"><a href="#2-3-Choice-Of-Segment-Size" class="headerlink" title="2.3 Choice Of Segment Size"></a>2.3 Choice Of Segment Size</h2><p>Any segment size is possible, but the choice of base segment size establishes the smallest possible unit of verification.</p>
<blockquote>
<p>If the segment size &gt;= size of the file to be hashed, the tree hash value is the value of the single segment’s value, which is the same as the underlying hash algorithm value for the whole file.</p>
</blockquote>
<p>A segment size equal to the digest algorithm output size would more than double the total amount of data to be hashed, and thus more than double the time required to calculate the tree hash structure, as compared to a simple full-file hash. However, once the segment size reaches several multiples of the digest size, calculating the tree adds only a small fractional time overhead beyond what a traditional full-file hash would cost.</p>
<p>Otherwise, smaller segments are better. Smaller segments allow, but do not require, the retention and use of fine-grained verification info, (A stack-based tree calculation procedure need never retain more than one pending internal node value per generation before it can be combined with a sibling, and all interim values below a certain generation size of interest can be discarded.) Further, it is beneficial for multiple application domains and even files of wildly different sizes to share the same base segment size, so that tree structures can be shared and used to discover correlated subranges.</p>
<p>Thus the authors recommend a segment size of 1,024 bytes for most applications, as a sort of “smallest common denominator”, even for applications involving multi-gigabyte or terabyte files. This segment size is 40-50 times larger than common secure hash digest lengths (20-24 bytes), and thus adds no more than 5-10% in running time as compared to the “infinite segment” size case – the traditional full-file hash.</p>
<p>Considering a 1 terabyte file, the maximum dynamic state required during the calculation of the tree root value is 29 interim node values – less than 1KB assuming a 20-byte digest algorithm like SHA-1. Only interim values in generations of interest for range verification need to be remembered for tree exchange, so if only 8GB ranges ever need to be verified, all but the top 8 generations of internal values (255 hashes) can be discarded.</p>
<h1 id="3-Serialization-Format"><a href="#3-Serialization-Format" class="headerlink" title="3. Serialization Format"></a>3. Serialization Format</h1><p>This section presents a serialization format for Merkle Hash Trees that utilizes the <code>`Direct Internet Message Encapsulation (DIME) format</code>. DIME is a generic message format that allows for multiple payloads, either text or binary. </p>
<p>The Merkle Hash Tree serialization format consists of two different payloads. </p>
<ul>
<li>The first is XML encoded meta-data about the hash tree</li>
<li>and the second is binary serialization of the tree itself. The binary serialization is required for two important reasons:</li>
</ul>
<p>Compactness of Representation - A key virtue of the hash tree approach is that it provides considerable integrity checking power with a relatively small amount of data. A typical hash tree consists of a large number of small hashes. Thus a text encoding, such as XML, could easily double the storage and transmission requirements of the hash tree, negating one of its key benefits.</p>
<p>Random Access - In order to take full advantage of the hash tree construct, it is often necessary to read the elements of the hash tree in a random access fashion. A common usage of this serialization format will be to access hash data over the HTTP protocol using “Range Requests”. This will allow implementors to retrieve small bits of hash information on-demand, even requesting different parts of the tree from different hosts on the network.</p>
<h2 id="3-1-DIME-Encapsulation"><a href="#3-1-DIME-Encapsulation" class="headerlink" title="3.1 DIME Encapsulation"></a>3.1 DIME Encapsulation</h2><p>It is RECOMMENDED that DIME be used to encapsulate the payloads described in this specification. The current version of DIME is “draft-nielsen-dime-01” at (<a href="http://gotdotnet.com/team/xml_wsspecs/dime/default.aspx" target="_blank" rel="external">http://gotdotnet.com/team/xml_wsspecs/dime/default.aspx</a>).</p>
<p>It is RECOMMENDED that the first payload in the DIME Message be the XML Tree Description. The XML Tree description payload MUST be before the the binary serialized tree.</p>
<p>It is RECOMMENDED that the binary serialized tree be stored in a single payload rather than using chunked payloads. This will allow implementations to read the tree hash data in a random access fashion within the payload.</p>
<h2 id="3-2-XML-Tree-Description"><a href="#3-2-XML-Tree-Description" class="headerlink" title="3.2 XML Tree Description"></a>3.2 XML Tree Description</h2><p>The XML Tree Description contains metadata about the hash tree and file that is necessary to interpret the binary serialized tree. An important consideration in the design of THEX is the intention for it to be received from untrusted sources within a distributed network. The only information that needs to be obtained from a trusted source is the root hash and the segment size. The root hash by itself can be used to verify the integrity of the serialized tree and of the file itself.</p>
<p>It is RECOMMENDED that implementers assume that the serialized file was obtained from an untrusted source, thus the use of this format to store non-verifiable information, such as general file metadata, is highly discouraged. For instance, a malicious party could easily forge metadata, such as the author or file name.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hashtree system "http://open-content.net/spec/thex/thex.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hashtree</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">file</span> <span class="attr">size</span>=<span class="string">'1146045066'</span> <span class="attr">segmentsize</span>=<span class="string">'1024'</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">digest</span> <span class="attr">algorithm</span>=<span class="string">'http://www.w3.org/2000/09/xmldsig#sha1'</span> </span></div><div class="line">            <span class="attr">outputsize</span>=<span class="string">'20'</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">serializedtree</span> <span class="attr">depth</span>=<span class="string">'22'</span> </span></div><div class="line">                    <span class="attr">type</span>=<span class="string">'http://open-content.net/spec/thex/breadthfirst'</span> </div><div class="line">                    <span class="attr">uri</span>=<span class="string">'uuid:09233523-345b-4351-b623-5dsf35sgs5d6'</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">hashtree</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-1-File-Size"><a href="#3-2-1-File-Size" class="headerlink" title="3.2.1 File Size"></a>3.2.1 File Size</h3><p>The file size attribute refers to the size, in bytes, of the file that the hash tree was generated from.</p>
<h3 id="3-2-2-File-Segment-Size"><a href="#3-2-2-File-Segment-Size" class="headerlink" title="3.2.2 File Segment Size"></a>3.2.2 File Segment Size</h3><p>The file segment size identifies the size, in bytes, of the file segments that were used to create the hash tree. As noted in Choice Of Segment Size, it is recommended that applications use a small, common segment size such as 1,024 bytes in order to retain maximum flexibility and interoperability.</p>
<h3 id="3-2-3-Digest-Algorithm"><a href="#3-2-3-Digest-Algorithm" class="headerlink" title="3.2.3 Digest Algorithm"></a>3.2.3 Digest Algorithm</h3><p>This attribute provides the identifier URI for the digest algorithm. A URI is used here as an identifier instead of a regular string to avoid the overhead of IANA-style registration. By using URIs, new types can be created without having to consult any other entity. The URIs are only to be used for type identification purposes, but it is RECOMMENDED that the URIs point to information about the given digest function. This convention is inspired by RFC 3275, the XML Signature Specification. For instance, the SHA-1 algorithm is identified by “<a href="http://www.w3.org/2000/09/xmldsig#sha1" target="_blank" rel="external">http://www.w3.org/2000/09/xmldsig#sha1</a>“. All digest algorithms defined in RFC 3275 are supported. The Tiger algorithm is also supported and is identified by “<a href="http://open-content.net/spec/digest/tiger" target="_blank" rel="external">http://open-content.net/spec/digest/tiger</a>“.</p>
<h3 id="3-2-4-Digest-Output-Size"><a href="#3-2-4-Digest-Output-Size" class="headerlink" title="3.2.4 Digest Output Size"></a>3.2.4 Digest Output Size</h3><p>This attribute specifies the size of the output of the hash function, in bytes.</p>
<h3 id="3-2-5-Serialized-Tree-Depth"><a href="#3-2-5-Serialized-Tree-Depth" class="headerlink" title="3.2.5 Serialized Tree Depth"></a>3.2.5 Serialized Tree Depth</h3><p>This attribute specifies the number of levels of the tree that have been serialized. This value allows control over the amount of storage space required by the serialized tree. In general, each row added to the tree will double the storage requirements while also doubling the verification resolution.</p>
<h3 id="3-2-6-Serialized-Tree-Type"><a href="#3-2-6-Serialized-Tree-Type" class="headerlink" title="3.2.6 Serialized Tree Type"></a>3.2.6 Serialized Tree Type</h3><p>This attribute provides the identifier URI for the serialization type. Just as with the Digest Algorithm, new serialization types can be added and described without going through a formal IANA-style process. One serialization type is defined for “Breadth-First Serialization” later in this document.</p>
<h3 id="3-2-7-Serialized-Tree-URI"><a href="#3-2-7-Serialized-Tree-URI" class="headerlink" title="3.2.7 Serialized Tree URI"></a>3.2.7 Serialized Tree URI</h3><p>This attribute provides the URI of the binary serialized tree payload. If used within a DIME payload, it is recommended that this URI be location independant, such as the “uuid:” URI’s used in the SOAP in DIME specification or SHA-1 URNs.</p>
<h2 id="3-3-Breadth-First-Serialization"><a href="#3-3-Breadth-First-Serialization" class="headerlink" title="3.3 Breadth-First Serialization"></a>3.3 Breadth-First Serialization</h2><p>Normal breadth-first serialization is the recommended manner in which to serialize the hash tree. This format includes the root hash first, and then each “row” of hashes is serialized until the tree has been serialized to the lowest level as specified by the “Serialized Tree Depth” field.</p>
<p>For example, consider a file made up of 5 segments, S1, S2, S3, S4, and S5.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">                     ROOT=IH(H+E)</div><div class="line">                      /        \</div><div class="line">                     /          \</div><div class="line">              H=IH(F+G)          E</div><div class="line">              /       \           \</div><div class="line">             /         \           \</div><div class="line">      F=IH(A+B)       G=IH(C+D)     E</div><div class="line">      /     \           /     \      \</div><div class="line">     /       \         /       \      \</div><div class="line">A=LH(S1)  B=LH(S2) C=LH(S3)  D=LH(S4) E=LH(S5)</div></pre></td></tr></table></figure>
<p>The hashes would be serialized in the following order: ROOT, H, E, F, G, E, A, B, C, D, E. Notice that E is serialized as a part of the each row. This is due to its promotion as there are no available siblings in the lower rows. If we choose to serialize the entire tree, the serialized tree depth would be 4, and for a 20 byte digest output, the entire tree payload would occupy 11*20 = 220 bytes.</p>
<h3 id="3-3-1-Serialization-Type-URI"><a href="#3-3-1-Serialization-Type-URI" class="headerlink" title="3.3.1 Serialization Type URI"></a>3.3.1 Serialization Type URI</h3><p>The serialization type URI for a Merkle Hash Tree serialized in normal breadth-first form is “<a href="http://open-content.net/spec/thex/breadthfirst" target="_blank" rel="external">http://open-content.net/spec/thex/breadthfirst</a>“.</p>
<h1 id="Anti-Entropy"><a href="#Anti-Entropy" class="headerlink" title="Anti-Entropy"></a>Anti-Entropy</h1><blockquote>
<p><code>Anti-Entropy</code> means comparing all the replicas of each piece of data that exist (or are supposed to) and updating each replica to the newest version.</p>
</blockquote>
<p>Cassandra’s implementation is modeled on Dynamo’s, with modifications to support the richer data model. Quoting from Amazon’s Dynamo section 4.7,</p>
<blockquote>
<p>To detect the inconsistencies between replicas faster and to minimize the amount of transferred data, Dynamo uses <code>Merkle trees</code>. A Merkle tree is a hash tree where leaves are hashes of the values of individual keys. Parent nodes higher in the tree are hashes of their respective children. The principal advantage of Merkle tree is that each branch of the tree can be checked independently without requiring nodes to download the entire […] data set.</p>
</blockquote>
<p>The key difference in Cassandra’s implementation of anti-entropy is that the Merkle trees are built <code>per column family</code>, and they are not maintained for longer than it takes to send them to neighboring nodes. Instead, the trees are generated as snapshots of the dataset during major compactions: this means that excess data might be sent across the network, but it saves local disk IO, and is preferable for very large datasets.</p>
<h1 id="Canssandrea’s-Anti-entropy-Overview"><a href="#Canssandrea’s-Anti-entropy-Overview" class="headerlink" title="Canssandrea’s Anti-entropy Overview"></a>Canssandrea’s Anti-entropy Overview</h1><p><code>AntiEntropyService</code> generates MerkleTrees for <code>column families</code> during major compactions. These trees are then exchanged with remote nodes via a TreeRequest/TreeResponse conversation, and when ranges in the trees disagree, the <code>org.apache.cassandra.streaming</code> package is used to repair those ranges.</p>
<p>Tree comparison and repair triggering occur in the single threaded AE_SERVICE_STAGE.</p>
<p>The steps taken to enact a repair are as follows:</p>
<h3 id="1-A-major-compaction-is-triggered-either-via-nodeprobe-or-automatically"><a href="#1-A-major-compaction-is-triggered-either-via-nodeprobe-or-automatically" class="headerlink" title="1. A major compaction is triggered either via nodeprobe, or automatically:"></a>1. A major compaction is triggered either via nodeprobe, or automatically:</h3><ul>
<li>Nodeprobe sends TreeRequest messages to all neighbors of the target node: when a node receives a TreeRequest, it will perform a readonly compaction to immediately validate the column family.</li>
<li>Automatic compactions will also validate a column family and broadcast TreeResponses, but since TreeRequest messages are not sent to neighboring nodes, repairs will only occur if two nodes happen to perform automatic compactions within TREE_STORE_TIMEOUT of one another.</li>
</ul>
<h3 id="2-The-compaction-process-validates-the-column-family-by"><a href="#2-The-compaction-process-validates-the-column-family-by" class="headerlink" title="2. The compaction process validates the column family by:"></a>2. The compaction process validates the column family by:</h3><ul>
<li>Calling getValidator() (which can return a NoopValidator if validation should not be performed),</li>
<li>Calling IValidator.prepare(), which samples the column family to determine key distribution,</li>
<li>Calling IValidator.add() in order for every row in the column family,</li>
<li>Calling IValidator.complete() to indicate that all rows have been added.<ul>
<li>If getValidator decided that the column family should be validated, calling complete() indicates that a valid MerkleTree has been created for the column family.</li>
<li>The valid tree is broadcast to neighboring nodes via TreeResponse, and stored locally.</li>
</ul>
</li>
</ul>
<h3 id="3-When-a-node-receives-a-TreeResponse-it-passes-the-tree-to-rendezvous-which-checks-for-trees-to-rendezvous-with-compare-to"><a href="#3-When-a-node-receives-a-TreeResponse-it-passes-the-tree-to-rendezvous-which-checks-for-trees-to-rendezvous-with-compare-to" class="headerlink" title="3. When a node receives a TreeResponse, it passes the tree to rendezvous(), which checks for trees to rendezvous with / compare to:"></a>3. When a node receives a TreeResponse, it passes the tree to rendezvous(), which checks for trees to rendezvous with / compare to:</h3><ul>
<li>If the tree is local, it is cached, and compared to any trees that were received from neighbors.</li>
<li>If the tree is remote, it is immediately compared to a local tree if one is cached. Otherwise, the remote tree is cached in case a local tree is generated within TREE_STORE_TIMEOUT.</li>
<li>A Differencer object is enqueued for each comparison.</li>
</ul>
<h3 id="4-Differencers-are-executed-in-AE-SERVICE-STAGE-to-compare-the-two-trees"><a href="#4-Differencers-are-executed-in-AE-SERVICE-STAGE-to-compare-the-two-trees" class="headerlink" title="4. Differencers are executed in AE_SERVICE_STAGE, to compare the two trees."></a>4. Differencers are executed in AE_SERVICE_STAGE, to compare the two trees.</h3><ul>
<li>If the trees disagree, the differencer will perform repair for the mismatched ranges via the io.Streaming api.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cassandra V.S. HBase]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/10/distributed%20system/nosql/Cassandra-V-S-HBase/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li>Cassandra satisfies the <code>Availability</code> and <code>Partition Tolerance</code> properties. Its consistency model is <code>Eventual consistency</code></li>
<li>HBase satisfied the <code>Consistency</code> and <code>Partition Tolerance</code> properties. It provides <code>strong consistency</code>.</li>
</ul>
</blockquote>
<hr>
<ul>
<li>Cassandra requires that you identify some nodes as <code>seed nodes</code>, which serve as concentration points for intercluster communication.</li>
<li>HBase requires a node serving as master node, whose job is to monitor and coordinate the actions of region servers. Thus, Cassandra guarantees high availability by allowing multiple seed nodes in a cluster, while HBase guarantees the same via standby master nodes – one of which will become the new master should the current master fail.</li>
</ul>
<hr>
<ul>
<li>Cassandra uses the <code>Gossip protocol</code> for internode communications, and Gossip services are integrated with the Cassandra software. </li>
<li>HBase relies on <code>Zookeeper</code> – an entirely separate distributed application – to handle corresponding tasks.</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>Cassandra</th>
<th>HBase</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lacks concept of a Table. All the documentation will tell you that it’s not common to have multiple keyspaces. That means you have to share a key space in a cluster. Furthermore adding a keyspace requires a cluster restart!</td>
<td>Concept of Table exists. Each table has it’s own key space. This was a big win for us. You can add and remove table as as easily as a RDBMS.</td>
</tr>
<tr>
<td>Uses string keys. Very common to use uuids as the keys. You can use TimeUUID if you want your data to be sorted by time.</td>
<td>Uses binary keys. It’s common to combine three different items together to form a key. This means you can search by more than one key in a give table.</td>
</tr>
<tr>
<td>Even if you use TimeUUID, as Cassandra load balances client requests, hot spotting problem won’t occur. (All the client requests going to one server in a cluster is known as a hot spot problem).</td>
<td>If your key’s first component is time or a sequential number, then hotspotting occurs. All of the new keys will be inserted to one region until it fills up (hence by causing a hotspotting problem).</td>
</tr>
<tr>
<td>Offers sorting of columns.</td>
<td>Does not have sorting of columns.</td>
</tr>
<tr>
<td>Concept of Supercolumn allows you to design very flexible, very complex schemas.</td>
<td>Does not have supercolumns. But you can design a super column like structure as column names and values are binary.</td>
</tr>
<tr>
<td>Does not have any convinience method to increment a column value. In fact the vary nature of eventual consistency makes it difficult to update/write a record and read it instantly after the update. You have to make sure that R + W &gt; N to achive strong consitency.</td>
<td>By design consitent. Offers a nice convinience method to increment counters. Very much suitable for data aggregation.</td>
</tr>
<tr>
<td>Map Reduce support is new. You will need a hadoop cluster to run it. Data will be tranferred from Cassandra cluster to the hadoop cluster. No suitable for running large data map reduce jobs.</td>
<td>Map Reduce support is native. HBase is built on Hadoop. Data does not get transferred.</td>
</tr>
<tr>
<td>Comparatively simpler to maintain if you don’t have to have hadoop.</td>
<td>Comparatively complicated as you have it has many moving pieces such as Zookeeper, Hadoop and HBase itself.</td>
</tr>
<tr>
<td>No master server, hence no single point of failure.</td>
<td>Although there exists a concept of a master server, HBase itself does not depend on it heavily. HBase cluster can keep serving data even if the master goes down. Hadoop namenode is a single point of failure.</td>
</tr>
</tbody>
</table>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gossip Protocol]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/08/distributed%20system/high%20availibility/Gossip-Protocol/</url>
      <content type="html"><![CDATA[<h1 id="Gossip-protocol"><a href="#Gossip-protocol" class="headerlink" title="Gossip protocol"></a>Gossip protocol</h1><p>A gossip protocol is a style of computer-to-computer communication protocol inspired by the form of gossip seen in social networks. Modern distributed systems often use gossip protocols to solve problems that might be difficult to solve in other ways, either because the underlying network has an inconvenient structure and is extremely large, or because gossip solutions are the most efficient ones available.</p>
<p>The term <code>epidemic protocol</code> is sometimes used as a synonym for a gossip protocol, because gossip spreads information in a manner similar to the spread of a virus in a biological community.</p>
<h1 id="Gossip-communication"><a href="#Gossip-communication" class="headerlink" title="Gossip communication"></a>Gossip communication</h1><p>The concept of <code>gossip communication</code> can be illustrated by the analogy of office workers spreading rumors. Let’s say each hour the office workers congregate around the water cooler. Each employee pairs off with another, chosen at random, and shares the latest gossip. At the start of the day, Alice starts a new rumor: she comments to Bob that she believes that Charlie dyes his mustache. At the next meeting, Bob tells Dave, while Alice repeats the idea to Eve. After each water cooler rendezvous, the number of individuals who have heard the rumor roughly doubles (though this doesn’t account for gossiping twice to the same person; perhaps Alice tries to tell the story to Frank, only to find that Frank already heard it from Dave). Computer systems typically implement this type of protocol with a form of random “peer selection”: with a given frequency, each machine picks another machine at random and shares any hot rumors.</p>
<p>The power of gossip lies in the robust spread of information. Even if Dave had trouble understanding Bob, he will probably run into someone else soon and can learn the news that way.</p>
<p>Expressing these ideas in more technical terms, a gossip protocol is one that satisfies the following conditions:</p>
<blockquote>
<ul>
<li>The core of the protocol involves periodic, pairwise, inter-process interactions.</li>
<li>The information exchanged during these interactions is of bounded size.</li>
<li>When agents interact, the state of at least one agent changes to reflect the state of the other.</li>
<li>Reliable communication is not assumed.</li>
<li>The frequency of the interactions is low compared to typical message latencies so that the protocol costs are negligible.</li>
<li>There is some form of randomness in the peer selection. Peers might be selected from the full set of nodes or from a smaller set of<br>neighbors.</li>
<li>Due to the replication there is an implicit redundancy of the delivered information.</li>
</ul>
</blockquote>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Stream]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/06/java/java%208/stream/Java-8-Stream/</url>
      <content type="html"><![CDATA[<h1 id="Package-java-util-stream"><a href="#Package-java-util-stream" class="headerlink" title="Package - java.util.stream"></a>Package - java.util.stream</h1><p>Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections.</p>
<p>For example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = widgets.stream()</div><div class="line">           .filter(b -&gt; b.getColor() == RED)</div><div class="line">           .mapToInt(b -&gt; b.getWeight())</div><div class="line">           .sum();</div></pre></td></tr></table></figure>
<p>Here we use <code>widgets</code>, <code>a Collection&lt;Widget&gt;</code>, as a source for a stream, and then perform a <code>filter-map-reduce</code> on the stream to obtain the sum of the weights of the red widgets. (Summation is an example of a reduction operation.)</p>
<p>The key abstraction introduced in this package is <code>stream</code>. The classes <code>Stream</code>, <code>IntStream</code>, <code>LongStream</code>, and <code>DoubleStream</code> are streams over objects and the primitive int, long and double types. </p>
<h1 id="Difference-between-Streams-and-Collections"><a href="#Difference-between-Streams-and-Collections" class="headerlink" title="Difference between Streams and Collections"></a>Difference between Streams and Collections</h1><p>Streams differ from collections in several ways:</p>
<ul>
<li><code>No storage</code>. A stream is not a data structure that stores elements; instead, it conveys elements from a source such as a data structure, an array, a generator function, or an I/O channel, through a pipeline of computational operations.</li>
<li><code>Functional in nature</code>. An operation on a stream produces a result, but does not modify its source. For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, rather than removing elements from the source collection.</li>
<li><code>Laziness-seeking</code>. Many stream operations, such as filtering, mapping, or duplicate removal, can be implemented lazily, exposing opportunities for optimization. For example, “find the first String with three consecutive vowels” need not examine all the input strings. Stream operations are divided into intermediate (Stream-producing) operations and terminal (value- or side-effect-producing) operations. Intermediate operations are always lazy.</li>
<li><code>Possibly unbounded</code>. While collections have a finite size, streams need not. Short-circuiting operations such as limit(n) or findFirst() can allow computations on infinite streams to complete in finite time.</li>
<li><code>Consumable</code>. The elements of a stream are only visited once during the life of a stream. Like an Iterator, a new stream must be generated to revisit the same elements of the source.</li>
</ul>
<a id="more"></a>
<h1 id="How-to-get-Streams"><a href="#How-to-get-Streams" class="headerlink" title="How to get Streams"></a>How to get Streams</h1><p>Streams can be obtained in a number of ways. Some examples include:</p>
<ul>
<li>From a Collection via the <code>stream()</code> and <code>parallelStream()</code> methods;</li>
<li>From an array via <code>Arrays.stream(Object[])</code>;</li>
<li>From static factory methods on the stream classes, such as <code>Stream.of(Object[])</code>, <code>IntStream.range(int, int)</code> or <code>Stream.iterate(Object, UnaryOperator)</code>;</li>
<li>The lines of a file can be obtained from <code>BufferedReader.lines()</code>;</li>
<li>Streams of file paths can be obtained from methods in Files;</li>
<li>Streams of random numbers can be obtained from <code>Random.ints()</code>;</li>
<li>Numerous other stream-bearing methods in the JDK, including <code>BitSet.stream()</code>, <code>Pattern.splitAsStream(java.lang.CharSequence)</code>, and <code>JarFile.stream()</code>.</li>
</ul>
<p>Additional stream sources can be provided by third-party libraries using these techniques.</p>
<h1 id="Stream-operations-and-pipelines"><a href="#Stream-operations-and-pipelines" class="headerlink" title="Stream operations and pipelines"></a>Stream operations and pipelines</h1><p>Stream operations are divided into <code>intermediate</code> and <code>terminal operations</code>, and are combined to form stream pipelines. </p>
<p>A stream pipeline consists of:</p>
<ul>
<li><code>a source</code> (such as a Collection, an array, a generator function, or an I/O channel)</li>
<li>followed by <code>zero or more intermediate operations</code> such as <code>Stream.filter</code> or <code>Stream.map</code></li>
<li>and a terminal operation such as <code>Stream.forEach</code> or <code>Stream.reduce</code>.</li>
</ul>
<h2 id="Intermediate-Operations"><a href="#Intermediate-Operations" class="headerlink" title="Intermediate Operations"></a>Intermediate Operations</h2><ul>
<li>Intermediate operations return <code>a new stream</code>. Executing an intermediate operation such as <code>filter()</code> does not actually perform any filtering, but instead creates a new stream that, when traversed, contains the elements of the initial stream that match the given predicate. </li>
<li>They are always <code>lazy</code>. Traversal of the pipeline source does not begin until the terminal operation of the pipeline is executed.</li>
</ul>
<h2 id="Terminal-Operations"><a href="#Terminal-Operations" class="headerlink" title="Terminal Operations"></a>Terminal Operations</h2><p>Terminal operations, such as <code>Stream.forEach</code> or <code>IntStream.sum</code>, may traverse the stream to produce a result or a side-effect. </p>
<p>After the terminal operation is performed, the stream pipeline is considered consumed, and can no longer be used; if you need to traverse the same data source again, you must return to the data source to get a new stream. In almost all cases, <code>terminal operations are eager</code>, completing their traversal of the data source and processing of the pipeline before returning. Only the terminal operations <code>iterator()</code> and <code>spliterator()</code> are not; these are provided as an “escape hatch” to enable arbitrary client-controlled pipeline traversals in the event that the existing operations are not sufficient to the task.</p>
<h2 id="Laziness-of-Streams"><a href="#Laziness-of-Streams" class="headerlink" title="Laziness of Streams"></a>Laziness of Streams</h2><p>Processing streams lazily allows for significant efficiencies; in a pipeline such as the filter-map-sum example above, filtering, mapping, and summing can be fused into a single pass on the data, with minimal intermediate state. </p>
<p>Laziness also allows avoiding examining all the data when it is not necessary; for operations such as “find the first string longer than 1000 characters”, it is only necessary to examine just enough strings to find one that has the desired characteristics without examining all of the strings available from the source. (This behavior becomes even more important when the input stream is infinite and not merely large.)</p>
<h2 id="Stateless-and-Stateful-Intermediate-Operation"><a href="#Stateless-and-Stateful-Intermediate-Operation" class="headerlink" title="Stateless and Stateful Intermediate Operation"></a>Stateless and Stateful Intermediate Operation</h2><p>Intermediate operations are further divided into stateless and stateful operations. </p>
<h3 id="Stateless-Intermediate-Operation"><a href="#Stateless-Intermediate-Operation" class="headerlink" title="Stateless Intermediate Operation"></a>Stateless Intermediate Operation</h3><p>Stateless operations, such as filter and map, retain no state from previously seen element when processing a new element – each element can be processed independently of operations on other elements. </p>
<h3 id="Stateful-Intermediate-Operation"><a href="#Stateful-Intermediate-Operation" class="headerlink" title="Stateful Intermediate Operation"></a>Stateful Intermediate Operation</h3><p>Stateful operations, such as <code>distinct</code> and sorted, may incorporate state from previously seen elements when processing new elements.</p>
<p><code>Stateful operations may need to process the entire input before producing a result.</code> For example, one cannot produce any results from sorting a stream until one has seen all elements of the stream. As a result, under parallel computation, some pipelines containing stateful intermediate operations may require multiple passes on the data or may need to buffer significant data. Pipelines containing exclusively stateless intermediate operations can be processed in a single pass, whether sequential or parallel, with minimal data buffering.</p>
<h2 id="Short-circuiting-Operation"><a href="#Short-circuiting-Operation" class="headerlink" title="Short-circuiting Operation"></a>Short-circuiting Operation</h2><p>Further, some operations are deemed short-circuiting operations. An intermediate operation is short-circuiting if, when presented with infinite input, it may produce a finite stream as a result. A terminal operation is short-circuiting if, when presented with infinite input, it may terminate in finite time. Having a short-circuiting operation in the pipeline is a necessary, but not sufficient, condition for the processing of an infinite stream to terminate normally in finite time.</p>
<h1 id="Parallelism"><a href="#Parallelism" class="headerlink" title="Parallelism"></a>Parallelism</h1><p>Processing elements with an explicit for-loop is inherently serial. Streams facilitate parallel execution by reframing the computation as a pipeline of aggregate operations, rather than as imperative operations on each individual element. All streams operations can execute either in serial or in parallel. The stream implementations in the JDK create serial streams unless parallelism is explicitly requested. For example, Collection has methods <code>Collection.stream() and Collection.parallelStream()</code>, which produce sequential and parallel streams respectively; other stream-bearing methods such as <code>IntStream.range(int, int)</code> produce sequential streams but these streams can be efficiently parallelized by invoking their `BaseStream.parallel() method. To execute the prior “sum of weights of widgets” query in parallel, we would do:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sumOfWeights = widgets.parallelStream()</div><div class="line">                    .filter(b -&gt; b.getColor() == RED)</div><div class="line">                    .mapToInt(b -&gt; b.getWeight())</div><div class="line">                    .sum();</div></pre></td></tr></table></figure>
<p>The only difference between the serial and parallel versions of this example is the creation of the initial stream, using <code>parallelStream()</code> instead of <code>stream()</code>. When the terminal operation is initiated, the stream pipeline is executed sequentially or in parallel depending on the orientation of the stream on which it is invoked. Whether a stream will execute in serial or parallel can be determined with the <code>isParallel()</code> method, and the orientation of a stream can be modified with the <code>BaseStream.sequential()</code> and <code>BaseStream.parallel()</code> operations. When the terminal operation is initiated, the stream pipeline is executed sequentially or in parallel depending on the mode of the stream on which it is invoked.</p>
<p>Except for operations identified as explicitly nondeterministic, such as <code>findAny()</code>, whether a stream executes sequentially or in parallel should not change the result of the computation.</p>
<p>Most stream operations accept parameters that describe user-specified behavior, which are often lambda expressions. To preserve correct behavior, these behavioral parameters must be non-interfering, and in most cases must be stateless. Such parameters are always instances of a functional interface such as Function, and are often lambda expressions or method references.</p>
<h1 id="Non-interference"><a href="#Non-interference" class="headerlink" title="Non-interference"></a>Non-interference</h1><p>Streams enable you to execute possibly-parallel aggregate operations over a variety of data sources, including even non-thread-safe collections such as ArrayList. </p>
<p>This is possible only if we can prevent interference with the data source during the execution of a stream pipeline. Except for the escape-hatch operations <code>iterator()</code> and <code>spliterator()</code>, execution begins when the terminal operation is invoked, and ends when the terminal operation completes. For most data sources, preventing interference means ensuring that the data source is not modified at all during the execution of the stream pipeline. The notable exception to this are streams whose sources are concurrent collections, which are specifically designed to handle concurrent modification. Concurrent stream sources are those whose Spliterator reports the <code>CONCURRENT</code> characteristic.</p>
<p>Accordingly, behavioral parameters in stream pipelines whose source might not be concurrent should never modify the stream’s data source. A behavioral parameter is said to interfere with a non-concurrent data source if it modifies, or causes to be modified, the stream’s data source. The need for non-interference applies to all pipelines, not just parallel ones. </p>
<p>Unless the stream source is concurrent, modifying a stream’s data source during execution of a stream pipeline can cause exceptions, incorrect answers, or nonconformant behavior. For well-behaved stream sources, the source can be modified before the terminal operation commences and those modifications will be reflected in the covered elements. For example, consider the following code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>));</div><div class="line">Stream&lt;String&gt; sl = l.stream();</div><div class="line">l.add(<span class="string">"three"</span>);</div><div class="line">String s = sl.collect(joining(<span class="string">" "</span>));</div></pre></td></tr></table></figure>
<ul>
<li>First a list is created consisting of two strings: “one”; and “two”.</li>
<li>Then a stream is created from that list.</li>
<li>Next the list is modified by adding a third string: “three”.</li>
<li>Finally the elements of the stream are collected and joined together.</li>
</ul>
<p>Since the list was modified before the terminal collect operation commenced the result will be a string of “one two three”. All the streams returned from JDK collections, and most other JDK classes, are well-behaved in this manner; for streams generated by other libraries, see Low-level stream construction for requirements for building well-behaved streams.</p>
<h1 id="Stateless-behaviors"><a href="#Stateless-behaviors" class="headerlink" title="Stateless behaviors"></a>Stateless behaviors</h1><p>Stream pipeline results may be non-deterministic or incorrect if the behavioral parameters to the stream operations are stateful.</p>
<p>A stateful lambda (or other object implementing the appropriate functional interface) is one whose result depends on any state which might change during the execution of the stream pipeline. An example of a stateful lambda is the parameter to map() in:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;Integer&gt; set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</div><div class="line">stream.parallel().map(e -&gt; &#123; <span class="keyword">return</span> set.add(e) ? <span class="number">0</span> : e; &#125;)...</div></pre></td></tr></table></figure>
<p>Here, if the mapping operation is performed in parallel, the results for the same input could vary from run to run, due to thread scheduling differences, whereas, with a stateless lambda expression the results would always be the same.</p>
<p>Note also that attempting to access mutable state from behavioral parameters presents you with a bad choice with respect to safety and performance; if you do not synchronize access to that state, you have a data race and therefore your code is broken, but if you do synchronize access to that state, you risk having contention undermine the parallelism you are seeking to benefit from. The best approach is to avoid stateful behavioral parameters to stream operations entirely; there is usually a way to restructure the stream pipeline to avoid statefulness.</p>
<h1 id="Side-effects"><a href="#Side-effects" class="headerlink" title="Side-effects"></a>Side-effects</h1><p>Side-effects in behavioral parameters to stream operations are, in general, discouraged, as they can often lead to unwitting violations of the statelessness requirement, as well as other thread-safety hazards.</p>
<p>If the behavioral parameters do have side-effects, unless explicitly stated, there are no guarantees as to the visibility of those side-effects to other threads, nor are there any guarantees that different operations on the “same” element within the same stream pipeline are executed in the same thread. </p>
<p>Further, the ordering of those effects may be surprising. Even when a pipeline is constrained to produce a result that is consistent with the encounter order of the stream source (for example, <code>IntStream.range(0,5).parallel().map(x -&gt; x*2).toArray()</code> must produce <code>[0, 2, 4, 6, 8])</code>, no guarantees are made as to the order in which the mapper function is applied to individual elements, or in what thread any behavioral parameter is executed for a given element.</p>
<p>Many computations where one might be tempted to use side effects can be more safely and efficiently expressed without side-effects, such as using reduction instead of mutable accumulators. However, side-effects such as using <code>println()</code> for debugging purposes are usually harmless. A small number of stream operations, such as <code>forEach()</code> and <code>peek()</code>, can operate only via side-effects; these should be used with care.</p>
<p>As an example of how to transform a stream pipeline that inappropriately uses side-effects to one that does not, the following code searches a stream of strings for those matching a given regular expression, and puts the matches in a list.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stream.filter(s -&gt; pattern.matcher(s).matches())</div><div class="line">       .forEach(s -&gt; results.add(s));  <span class="comment">// Unnecessary use of side-effects!</span></div></pre></td></tr></table></figure>
<p>This code unnecessarily uses side-effects. If executed in parallel, the non-thread-safety of ArrayList would cause incorrect results, and adding needed synchronization would cause contention, undermining the benefit of parallelism. Furthermore, using side-effects here is completely unnecessary; the forEach() can simply be replaced with a reduction operation that is safer, more efficient, and more amenable to parallelization:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt;results = stream.filter(s -&gt; pattern.matcher(s).matches())</div><div class="line">                            .collect(Collectors.toList());  // No side-effects!</div></pre></td></tr></table></figure>
<h1 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h1><p>Streams may or may not have a defined encounter order. Whether or not a stream has an encounter order depends on the source and the intermediate operations. Certain stream sources (such as List or arrays) are intrinsically ordered, whereas others (such as HashSet) are not. Some intermediate operations, such as <code>sorted()</code>, may impose an encounter order on an otherwise unordered stream, and others may render an ordered stream unordered, such as <code>BaseStream.unordered()</code>. Further, some terminal operations may ignore encounter order, such as <code>forEach()</code>.</p>
<p>If a stream is ordered, most operations are constrained to operate on the elements in their encounter order; if the source of a stream is a List containing [1, 2, 3], then the result of executing <code>map(x -&gt; x*2)</code> must be [2, 4, 6]. However, if the source has no defined encounter order, then any permutation of the values [2, 4, 6] would be a valid result.</p>
<p>For sequential streams, the presence or absence of an encounter order does not affect performance, only determinism. If a stream is ordered, repeated execution of identical stream pipelines on an identical source will produce an identical result; if it is not ordered, repeated execution might produce different results.</p>
<p>For parallel streams, relaxing the ordering constraint can sometimes enable more efficient execution. Certain aggregate operations, such as filtering duplicates (<code>distinct()</code>) or grouped reductions (<code>Collectors.groupingBy()</code>) can be implemented more efficiently if ordering of elements is not relevant. </p>
<p>Similarly, operations that are intrinsically tied to encounter order, such as <code>limit()</code>, may require buffering to ensure proper ordering, undermining the benefit of parallelism. In cases where the stream has an encounter order, but the user does not particularly care about that encounter order, explicitly de-ordering the stream with <code>unordered()</code> may improve parallel performance for some stateful or terminal operations. However, most stream pipelines, such as the “sum of weight of blocks” example above, still parallelize efficiently even under ordering constraints.</p>
<h1 id="Reduction-operations"><a href="#Reduction-operations" class="headerlink" title="Reduction operations"></a>Reduction operations</h1><p>A reduction operation (also called a fold) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers, or accumulating elements into a list. </p>
<p>The streams classes have multiple forms of general reduction operations, called <code>reduce()</code> and <code>collect()</code>, as well as multiple specialized reduction forms such as <code>sum()</code>, <code>max()</code>, or <code>count()</code>.</p>
<p>Of course, such operations can be readily implemented as simple sequential loops, as in:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : numbers) &#123;</div><div class="line">   sum += x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>However, there are good reasons to prefer a reduce operation over a mutative accumulation such as the above. Not only is a reduction “more abstract” – it operates on the stream as a whole rather than individual elements – but a properly constructed reduce operation is inherently parallelizable, so long as the function(s) used to process the elements are associative and stateless. For example, given a stream of numbers for which we want to find the sum, we can write:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = numbers.stream().reduce(<span class="number">0</span>, (x,y) -&gt; x+y);</div></pre></td></tr></table></figure>
<p>or:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = numbers.stream().reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure>
<p>These reduction operations can run safely in parallel with almost no modification:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = numbers.parallelStream().reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure>
<p>Reduction parallellizes well because the implementation can operate on subsets of the data in parallel, and then combine the intermediate results to get the final correct answer. (Even if the language had a “parallel for-each” construct, the mutative accumulation approach would still required the developer to provide thread-safe updates to the shared accumulating variable sum, and the required synchronization would then likely eliminate any performance gain from parallelism.) Using reduce() instead removes all of the burden of parallelizing the reduction operation, and the library can provide an efficient parallel implementation with no additional synchronization required.</p>
<p>The “widgets” examples shown earlier shows how reduction combines with other operations to replace for loops with bulk operations. If widgets is a collection of Widget objects, which have a getWeight method, we can find the heaviest widget with:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">OptionalInt heaviest = widgets.parallelStream()</div><div class="line">                                .mapToInt(Widget::getWeight)</div><div class="line">                                .max();</div></pre></td></tr></table></figure>
<p>In its more general form, a reduce operation on elements of type <code>&lt;T&gt;</code> yielding a result of type <code>&lt;U&gt;</code> requires three parameters:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;U&gt; <span class="function">U <span class="title">reduce</span><span class="params">(U identity, BiFunction&lt;U, ? <span class="keyword">super</span> T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span></span>;</div></pre></td></tr></table></figure>
<p>Here, the identity element is both an initial seed value for the reduction and a default result if there are no input elements. The accumulator function takes a partial result and the next element, and produces a new partial result. The combiner function combines two partial results to produce a new partial result. (The combiner is necessary in parallel reductions, where the input is partitioned, a partial accumulation computed for each partition, and then the partial results are combined to produce a final result.) </p>
<p>More formally, the identity value must be an identity for the combiner function. This means that for all u, <code>combiner.apply(identity, u)</code> is equal to <code>u</code>. Additionally, the combiner function must be associative and must be compatible with the accumulator function: for all u and t, <code>combiner.apply(u, accumulator.apply(identity, t))</code> must be <code>equals()</code> to <code>accumulator.apply(u, t)</code>.</p>
<p>The three-argument form is a generalization of the two-argument form, incorporating a mapping step into the accumulation step. We could re-cast the simple sum-of-weights example using the more general form as follows:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sumOfWeights = widgets.stream()</div><div class="line">                       .reduce(<span class="number">0</span>, (sum, b) -&gt; sum + b.getWeight()), Integer::sum);</div></pre></td></tr></table></figure>
<p>Though the explicit map-reduce form is more readable and therefore should usually be preferred. The generalized form is provided for cases where significant work can be optimized away by combining mapping and reducing into a single function.</p>
<h1 id="Mutable-reduction"><a href="#Mutable-reduction" class="headerlink" title="Mutable reduction"></a>Mutable reduction</h1><p>A mutable reduction operation accumulates input elements into a mutable result container, such as a <code>Collection</code> or <code>StringBuilder</code>, as it processes the elements in the stream.</p>
<p>If we wanted to take a stream of strings and concatenate them into a single long string, we could achieve this with ordinary reduction:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String concatenated = strings.reduce(<span class="string">""</span>, String::concat)</div></pre></td></tr></table></figure>
<p>We would get the desired result, and it would even work in parallel. However, we might not be happy about the performance! Such an implementation would do a great deal of string copying, and the run time would be <code>O(n^2)</code> in the number of characters. A more performant approach would be to accumulate the results into a <code>StringBuilder</code>, which is a mutable container for accumulating strings. We can use the same technique to parallelize mutable reduction as we do with ordinary reduction.</p>
<p>The mutable reduction operation is called <code>collect()</code>, as it collects together the desired results into a result container such as a <code>Collection</code>. </p>
<p>A collect operation requires three functions: </p>
<ul>
<li>a supplier function to construct new instances of the result container</li>
<li>an accumulator function to incorporate an input element into a result container</li>
<li>and a combining function to merge the contents of one result container into another. The form of this is very similar to the general form of ordinary reduction:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;R&gt; <span class="function">R <span class="title">collect</span><span class="params">(Supplier&lt;R&gt; supplier,</span></span></div><div class="line">              BiConsumer&lt;R, ? <span class="keyword">super</span> T&gt; accumulator,</div><div class="line">              BiConsumer&lt;R, R&gt; combiner);</div></pre></td></tr></table></figure>
<p>As with <code>reduce()</code>, a benefit of expressing collect in this abstract way is that it is directly amenable to parallelization: we can accumulate partial results in parallel and then combine them, so long as the accumulation and combining functions satisfy the appropriate requirements. For example, to collect the String representations of the elements in a stream into an ArrayList, we could write the obvious sequential for-each form:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (T element : stream) &#123;</div><div class="line">    strings.add(element.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Or we could use a parallelizable collect form:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; strings = stream.collect(() -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;(),</div><div class="line">                                        (c, e) -&gt; c.add(e.toString()),</div><div class="line">                                        (c1, c2) -&gt; c1.addAll(c2));</div></pre></td></tr></table></figure>
<p>or, pulling the mapping operation out of the accumulator function, we could express it more succinctly as:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; strings = stream.map(Object::toString)</div><div class="line">                              .collect(ArrayList::<span class="keyword">new</span>, ArrayList::add, ArrayList::addAll);</div></pre></td></tr></table></figure>
<p>Here, our supplier is just the ArrayList constructor, the accumulator adds the stringified element to an ArrayList, and the combiner simply uses addAll to copy the strings from one container into the other.</p>
<p>The three aspects of collect – <code>supplier</code>, <code>accumulator</code>, and <code>combiner</code> – are tightly coupled. We can use the abstraction of a <code>Collector</code> to capture all three aspects. The above example for collecting strings into a List can be rewritten using a standard <code>Collector</code> as:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; strings = stream.map(Object::toString)</div><div class="line">                            .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>Packaging mutable reductions into a Collector has another advantage: <code>composability</code>. The class Collectors contains a number of predefined factories for collectors, including combinators that transform one collector into another. For example, suppose we have a collector that computes the sum of the salaries of a stream of employees, as follows:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collector&lt;Employee, ?, Integer&gt; summingSalaries = Collectors.summingInt(Employee::getSalary);</div></pre></td></tr></table></figure>
<p>(The ? for the second type parameter merely indicates that we don’t care about the intermediate representation used by this collector.) If we wanted to create a collector to tabulate the sum of salaries by department, we could reuse summingSalaries using groupingBy:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;Department, Integer&gt; salariesByDept = </div><div class="line">        employees.stream()</div><div class="line">        .collect(Collectors.groupingBy(Employee::getDepartment, summingSalaries));</div></pre></td></tr></table></figure>
<p>As with the regular reduction operation, <code>collect()</code> operations can only be parallelized if appropriate conditions are met. For any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result p that is the result of any series of accumulator and combiner invocations, p must be equivalent to <code>combiner.apply(p, supplier.get())</code>.</p>
<p>Further, however the computation is split, it must produce an equivalent result. For any input elements t1 and t2, the results r1 and r2 in the computation below must be equivalent:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A a1 = supplier.get();</div><div class="line">accumulator.accept(a1, t1);</div><div class="line">accumulator.accept(a1, t2);</div><div class="line">R r1 = finisher.apply(a1);  <span class="comment">// result without splitting</span></div><div class="line"></div><div class="line">A a2 = supplier.get();</div><div class="line">accumulator.accept(a2, t1);</div><div class="line">A a3 = supplier.get();</div><div class="line">accumulator.accept(a3, t2);</div><div class="line">R r2 = finisher.apply(combiner.apply(a2, a3));  <span class="comment">// result with splitting</span></div></pre></td></tr></table></figure>
<p>Here, equivalence generally means according to <code>Object.equals(Object)</code>. but in some cases equivalence may be relaxed to account for differences in order.</p>
<h1 id="Reduction-concurrency-and-ordering"><a href="#Reduction-concurrency-and-ordering" class="headerlink" title="Reduction, concurrency, and ordering"></a>Reduction, concurrency, and ordering</h1><p>With some complex reduction operations, for example a collect() that produces a Map, such as:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;Buyer, List&lt;Transaction&gt;&gt; salesByBuyer = </div><div class="line">                txns.parallelStream()</div><div class="line">                    .collect(Collectors.groupingBy(Transaction::getBuyer));</div></pre></td></tr></table></figure>
<p>It may actually be counterproductive to perform the operation in parallel. This is because the combining step (merging one Map into another by key) can be expensive for some Map implementations.</p>
<p>Suppose, however, that the result container used in this reduction was a concurrently modifiable collection – such as a <code>ConcurrentHashMap</code>. In that case, the parallel invocations of the accumulator could actually deposit their results concurrently into the same shared result container, eliminating the need for the combiner to merge distinct result containers. This potentially provides a boost to the parallel execution performance. We call this a <code>concurrent reduction</code>.</p>
<p>A Collector that supports concurrent reduction is marked with the <code>Collector.Characteristics.CONCURRENT</code> characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The <code>Stream.collect(Collector)</code> implementation will only perform a concurrent reduction if</p>
<ul>
<li>The stream is parallel;</li>
<li>The collector has the <code>Collector.Characteristics.CONCURRENT</code> characteristic, and;</li>
<li>Either the stream is unordered, or the collector has the <code>Collector.Characteristics.UNORDERED</code> characteristic.</li>
</ul>
<p>You can ensure the stream is unordered by using the BaseStream.unordered() method. For example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;Buyer, List&lt;Transaction&gt;&gt; salesByBuyer = txns.parallelStream()</div><div class="line">               .unordered()</div><div class="line">               .collect(groupingByConcurrent(Transaction::getBuyer));</div></pre></td></tr></table></figure>
<p>(where <code>Collectors.groupingByConcurrent(java.util.function.Function&lt;? super T, ? extends K&gt;)</code> is the concurrent equivalent of groupingBy).</p>
<p>Note that if it is important that the elements for a given key appear in the order they appear in the source, then we cannot use a concurrent reduction, as ordering is one of the casualties of concurrent insertion. We would then be constrained to implement either a sequential reduction or a merge-based parallel reduction.</p>
<h1 id="Associativity"><a href="#Associativity" class="headerlink" title="Associativity"></a>Associativity</h1><p>An operator or function op is associative if the following holds:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a op b) op c == a op (b op c)</div></pre></td></tr></table></figure>
<p>The importance of this to parallel evaluation can be seen if we expand this to four terms:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a op b op c op d == (a op b) op (c op d)</div></pre></td></tr></table></figure>
<p>So we can evaluate <code>(a op b)</code> in parallel with (c op d), and then invoke op on the results.</p>
<p>Examples of associative operations include numeric addition, min, and max, and string concatenation.</p>
<h1 id="Low-level-stream-construction"><a href="#Low-level-stream-construction" class="headerlink" title="Low-level stream construction"></a>Low-level stream construction</h1><p>So far, all the stream examples have used methods like <code>Collection.stream()</code> or <code>Arrays.stream(Object[])</code> to obtain a stream. How are those stream-bearing methods implemented?</p>
<blockquote>
<p>The class <code>StreamSupport</code> has a number of low-level methods for creating a stream, all using some form of a <code>Spliterator</code>. A <code>spliterator</code> is the parallel analogue of an Iterator; it describes a (possibly infinite) collection of elements, with support for sequentially advancing, bulk traversal, and splitting off some portion of the input into another spliterator which can be processed in parallel. At the lowest level, all streams are driven by a spliterator.</p>
</blockquote>
<p>There are a number of implementation choices in implementing a spliterator, nearly all of which are tradeoffs between simplicity of implementation and runtime performance of streams using that spliterator. </p>
<p>The simplest, but least performant, way to create a spliterator is to create one from an iterator using <code>Spliterators.spliteratorUnknownSize(java.util.Iterator, int)</code>. While such a spliterator will work, it will likely offer poor parallel performance, since we have lost sizing information (how big is the underlying data set), as well as being constrained to a simplistic splitting algorithm.</p>
<p>A higher-quality spliterator will provide <code>balanced and known-size splits</code>, <code>accurate sizing information</code>, and <code>a number of other characteristics of the spliterator or data that can be used by implementations to optimize execution</code>.</p>
<p>Spliterators for mutable data sources have an additional challenge; timing of binding to the data, since the data could change between the time the spliterator is created and the time the stream pipeline is executed. Ideally, a spliterator for a stream would report a characteristic of <code>IMMUTABLE</code> or <code>CONCURRENT</code>; if not it should be late-binding. If a source cannot directly supply a recommended spliterator, it may indirectly supply a spliterator using a <code>Supplier</code>, and construct a stream via the <code>Supplier-accepting</code> versions of <code>stream()</code>. The spliterator is obtained from the supplier only after the terminal operation of the stream pipeline commences.</p>
<p>These requirements significantly reduce the scope of potential interference between mutations of the stream source and execution of stream pipelines. Streams based on spliterators with the desired characteristics, or those using the Supplier-based factory forms, are immune to modifications of the data source prior to commencement of the terminal operation (provided the behavioral parameters to the stream operations meet the required criteria for non-interference and statelessness). See Non-Interference for more details.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java - String Formatting]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/04/java/Java-String-Formatting/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">System.out.println(String.format(<span class="string">"Int: %d"</span>, <span class="number">100</span>));</div><div class="line">System.out.println(String.format(<span class="string">"Int: %08d"</span>, <span class="number">100</span>));  <span class="comment">// 00000100</span></div><div class="line"></div><div class="line">System.out.println(String.format(<span class="string">"Float: %f"</span>, <span class="number">100.111</span>));  <span class="comment">// 100.111000</span></div><div class="line">System.out.println(String.format(<span class="string">"Float: %.2f"</span>, <span class="number">100.111</span>));  <span class="comment">// 100.11</span></div><div class="line"></div><div class="line">System.out.println(String.format(<span class="string">"String: %s"</span>, <span class="string">"a string"</span>));</div><div class="line"></div><div class="line">Date today = <span class="keyword">new</span> Date();</div><div class="line">System.out.println(String.format(<span class="string">"Date: %tD"</span>, today));  <span class="comment">// Date: 04/06/15</span></div><div class="line">System.out.println(String.format(<span class="string">"Date mm/dd/yy: %tm/%td/%ty"</span>, today, today, today));  <span class="comment">// Date mm/dd/yy: 04/06/15</span></div><div class="line">System.out.println(String.format(<span class="string">"Date: %tc"</span>, today));  <span class="comment">// Date: Mon Apr 06 09:10:47 PDT 2015</span></div></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Lambda Expression]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/01/java/java%208/lambda/Java-8-Lambda-Expression/</url>
      <content type="html"><![CDATA[<p><a href="http://examples.javacodegeeks.com/java-basics/lambdas/java-8-lambda-expressions-tutorial/" target="_blank" rel="external">http://examples.javacodegeeks.com/java-basics/lambdas/java-8-lambda-expressions-tutorial/</a></p>
<h1 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas?"></a>Lambdas?</h1><p>A Lambda, in general, is <code>a function that expects and accepts input parameters and produce output results</code> (it may also produce some collateral changes).</p>
<p>Java offers Lambdas as one of its main new features since Java 8.</p>
<blockquote>
<p>A Lambda is an instance of a <code>functional interface</code> (until Java 8, these were called <code>single abstract method interfaces</code>, SAM interfaces, like <code>Runnable</code>, <code>Comparator</code> or <code>Callable</code>) and with Java supporting them, it is possible to pass functions around like we are used to do with parameters and data in general.</p>
</blockquote>
<p>Before, we used <code>anonymous inner classes</code> to instantiate objects of functional interfaces, with Lambdas, this can be simplified. It is possible to annotate these functional interfaces using the new annotation <code>@FunctionalInterface</code>.</p>
<a id="more"></a>
<h1 id="How-do-they-look-like-in-Java"><a href="#How-do-they-look-like-in-Java" class="headerlink" title="How do they look like in Java"></a>How do they look like in Java</h1><p>Basically, they are composed of </p>
<ul>
<li><code>an arguments section</code> that can be empty, containing 0, 1 or more input parameters</li>
<li><code>an arrow (-&gt;)</code> </li>
<li>and <code>a body</code> that can be almost any kind of Java piece of code.</li>
</ul>
<p>These are valid examples in pseudo code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(argument) -&gt; &#123; body &#125; // just one input parameter</div><div class="line">(argument1, argument2...) -&gt; &#123; body &#125; // more than one input parameter</div></pre></td></tr></table></figure></p>
<p>And in Java:</p>
<ul>
<li><code>(x, y) -&gt; x + y;</code> in this example we have two input parameters and one output composed of the adition of both of them.</li>
<li><code>Arrays.asList( &quot;1&quot;, &quot;2&quot;, &quot;3&quot; ).forEach( e -&gt; System.out.println( e ) );</code> in this case, we are using as input parameter every single element of the list and the action to be executed is to print them out in the console.</li>
</ul>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p><a href="http://www.importnew.com/11908.html" target="_blank" rel="external">http://www.importnew.com/11908.html</a></p>
<p><a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="external">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html</a></p>
<!-- more -->
<h2 id="Why-Lambda-Expression"><a href="#Why-Lambda-Expression" class="headerlink" title="Why Lambda Expression?"></a>Why Lambda Expression?</h2><p>Lambda表达式（也称为闭包）是整个Java 8 发行版中最受期待的在Java语言层面上的改变，Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中），或者把代码看成数据.</p>
<p>One issue with anonymous classes is that if the implementation of your anonymous class is very simple, such as an interface that contains only one method, then the syntax of anonymous classes may seem unwieldy and unclear. In these cases, you’re usually trying to pass functionality as an argument to another method, such as what action should be taken when someone clicks a button. Lambda expressions enable you to do this, to <code>treat functionality as method argument</code>, or <code>code as data</code>.</p>
<p>The biggest pain point for anonymous classes is bulkiness. They have what we might call a “vertical problem”: the ActionListener instance from section 1 uses five lines of source code to encapsulate a single aspect of behavior.</p>
<p>Lambda expressions are anonymous methods, aimed at addressing the “vertical problem” by replacing the machinery of anonymous inner classes with a lighter-weight mechanism.</p>
<p>Here are some examples of lambda expressions:</p>
<ul>
<li>(int x, int y) -&gt; x + y</li>
<li>() -&gt; 42</li>
<li>(String s) -&gt; { System.out.println(s); }</li>
</ul>
<h1 id="Functional-interface"><a href="#Functional-interface" class="headerlink" title="Functional interface"></a>Functional interface</h1><blockquote>
<p>Conceptually, a <code>functional interface</code> has exactly one abstract method. A functional interface can be implicitly converted to a lambda expression.</p>
</blockquote>
<hr>
<blockquote>
<p>Because a functional interface contains only one abstract method, you can omit the name of that method when you implement it. To do this, instead of using an anonymous class expression, you use a lambda expression, which is highlighted in the following method invocations:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// With anonymous class</span></div><div class="line">printPersons(</div><div class="line">    roster,</div><div class="line">    <span class="keyword">new</span> CheckPerson() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> p.getGender() == Person.Sex.MALE</div><div class="line">                &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">                &amp;&amp; p.getAge() &lt;= <span class="number">25</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// With lambda expression</span></div><div class="line">printPersons(</div><div class="line">    roster,</div><div class="line">    (Person p) -&gt; p.getGender() == Person.Sex.MALE</div><div class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></div><div class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>To illustrate, here is a sampling of some of the functional interfaces already in Java SE 7 that are well-suited for being used with the new language features; the examples that follow illustrate the use of a few of them.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- java.lang.Runnable</div><div class="line">- java.util.concurrent.Callable</div><div class="line">- java.security.PrivilegedAction</div><div class="line">- java.util.Comparator</div><div class="line">- java.io.FileFilter</div><div class="line">- java.beans.PropertyChangeListener</div></pre></td></tr></table></figure>
<p>In addition, Java SE 8 adds a new package, <strong><em>java.util.function</em></strong>, which contains functional interfaces that are expected to be commonly used, such as:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- Predicate&lt;T&gt; -- a <span class="keyword">boolean</span>-valued property of an object</div><div class="line">- Function&lt;T,R&gt; -- a function transforming a T to a R</div><div class="line">- Consumer&lt;T&gt; -- an action to be performed on an object</div><div class="line">- Supplier&lt;T&gt; -- <span class="function">provide an instance of a <span class="title">T</span> <span class="params">(such as a factory)</span></span></div><div class="line">- UnaryOperator&lt;T&gt; -- a function from T to T</div><div class="line">- BinaryOperator&lt;T&gt; -- a function <span class="title">from</span> <span class="params">(T, T)</span> to T</div></pre></td></tr></table></figure>
<p>在实际使用过程中，函数式接口是容易出错的：如有某个人在接口定义中增加了另一个方法，这时，这个接口就不再是函数式的了，并且编译过程也会失败。为了克服函数式接口的这种脆弱性并且能够明确声明接口作为函数式接口的意图，Java 8增加了一种特殊的注解 <strong><em>@FunctionalInterface</em></strong> （Java 8 中所有类库的已有接口都添加了@FunctionalInterface注解）。让我们看一下这种函数式接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Functional</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要记住的一件事是：默认方法 (default method) 与静态方法 (static method) 并不影响函数式接口的契约，可以任意使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionalDefaultMethods</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;            </div><div class="line">    &#125;        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Runnable-Lambda"><a href="#Runnable-Lambda" class="headerlink" title="Runnable Lambda"></a>Runnable Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Hello World 1"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Runnable r2 = () -&gt; System.out.println(<span class="string">"Hello World 2"</span>);</div><div class="line"></div><div class="line">        r1.run();</div><div class="line">        r2.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runnable <span class="title">toDo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> () -&gt; &#123;</div><div class="line">        System.out.println(<span class="string">"later....."</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Runnable r = toDo();</div><div class="line">r.run();</div></pre></td></tr></table></figure>
<h2 id="Comparator-Lambda"><a href="#Comparator-Lambda" class="headerlink" title="Comparator Lambda"></a>Comparator Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> lambda;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Bowen Li on 12/22/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorLambda</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        List&lt;Person&gt; list = Person.createShortList();</div><div class="line"></div><div class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> p1.name.compareTo(p2.name);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        list.forEach(p -&gt; System.out.println(p));</div><div class="line"></div><div class="line">        <span class="comment">// ASC</span></div><div class="line">        Collections.sort(list, (Person p1, Person p2) -&gt;</div><div class="line">                p1.age - p2.age);</div><div class="line">        list.forEach(p -&gt; System.out.println(p));</div><div class="line"></div><div class="line">        <span class="comment">// DESC</span></div><div class="line">        Collections.sort(list, (Person p1, Person p2) -&gt;</div><div class="line">                p2.age - p1.age);</div><div class="line">        list.forEach(p -&gt; System.out.println(p));</div><div class="line">        </div><div class="line">        Comparator&lt;String&gt; c = (String s1, String s2) -&gt; s1.compareToIgnoreCase(s2);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    Gender gender;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">createShortList</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Emma"</span>, <span class="number">16</span>));</div><div class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="number">24</span>));</div><div class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Hillary"</span>, <span class="number">20</span>));</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.join(<span class="string">":"</span>, name, String.valueOf(age));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> Gender &#123;</div><div class="line">    Male, Female</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Functional Interface]]></title>
      <url>https://phoenixjiangnan.github.io/2016/02/01/java/java%208/lambda/Java-8-Functional-Interface/</url>
      <content type="html"><![CDATA[<h1 id="Java-8-Built-in-Interface-Summary"><a href="#Java-8-Built-in-Interface-Summary" class="headerlink" title="Java 8 Built-in Interface    Summary"></a>Java 8 Built-in Interface    Summary</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">Java 8 functional interface summary</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;T&gt;</div><div class="line"><span class="comment">// An operation that accepts a single input argument and returns no result.</span></div><div class="line">BiConsumer&lt;T,U&gt;	</div><div class="line"><span class="comment">// An operation that accepts two input arguments and returns no result.</span></div><div class="line"></div><div class="line"><span class="comment">//--------------</span></div><div class="line">Function&lt;T,R&gt;</div><div class="line"><span class="comment">// A function that accepts one argument and produces a result.</span></div><div class="line">BiFunction&lt;T,U,R&gt;</div><div class="line"><span class="comment">// A function that accepts two arguments and produces a result.</span></div><div class="line"></div><div class="line"><span class="comment">//--------------</span></div><div class="line">UnaryOperator&lt;T&gt;</div><div class="line"><span class="comment">// An operation on a single operand that produces a result of the same type as its operand.</span></div><div class="line">BinaryOperator&lt;T&gt;</div><div class="line"><span class="comment">// An operation upon two operands of the same type, producing a result of the same type as the operands.</span></div><div class="line"></div><div class="line"><span class="comment">//--------------</span></div><div class="line">Predicate&lt;T&gt;</div><div class="line"><span class="comment">// A predicate (boolean-valued function) of one argument.</span></div><div class="line">BiPredicate&lt;T,U&gt;</div><div class="line"><span class="comment">// A predicate (boolean-valued function) of two arguments.</span></div><div class="line"></div><div class="line"><span class="comment">//--------------</span></div><div class="line">Supplier&lt;T&gt;</div><div class="line"><span class="comment">// A supplier of results.</span></div><div class="line">BooleanSupplier</div><div class="line"><span class="comment">// A supplier of boolean-valued results.</span></div></pre></td></tr></table></figure>
<h1 id="What-is-a-functional-interface"><a href="#What-is-a-functional-interface" class="headerlink" title="What is a functional interface"></a>What is a functional interface</h1><ul>
<li>java.lang.Runnable</li>
<li>java.util.Comparator</li>
<li>java.util.concurrent.Callable. </li>
</ul>
<p>There is some common feature among the stated interfaces and that feature is they have <code>only one method declared in their interface definition</code>. There are lot more such interfaces in JDK and also lot more created by java developers. These interfaces are also called <code>Single Abstract Method interfaces (SAM Interfaces)</code>. And a popular way in which these are used is by creating Anonymous Inner classes using these interfaces, something like:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousInnerClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"A thread running ..."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;).start();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>With Java 8 the same concept of SAM interfaces is recreated and are called <code>Functional interfaces</code>. These can be represented using <code>Lambda expressions</code>, <code>Method reference</code> and <code>constructor references</code>.</p>
<p>There’s an annotation introduced- <code>@FunctionalInterface</code> which can be used for compiler level errors when the interface you have annotated is not a valid <code>Functional Interface</code>. Lets try to have a look at a simple functional interface with only one abstract method:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleFuncInterface</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The interface can also declare the abstract methods from the <code>java.lang.Object</code> class, but still the interface can be called as a <code>Functional Interface</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleFuncInterface</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
<p>Once you add another abstract method to the interface then the compiler/IDE will flag it as an error.</p>
<blockquote>
<p>Interface can extend another interface and in case the Interface it is extending in functional and it doesn’t declare any new abstract methods then the new interface is also functional. But an interface can have one abstract method and any number of default methods and the interface would still be called an functional interface. </p>
</blockquote>
<p>To get an idea of default methods please read here.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComplexFunctionalInterface</span> <span class="keyword">extends</span> <span class="title">SimpleFuncInterface</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork1</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Doing work 1..."</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork2</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Doing work 2..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above interface is still a valid functional interface.<br>Now lets see how we can use the lambda expression as against anonymous inner class for implementing functional interfaces:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFunInterfaceTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    carryOutWork(<span class="keyword">new</span> SimpleFuncInterface() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Do work in SimpleFun impl..."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    carryOutWork(() -&gt; System.out.println(<span class="string">"Do work in lambda exp impl..."</span>));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">carryOutWork</span><span class="params">(SimpleFuncInterface sfi)</span></span>&#123;</div><div class="line">    sfi.doWork();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And the output would be …</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Do work in SimpleFun impl...</div><div class="line">Do work in lambda exp impl...</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Functional Interface - Consumer and BiConsumber]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/31/java/java%208/lambda/Java-8-Functional-Interface-Consumer-and-BiConsumber/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Represents an operation that accepts a single input argument and returns no result. </p>
<p>Unlike most other functional interfaces, Consumer is expected to operate via side-effects.</p>
<p>This is a functional interface whose functional method is accept(Object).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span> <span class="comment">// Performs this operation on the given argument.</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTests</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Consumer&lt;String&gt; c = (x) -&gt; System.out.println(x.toLowerCase());</div><div class="line">		c.accept(<span class="string">"JOHN"</span>);</div><div class="line"></div><div class="line">		Consumer&lt;Integer&gt; con = (x) -&gt; &#123;</div><div class="line">			System.out.println(x + <span class="number">10</span>);</div><div class="line">			System.out.println(x - <span class="number">10</span>);</div><div class="line">		&#125;;</div><div class="line">		con.accept(<span class="number">10</span>);</div><div class="line"></div><div class="line"></div><div class="line">		BiConsumer&lt;String, String&gt; bc = (x, y) -&gt; &#123; System.out.println(x + y);&#125;;</div><div class="line">		bc.accept(<span class="string">"1"</span>, <span class="string">"2"</span>);</div><div class="line"></div><div class="line"></div><div class="line">		List&lt;Person&gt; plist = Arrays.asList(<span class="keyword">new</span> Person(<span class="string">"John"</span>), <span class="keyword">new</span> Person(<span class="string">"Emma"</span>));</div><div class="line"></div><div class="line">		acceptAllEmployee(plist, p -&gt; System.out.println(p.name));</div><div class="line">		acceptAllEmployee(plist, p -&gt; &#123;p.name = <span class="string">"unknown"</span>;&#125;);</div><div class="line">		acceptAllEmployee(plist, p -&gt; System.out.println(p.name));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acceptAllEmployee</span><span class="params">(List&lt;Person&gt; plist, Consumer&lt;Person&gt; con)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Person p : plist) &#123;</div><div class="line">			con.accept(p);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Functional Interface - Supplier]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/31/java/java%208/lambda/Java-8-Functional-Interface-Supplier/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Represents a supplier of results.<br>There is no requirement that a new or distinct result be returned each time the supplier is invoked.</p>
<p>This is a functional interface whose functional method is <code>get()</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">T <span class="title">get</span><span class="params">()</span> <span class="comment">//Gets a result.</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierTests</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Supplier&lt;String&gt; supp = () -&gt; <span class="string">"string"</span>;</div><div class="line">		System.out.println(supp.get());</div><div class="line"></div><div class="line">		Supplier&lt;Integer&gt; supp2 = () -&gt; <span class="number">6</span>;</div><div class="line">		System.out.println(supp2.get());</div><div class="line"></div><div class="line">		Person p = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</div><div class="line">		Person p1 = get(() -&gt; p);</div><div class="line">		Person p2 = get(() -&gt; p);</div><div class="line">		System.out.println(p1.equals(p2));	<span class="comment">// true</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">get</span><span class="params">(Supplier&lt;Person&gt; supp)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> supp.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Initiated..."</span> + name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Functional Interface - Function and BiFunction]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/31/java/java%208/lambda/Java-8-Functional-Interface-Function-and-BiFunction/</url>
      <content type="html"><![CDATA[<h1 id="Function-interface"><a href="#Function-interface" class="headerlink" title="Function interface"></a>Function interface</h1><p>This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Represents a function that accepts one argument and produces a result.</p>
<p>This is a functional interface whose functional method is <code>apply(Object)</code>.</p>
<p>Function interface has two methods:</p>
<ul>
<li><code>R apply(T t)</code> – Compute the result of applying the function to the input argument</li>
<li><code>default &lt;V&gt; Function&lt;T,V&gt; andThen(Function&lt;? super R,? extends V&gt; after)</code> – Combine with another function returning a function which performs both functions.</li>
</ul>
<blockquote>
<p>Function interface is uses in cases where you want to encapsulate some code into a method which accepts some value as an input parameter and then returns another value after performing required operations on the input. The input parameter type and the return type of the method can either be same or different.</p>
</blockquote>
<a id="more"></a>
<p>Lets look at an API which accepts an implementation of Function interface:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo</span> </span>&#123;</div><div class="line">    <span class="comment">//API which accepts an implementation of Function interface</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyTheValue</span><span class="params">(<span class="keyword">int</span> value, Function&lt;Integer, Integer&gt; func)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> newValue = func.apply(value);</div><div class="line">        </div><div class="line">        <span class="comment">// Do some operations using the new value.</span></div><div class="line">        </div><div class="line">        System.out.println(newValue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now lets look at the code which invokes this API:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> incr = <span class="number">20</span>;</div><div class="line">  <span class="keyword">int</span> myNumber = <span class="number">10</span>;</div><div class="line">  modifyTheValue(myNumber, val-&gt; val + incr);</div><div class="line">  myNumber = <span class="number">15</span>;</div><div class="line">  modifyTheValue(myNumber, val-&gt; val * <span class="number">10</span>);</div><div class="line">  modifyTheValue(myNumber, val-&gt; val - <span class="number">100</span>);</div><div class="line">  modifyTheValue(myNumber, val-&gt; <span class="string">"somestring"</span>.length() + val - <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
<h1 id="BiFunction-interface"><a href="#BiFunction-interface" class="headerlink" title="BiFunction interface"></a>BiFunction interface</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">R</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Represents a function that accepts two arguments and produces a result. This is the two-arity specialization of Function.</p>
<p>This is a functional interface whose functional method is <code>apply(Object, Object)</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Function&lt;Integer, Integer&gt; func = x -&gt; x + <span class="number">10</span>;</div><div class="line">		System.out.println(func.apply(<span class="number">6</span>));</div><div class="line"></div><div class="line">		BiFunction&lt;Integer, String, Integer&gt; func2 = (x, y) -&gt; x + Integer.parseInt(y);</div><div class="line">		System.out.println(func2.apply(<span class="number">1</span>, <span class="string">"5"</span>));</div><div class="line">    </div><div class="line">    </div><div class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</div><div class="line">        String result = calculator.calc((a, b) -&gt; <span class="string">": "</span> + (a * b), <span class="number">3</span>, <span class="number">5</span>);</div><div class="line">        System.out.println(result); <span class="comment">// : </span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">calc</span><span class="params">(BiFunction&lt;Integer, Integer, String&gt; bi, Integer i1, Integer i2)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> bi.apply(i1, i2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">    Function&lt;Integer, Integer&gt; lambda = value -&gt; value * <span class="number">2</span>;</div><div class="line">    List&lt;Integer&gt; doubled = numbers.stream()</div><div class="line">            .map(lambda)</div><div class="line">            .collect(java.util.stream.Collectors.toList();</div><div class="line">    </div><div class="line">    System.out.println(doubled);</div><div class="line">    <span class="comment">// 2, 4, 6, 8, 10, ...</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Functional Interface - Predicate and BiPredicate]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/31/java/java%208/lambda/Java-8-Functional-Interface-Predicate-and-BiPredicate/</url>
      <content type="html"><![CDATA[<h1 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h1><p>Represents a predicate (boolean-valued function) of one argument.</p>
<p>This is a functional interface whose functional method is test(Object).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span></span>;  <span class="comment">// Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another.</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt;	<span class="title">isEqual</span><span class="params">(Object targetRef)</span></span>;  <span class="comment">// Returns a predicate that tests if two arguments are equal according to Objects.equals(Object, Object).</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span></span>;  <span class="comment">// Returns a predicate that represents the logical negation of this predicate.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span></span>;  <span class="comment">// Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span>	<span class="title">test</span><span class="params">(T t)</span></span>;  <span class="comment">//Evaluates this predicate on the given argument.</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Real-Example-How-to-use-Predicate-on-a-collection"><a href="#Real-Example-How-to-use-Predicate-on-a-collection" class="headerlink" title="Real Example: How to use Predicate on a collection"></a>Real Example: How to use Predicate on a collection</h1><p>To demonstrate, we have an Employee class as below:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, Integer age, String gender, String fName, String lName)</span></span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">       <span class="keyword">this</span>.age = age;</div><div class="line">       <span class="keyword">this</span>.gender = gender;</div><div class="line">       <span class="keyword">this</span>.firstName = fName;</div><div class="line">       <span class="keyword">this</span>.lastName = lName;</div><div class="line">   &#125;</div><div class="line">     </div><div class="line">   <span class="keyword">private</span> Integer id;</div><div class="line">   <span class="keyword">private</span> Integer age;</div><div class="line">   <span class="keyword">private</span> String gender;</div><div class="line">   <span class="keyword">private</span> String firstName;</div><div class="line">   <span class="keyword">private</span> String lastName;</div><div class="line"> </div><div class="line">   <span class="comment">//Please generate Getter and Setters</span></div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id.toString()+<span class="string">" - "</span>+<span class="keyword">this</span>.age.toString(); <span class="comment">//To change body of generated methods, choose Tools | Templates.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
<p>Now above Employee class has some basic attributes i.e. id, name, gender and age. Let’s build some predicates for them:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeePredicates</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Employee&gt; <span class="title">isAdultMale</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p -&gt; p.getAge() &gt; <span class="number">21</span> &amp;&amp; p.getGender().equalsIgnoreCase(<span class="string">"M"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Employee&gt; <span class="title">isAdultFemale</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p -&gt; p.getAge() &gt; <span class="number">18</span> &amp;&amp; p.getGender().equalsIgnoreCase(<span class="string">"F"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Employee&gt; <span class="title">isAgeMoreThan</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p -&gt; p.getAge() &gt; age;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Employee&gt; <span class="title">filterEmployees</span> <span class="params">(List&lt;Employee&gt; employees, Predicate&lt;Employee&gt; predicate)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> employees.stream().filter( predicate ).collect(Collectors.&lt;Employee&gt;toList());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You see I have created another utility method <code>filterEmployees()</code> as well. It is basically to make code clean and less repetitive. So, in this function we pass the list of employees and we pass a predicate, then this function will return a new collection of employees satisfying the condition mentioned in parameter predicate.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEmployeePredicates</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1</span>,<span class="number">23</span>,<span class="string">"M"</span>,<span class="string">"Rick"</span>,<span class="string">"Beethovan"</span>);</div><div class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="number">2</span>,<span class="number">13</span>,<span class="string">"F"</span>,<span class="string">"Martina"</span>,<span class="string">"Hengis"</span>);</div><div class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="number">3</span>,<span class="number">43</span>,<span class="string">"M"</span>,<span class="string">"Ricky"</span>,<span class="string">"Martin"</span>);</div><div class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="number">4</span>,<span class="number">26</span>,<span class="string">"M"</span>,<span class="string">"Jon"</span>,<span class="string">"Lowman"</span>);</div><div class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="number">5</span>,<span class="number">19</span>,<span class="string">"F"</span>,<span class="string">"Cristine"</span>,<span class="string">"Maria"</span>);</div><div class="line">        Employee e6 = <span class="keyword">new</span> Employee(<span class="number">6</span>,<span class="number">15</span>,<span class="string">"M"</span>,<span class="string">"David"</span>,<span class="string">"Feezor"</span>);</div><div class="line">        Employee e7 = <span class="keyword">new</span> Employee(<span class="number">7</span>,<span class="number">68</span>,<span class="string">"F"</span>,<span class="string">"Melissa"</span>,<span class="string">"Roy"</span>);</div><div class="line">        Employee e8 = <span class="keyword">new</span> Employee(<span class="number">8</span>,<span class="number">79</span>,<span class="string">"M"</span>,<span class="string">"Alex"</span>,<span class="string">"Gussin"</span>);</div><div class="line">        Employee e9 = <span class="keyword">new</span> Employee(<span class="number">9</span>,<span class="number">15</span>,<span class="string">"F"</span>,<span class="string">"Neetu"</span>,<span class="string">"Singh"</span>);</div><div class="line">        Employee e10 = <span class="keyword">new</span> Employee(<span class="number">10</span>,<span class="number">45</span>,<span class="string">"M"</span>,<span class="string">"Naveen"</span>,<span class="string">"Jain"</span>);</div><div class="line">         </div><div class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</div><div class="line">        employees.addAll(Arrays.asList(<span class="keyword">new</span> Employee[]&#123;e1,e2,e3,e4,e5,e6,e7,e8,e9,e10&#125;));</div><div class="line">                </div><div class="line">        System.out.println(filterEmployees(employees, isAdultMale()));</div><div class="line">        System.out.println(filterEmployees(employees, isAdultFemale()));</div><div class="line">        System.out.println(filterEmployees(employees, isAgeMoreThan(<span class="number">35</span>)));</div><div class="line">         </div><div class="line">        <span class="comment">//Employees other than above collection of "isAgeMoreThan(35)" can be get using negate()</span></div><div class="line">        System.out.println(filterEmployees(employees, isAgeMoreThan(<span class="number">35</span>).negate()));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">Output:</div></pre></td></tr></table></figure>
<p>[1 - 23, 3 - 43, 4 - 26, 8 - 79, 10 - 45]<br>[5 - 19, 7 - 68]<br>[3 - 43, 7 - 68, 8 - 79, 10 - 45]<br>[1 - 23, 2 - 13, 4 - 26, 5 - 19, 6 - 15, 9 - 15]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">This is really a very good addition in java 8 and I am going to use it whenever I will get chance.</div><div class="line"></div><div class="line"></div><div class="line"># BiPredicate</div><div class="line"></div><div class="line">```java</div><div class="line">public class Main &#123;</div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    BiPredicate&lt;Integer, Integer&gt; bi = (x, y) -&gt; x &gt; y;</div><div class="line">    </div><div class="line">    BiPredicate&lt;Integer, Integer&gt; eq = (x, y) -&gt; x -2 &gt; y;</div><div class="line">    </div><div class="line">    System.out.println(bi.test(2, 3));  // false</div><div class="line">    System.out.println(bi.or(eq).test(2, 3));   // false</div><div class="line">    System.out.println(bi.or(eq).test(8, 3));   // true</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google Guava EventBus - an Easy and Elegant Way for Your Publisher - Subscriber Use Cases]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/29/java/guava/Guava-EventBus/</url>
      <content type="html"><![CDATA[<p><a href="http://tomaszdziurko.pl/2012/01/google-guava-eventbus-easy-elegant-publisher-subscriber-cases/" target="_blank" rel="external">http://tomaszdziurko.pl/2012/01/google-guava-eventbus-easy-elegant-publisher-subscriber-cases/</a></p>
<p>Google Guava in version number 10 introduced new package eventbus with a few very interesting classes to deal with listener (or publisher – subscriber) use case. Below I present my short introduction to EventBus class and its family.</p>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventBus()                                              # Creates a new EventBus named &quot;default&quot;.</div><div class="line">EventBus(String identifier)                             # Creates a new EventBus with the given identifier.</div><div class="line">EventBus(SubscriberExceptionHandler exceptionHandler)   # Creates a new EventBus with the given SubscriberExceptionHandler.</div></pre></td></tr></table></figure>
<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><p>To listen to some events we need a listener class. <code>Such class created in google-guava-way doesn&#39;t have to implement any particular interface or extend any specified class.</code> It can be any class with just one required element: a method marked with <code>@Subscribe</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> lastMessage = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(OurTestEvent event)</span> </span>&#123;</div><div class="line">        lastMessage = event.getMessage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLastMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastMessage;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>lastMessage</code> property is used in tests below to check if events were received successfully.</p>
<p>And of course we need an event class to send it around:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OurTestEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OurTestEvent</span><span class="params">(<span class="keyword">int</span> message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p>The best way to show something in action is to write some tests, so let’s see how simple usage of EventBus looks like:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldReceiveEvent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// given</span></div><div class="line">    EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"test"</span>);</div><div class="line">    EventListener listener = <span class="keyword">new</span> EventListener();</div><div class="line"></div><div class="line">    eventBus.register(listener);</div><div class="line"></div><div class="line">    <span class="comment">// when</span></div><div class="line">    eventBus.post(<span class="keyword">new</span> OurTestEvent(<span class="number">200</span>));</div><div class="line"></div><div class="line">    <span class="comment">// then</span></div><div class="line">    assertThat(listener.getLastMessage()).isEqualTo(<span class="number">200</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This test can not be simpler :) We create an EventBus instance and a listener class instance, then register listener and post new event. And of course this test passes :)</p>
<h3 id="MultiListener"><a href="#MultiListener" class="headerlink" title="MultiListener"></a>MultiListener</h3><p>Guava also allows to create listener that is reacting for many different events. We just need to annotate many methods with <code>@Subscribe</code> and that’s all:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleListener</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Integer lastInteger;</div><div class="line">    <span class="keyword">public</span> Long lastLong;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenInteger</span><span class="params">(Integer event)</span> </span>&#123;</div><div class="line">        lastInteger = event;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenLong</span><span class="params">(Long event)</span> </span>&#123;</div><div class="line">        lastLong = event;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLastInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastInteger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLastLong</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastLong;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>and a simple example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldReceiveMultipleEvents</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// given</span></div><div class="line">    EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"test"</span>);</div><div class="line">    MultipleListener multiListener = <span class="keyword">new</span> MultipleListener();</div><div class="line"></div><div class="line">    eventBus.register(multiListener);</div><div class="line"></div><div class="line">    <span class="comment">// when</span></div><div class="line">    eventBus.post(<span class="keyword">new</span> Integer(<span class="number">100</span>));</div><div class="line">    eventBus.post(<span class="keyword">new</span> Long(<span class="number">800</span>));</div><div class="line"></div><div class="line">    <span class="comment">// then</span></div><div class="line">    assertThat(multiListener.getLastInteger()).isEqualTo(<span class="number">100</span>);</div><div class="line">    assertThat(multiListener.getLastLong()).isEqualTo(<span class="number">800L</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We don’t have to implement multiple interfaces, Guava provides a nice and clean solution with one annotation.</p>
<h2 id="Beyond-the-basics"><a href="#Beyond-the-basics" class="headerlink" title="Beyond the basics"></a>Beyond the basics</h2><p>Now let’s analyze some more interesting features of EventBus.</p>
<h3 id="Dead-Event"><a href="#Dead-Event" class="headerlink" title="Dead Event"></a>Dead Event</h3><p>First unusal thing is a DeadEvent class, predefined event which is fired when we’ve posted any type of event but no one was there to receive it. To see how it works let’s create listener waiting for dead events:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Listener waiting for the event that any message was posted but not delivered to anyone</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadEventListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> notDelivered = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(DeadEvent event)</span> </span>&#123;</div><div class="line">        notDelivered = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNotDelivered</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> notDelivered;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>and test case showing how it works:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldDetectEventWithoutListeners</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// given</span></div><div class="line">    EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"test"</span>);</div><div class="line"></div><div class="line">    DeadEventListener deadEventListener = <span class="keyword">new</span> DeadEventListener();</div><div class="line">    eventBus.register(deadEventListener);</div><div class="line"></div><div class="line">    <span class="comment">// when</span></div><div class="line">    eventBus.post(<span class="keyword">new</span> OurTestEvent(<span class="number">200</span>));</div><div class="line"></div><div class="line">    assertThat(deadEventListener.isNotDelivered()).isTrue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So if there was no listener waiting for event which was posted, EventBus fires DeadEvent so we could do something or at least add info to log files to be aware that such situation occured.</p>
<h3 id="Events-hierarchy"><a href="#Events-hierarchy" class="headerlink" title="Events hierarchy"></a>Events hierarchy</h3><p>Another interesting feature is that listeners can leverage existing events hierarchy. So if Listener A is waiting for events A, and event A has a subclass named B, this listener will receive both type of events: A and B. This can be presented with short example. Let’s create two listeners, one listening for Number class events and second one for Integer (which in case you didn’t know is a subclass of Number :) ):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Number lastMessage;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(Number integer)</span> </span>&#123;</div><div class="line">        lastMessage = integer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Number <span class="title">getLastMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastMessage;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer lastMessage;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        lastMessage = integer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLastMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastMessage;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And a test method showing this feauture:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldGetEventsFromSubclass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// given</span></div><div class="line">    EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"test"</span>);</div><div class="line">    IntegerListener integerListener = <span class="keyword">new</span> IntegerListener();</div><div class="line">    NumberListener numberListener = <span class="keyword">new</span> NumberListener();</div><div class="line">    eventBus.register(integerListener);</div><div class="line">    eventBus.register(numberListener);</div><div class="line"></div><div class="line">    <span class="comment">// when</span></div><div class="line">    eventBus.post(<span class="keyword">new</span> Integer(<span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="comment">// then</span></div><div class="line">    assertThat(integerListener.getLastMessage()).isEqualTo(<span class="number">100</span>);</div><div class="line">    assertThat(numberListener.getLastMessage()).isEqualTo(<span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    eventBus.post(<span class="keyword">new</span> Long(<span class="number">200L</span>));</div><div class="line"></div><div class="line">    <span class="comment">// then</span></div><div class="line">    <span class="comment">// this one should has the old value as it listens only for Integers</span></div><div class="line">    assertThat(integerListener.getLastMessage()).isEqualTo(<span class="number">100</span>);</div><div class="line">    assertThat(numberListener.getLastMessage()).isEqualTo(<span class="number">200L</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In this method we see that first event (new Integer(100)) is received by both listeners, but second one (new Long(200L)) reaches only NumberListener as Integer one isn’t created for this type of events.</p>
<p>This feature can be used to create more generic listeners listening for a broader range of events and more detailed ones for specific purposes.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this post I’ve presented some features of less known fragment of Guava Library, an EventBus class. It’s a very elegant and easy to apply solution when you need to listen for some events and publish them without creating sophisticated classes and interfaces hierarchy. And finally, this class is next good reason to add Guava to dependencies in your project :)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Logging]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/26/best%20practices/Logging/</url>
      <content type="html"><![CDATA[<h2 id="Apache-log4j-and-commons-logging"><a href="#Apache-log4j-and-commons-logging" class="headerlink" title="Apache log4j and commons-logging"></a>Apache log4j and commons-logging</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger s_logger = Logger.getLogger(FileStoreMonitor.class);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> Log m_logger = LogFactory.getLog( <span class="keyword">this</span>.getClass() );</div></pre></td></tr></table></figure>
<ul>
<li>commons-logging.jar是Apache Commons包中的一个，包含了日志功能必须使用的jar包。</li>
<li>这个包本身包含了一个Simple Logger，但是功能很弱。</li>
<li>在运行的时候它会先在CLASSPATH找log4j<ul>
<li>如果有，就使用log4j</li>
<li>如果没有，就找JDK1.4带的java.util.logging</li>
<li>如果也找不到就用Simple Logger</li>
</ul>
</li>
<li>commons-logging.jar的出现是一个历史的的遗留的遗憾，当初Apache极力游说Sun把log4j加入JDK1.4，然而JDK1.4项目小组已经接近发布JDK1.4产品的时间了，因此拒绝了Apache的要求，使用自己的java.util.logging，这个包的功能比log4j差的很远，性能也一般。</li>
<li><code>后来Apache就开发出来了commons-logging.jar用来兼容两个logger。因此用 commons-logging.jar写的log程序，底层的Logger是可以切换的,可以选择log4j，java.util.logging或者它自带的Simple Logger。</code></li>
<li>强烈建议使用log4j，因为log4j性能很高，log输出信息时间几乎等于System.out，而处理一条log平均只需要5us。</li>
</ul>
<p>总结区别 ：<code>Log4j是一个强大的日志实现的系统，而commons-logging是一个十分便利的接口，对Log4j的优势的封装，使日志实现系统与项目做到解耦的效果。</code></p>
<p>ps: commons-logging 不仅仅对Log4j的封装，还有着其他的日志实现系统，包括它自身简单的日志实现系统</p>
<a id="more"></a>
<h2 id="Log-levels"><a href="#Log-levels" class="headerlink" title="Log levels"></a>Log levels</h2><p>Some guidelines around logging levels:</p>
<ul>
<li>Error - something you’d want to be paged in the middle of the night about.</li>
<li>Warn - stuff that you’d want to be shown to you first when you’re trying to troubleshoot why server isn’t working.</li>
<li>Info - anything else that you want to be always on (since info is our default logging level).</li>
<li>Debug - additional information that you don’t normally want in the logs but want the option of turning on if a customer calls customer support.</li>
</ul>
<p>e</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo - Hexo commands]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/24/hexo/Hexo-Hexo-commands/</url>
      <content type="html"><![CDATA[<h2 id="Most-Frequently-Used"><a href="#Most-Frequently-Used" class="headerlink" title="Most Frequently Used"></a>Most Frequently Used</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; 		# new post</div><div class="line">hexo new page &quot;pageName&quot; 	# new page</div><div class="line">hexo generate 				# generate static pages to dir &apos;public&apos;</div><div class="line">hexo server 				# start on localhost with default port 4000</div><div class="line">hexo deploy 	# deploy to github or git</div></pre></td></tr></table></figure>
<h2 id="Chained-Commands"><a href="#Chained-Commands" class="headerlink" title="Chained Commands"></a>Chained Commands</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo d -g 	# generate content and deploy</div><div class="line">hexo s -g 	# generate content and preview locally</div></pre></td></tr></table></figure>
<h2 id="Brevity"><a href="#Brevity" class="headerlink" title="Brevity"></a>Brevity</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo - How to install Hexo on Mac with github pages]]></title>
      <url>https://phoenixjiangnan.github.io/2016/01/23/hexo/Hexo-How-to-install-hexo-on-Mac-with-github-pages/</url>
      <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">http://www.jianshu.com/p/05289a4bc8b2</a></li>
</ul>
<h2 id="1-Install-node-js-and-git"><a href="#1-Install-node-js-and-git" class="headerlink" title="1. Install node.js and git"></a>1. Install node.js and git</h2><ul>
<li>Install node.js from nodojs.org or by <a href="http://www.npmjs.com" target="_blank" rel="external">npm</a> (package manager)</li>
<li>Install git from <a href="http://git-scm.com" target="_blank" rel="external">git-scm.com</a></li>
</ul>
<h2 id="2-Setup-Github-and-ssh-keys"><a href="#2-Setup-Github-and-ssh-keys" class="headerlink" title="2. Setup Github and ssh keys"></a>2. Setup Github and ssh keys</h2><h3 id="Check-your-local-ssh-keys"><a href="#Check-your-local-ssh-keys" class="headerlink" title="Check your local ssh keys"></a>Check your local ssh keys</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/. ssh</div></pre></td></tr></table></figure>
<p>If it reports: No such file or directory, you are using git for the first time.</p>
<h3 id="Generate-new-ssh-key"><a href="#Generate-new-ssh-key" class="headerlink" title="Generate new ssh key"></a>Generate new ssh key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;email@host.com&quot;</div></pre></td></tr></table></figure>
<p>it will show</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair....</div><div class="line">Enter passphrase...  # enter your passphrase</div><div class="line">Enger same passphrase again:  #enter it again</div></pre></td></tr></table></figure>
<h3 id="Add-the-ssh-key-to-github"><a href="#Add-the-ssh-key-to-github" class="headerlink" title="Add the ssh key to github"></a>Add the ssh key to github</h3><p>Add the key in .ssh/id_rsa.pub file to your github account</p>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>If succeed, it should show </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is xxxx</div><div class="line">Are you sure you want to continue connecting (yes/no)?  # yes</div></pre></td></tr></table></figure>
<p>Finally, it shows</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<h3 id="Setup-user-account"><a href="#Setup-user-account" class="headerlink" title="Setup user account"></a>Setup user account</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;email@host.com&quot;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="3-Install-Hexo-on-mac"><a href="#3-Install-Hexo-on-mac" class="headerlink" title="3. Install Hexo on mac"></a>3. Install Hexo on mac</h2><h3 id="Install-Hexo-on-your-mac"><a href="#Install-Hexo-on-your-mac" class="headerlink" title="Install Hexo on your mac"></a>Install Hexo on your mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli --save</div><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
<h3 id="Init-Hexo-to-a-dir"><a href="#Init-Hexo-to-a-dir" class="headerlink" title="Init Hexo to a dir"></a>Init Hexo to a dir</h3><p>Create a dir to hold Hexo for blogging, and Hexo will generate all static files automatically to that dir</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your_dir</div><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<h3 id="Start-Hexo"><a href="#Start-Hexo" class="headerlink" title="Start Hexo"></a>Start Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<h3 id="Deploy-Hexo-to-github"><a href="#Deploy-Hexo-to-github" class="headerlink" title="Deploy Hexo to github"></a>Deploy Hexo to github</h3><p>Before running this, you need to look at the later section of how to configure Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>It may shows the following error:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: github</div></pre></td></tr></table></figure>
<p>That’s because you don’t the deployer plug. Install one by running</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>One problem I ran into is, once when I ran the above command, console reported some weird errors complaining about headers. After a while, I figured out I typed Chinese’s ‘-‘ instead of English’s ‘-‘…</p>
<h2 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>And add the following to Hexo’s _config.yml file</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div></pre></td></tr></table></figure>
<h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>And add the following to Hexo’s _config.yml file</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<h2 id="Hexo-theme-next"><a href="#Hexo-theme-next" class="headerlink" title="Hexo theme - next"></a>Hexo theme - next</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h2 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div><div class="line">npm install hexo-cli --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-generator-feed --save</div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div><div class="line">npm install hexo-generator-search --save</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h2 id="My-Hexo-template"><a href="#My-Hexo-template" class="headerlink" title="My Hexo template"></a>My Hexo template</h2><ul>
<li>Keep in mind that Hexo and Next will both evolve. So next time when setting up config, be cautious and not to just copy and past the following config files.</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> Bowen<span class="string">'s blog</span></div><div class="line">subtitle: keep learning</div><div class="line">description: keep learning</div><div class="line">author: Bowen</div><div class="line">email: </div><div class="line">language: en</div><div class="line">timezone:</div><div class="line"></div><div class="line"># Avatar</div><div class="line">avatar: /avatar/avatar.jpg</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child<span class="string">' and root as '</span>/child/<span class="string">'</span></div><div class="line">url: http://phoenixjiangnan.github.io</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"></div><div class="line"># Archives</div><div class="line">## 2: Enable pagination</div><div class="line">## 1: Disable pagination</div><div class="line">## 0: Fully Disable</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"></div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Disqus</div><div class="line">disqus_shortname: bowensgithubblog</div><div class="line"></div><div class="line"></div><div class="line"># Markdown</div><div class="line">## https://github.com/chjj/marked</div><div class="line">markdown:</div><div class="line">  gfm: true</div><div class="line">  pedantic: false</div><div class="line">  sanitize: false</div><div class="line">  tables: true</div><div class="line">  breaks: true</div><div class="line">  smartLists: true</div><div class="line">  smartypants: true</div><div class="line"></div><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div><div class="line"></div><div class="line"></div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div><div class="line"></div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 20</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: next</div><div class="line"></div><div class="line"># Plugins</div><div class="line"># exclude_generator:</div><div class="line"># Plugins:</div><div class="line"># - hexo-generator-feed</div><div class="line"># - hexo-generator-sitemap</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/phoenixjiangnan/phoenixjiangnan.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h2 id="My-Next-template"><a href="#My-Next-template" class="headerlink" title="My Next template"></a>My Next template</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Site Information Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /favicon.ico</div><div class="line"></div><div class="line"># Set default keywords (Use a comma to separate)</div><div class="line">keywords: &quot;Hexo, Welcome to Bowen&apos;s Blog&quot;</div><div class="line"></div><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:</div><div class="line"></div><div class="line"># Specify the date when the site was setup</div><div class="line">#since: 2015</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Menu Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  about: /about</div><div class="line">  categories: /categories</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  # commonweal: /404.html</div><div class="line"></div><div class="line"></div><div class="line"># Enable/Disable menu icons.</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.</div><div class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes</div><div class="line">scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">#scheme: Pisces</div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Font Settings</div><div class="line"># - Find fonts on Google Fonts (https://www.google.com/fonts)</div><div class="line"># - All fonts set here will have the following styles:</div><div class="line">#     light, light italic, normal, normal intalic, bold, bold italic</div><div class="line"># - Be aware that setting too much fonts will cause site running slowly</div><div class="line"># - Introduce in 5.0.1</div><div class="line"># ---------------------------------------------------------------</div><div class="line">font:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</div><div class="line">  host:</div><div class="line"></div><div class="line">  # Global font settings used on &lt;body&gt; element.</div><div class="line">  global:</div><div class="line">    # external: true will load this font family from host.</div><div class="line">    external: true</div><div class="line">    family: Lato</div><div class="line"></div><div class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  headings:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for posts</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  posts:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for Logo</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  # The `size` option use `px` as unit</div><div class="line">  logo:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line">    size:</div><div class="line"></div><div class="line">  # Font settings for &lt;code&gt; and code blocks.</div><div class="line">  codes:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Sidebar Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line"># Social Links</div><div class="line"># Key is the link label showing to end users.</div><div class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</div><div class="line">social:</div><div class="line">  GitHub: https://github.com/phoenixjiangnan</div><div class="line"></div><div class="line"></div><div class="line"># Social Links Icons</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.</div><div class="line">#   When an globe mask icon presenting up means that the item has no mapping icon.</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings.</div><div class="line">  # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  Weibo: weibo</div><div class="line"></div><div class="line"></div><div class="line"># Sidebar Avatar</div><div class="line"># in theme directory(source/images): /images/avatar.jpg</div><div class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class="line">#avatar:</div><div class="line"></div><div class="line"></div><div class="line"># Table Of Contents in the Sidebar</div><div class="line">toc:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.</div><div class="line">  number: true</div><div class="line"></div><div class="line"></div><div class="line"># Creative Commons 4.0 International License.</div><div class="line"># http://creativecommons.org/</div><div class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class="line">#creative_commons: by-nc-sa</div><div class="line">#creative_commons:</div><div class="line"></div><div class="line"></div><div class="line">sidebar:</div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  # Sidebar Display, available value:</div><div class="line">  #  - post    expand on posts automatically. Default.</div><div class="line">  #  - always  expand for all pages automatically</div><div class="line">  #  - hide    expand only when click on the sidebar toggle icon.</div><div class="line">  #  - remove  Totally remove sidebar including sidebar toggler.</div><div class="line">  display: post</div><div class="line">  #display: always</div><div class="line">  #display: hide</div><div class="line">  #display: remove</div><div class="line"></div><div class="line"></div><div class="line"># Blogrolls</div><div class="line">#links_title: Links</div><div class="line">#links_layout: block</div><div class="line">#links_layout: inline</div><div class="line">#links:</div><div class="line">  #Title: http://example.com/</div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Misc Theme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Custom Logo.</div><div class="line"># !!Only available for Default Scheme currently.</div><div class="line"># Options:</div><div class="line">#   enabled: [true/false] - Replace with specific image</div><div class="line">#   image: url-of-image   - Images&apos;s url</div><div class="line">custom_logo:</div><div class="line">  enabled: false</div><div class="line">  image:</div><div class="line"></div><div class="line"></div><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: normal</div><div class="line"></div><div class="line"></div><div class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</div><div class="line">scroll_to_more: true</div><div class="line"></div><div class="line"></div><div class="line"># Automatically Excerpt. Not recommand.</div><div class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</div><div class="line">auto_excerpt:</div><div class="line">  enable: false</div><div class="line">  length: 150</div><div class="line"></div><div class="line"></div><div class="line"># Wechat Subscriber</div><div class="line">#wechat_subscriber:</div><div class="line">  #enabled: true</div><div class="line">  #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</div><div class="line">  #description: ex. subscribe to my blog by scanning my public wechat account</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># MathJax Support</div><div class="line">mathjax:</div><div class="line">  enable: false</div><div class="line">  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</div><div class="line"></div><div class="line"></div><div class="line"># Swiftype Search API Key</div><div class="line">#swiftype_key:</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">#baidu_analytics:</div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">#duoshuo_shortname:</div><div class="line"></div><div class="line"># Disqus</div><div class="line">#disqus_shortname:</div><div class="line"></div><div class="line"># Baidu Share</div><div class="line"># Available value:</div><div class="line">#    button | slide</div><div class="line">#baidushare:</div><div class="line">##  type: button</div><div class="line"></div><div class="line"># Share</div><div class="line">#jiathis:</div><div class="line">#add_this_id:</div><div class="line"></div><div class="line"># Share</div><div class="line">#duoshuo_share: true</div><div class="line"></div><div class="line"># Google Webmaster tools verification setting</div><div class="line"># See: https://www.google.com/webmasters/</div><div class="line">#google_site_verification:</div><div class="line"></div><div class="line"></div><div class="line"># Google Analytics</div><div class="line">#google_analytics:</div><div class="line"></div><div class="line"># CNZZ count</div><div class="line">#cnzz_siteid:</div><div class="line"></div><div class="line"></div><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: false</div><div class="line">  user_id: 0</div><div class="line">  #admin_nickname: Author</div><div class="line"></div><div class="line"></div><div class="line"># Facebook SDK Support.</div><div class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</div><div class="line">facebook_sdk:</div><div class="line">  enable: false</div><div class="line">  app_id:       #&lt;app_id&gt;</div><div class="line">  fb_admin:     #&lt;user_id&gt;</div><div class="line">  like_button:  #true</div><div class="line">  webmaster:    #true</div><div class="line"></div><div class="line"></div><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: false</div><div class="line">  app_id: #&lt;app_id&gt;</div><div class="line">  app_key: #&lt;app_key&gt;</div><div class="line"></div><div class="line"># Show PV/UV of the website/page with busuanzi.</div><div class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</div><div class="line">busuanzi_count:</div><div class="line">  # count values only if the other configs are false</div><div class="line">  enable: false</div><div class="line">  # custom uv span for the whole site</div><div class="line">  site_uv: true</div><div class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</div><div class="line">  site_uv_footer:</div><div class="line">  # custom pv span for the whole site</div><div class="line">  site_pv: true</div><div class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</div><div class="line">  site_pv_footer:</div><div class="line">  # custom pv span for one page only</div><div class="line">  page_pv: true</div><div class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</div><div class="line">  page_pv_footer:</div><div class="line"></div><div class="line"># Tencent analytics ID</div><div class="line"># tencent_analytics:</div><div class="line"></div><div class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class="line">baidu_push: false</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#! ---------------------------------------------------------------</div><div class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</div><div class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</div><div class="line">#! ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Motion</div><div class="line">use_motion: true</div><div class="line"></div><div class="line"># Fancybox</div><div class="line">fancybox: true</div><div class="line"></div><div class="line"></div><div class="line"># Script Vendors.</div><div class="line"># Set a CDN address for the vendor you want to customize.</div><div class="line"># For example</div><div class="line">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</div><div class="line"># Be aware that you should use the same version as internal ones to avoid potential problems.</div><div class="line">vendors:</div><div class="line">  # Internal path prefix. Please do not edit it.</div><div class="line">  _internal: vendors</div><div class="line"></div><div class="line">  # Internal version: 2.1.3</div><div class="line">  jquery:</div><div class="line"></div><div class="line">  # Internal version: 2.1.5</div><div class="line">  # http://fancyapps.com/fancybox/</div><div class="line">  fancybox:</div><div class="line">  fancybox_css:</div><div class="line"></div><div class="line">  # Internal version: 1.0.6</div><div class="line">  # https://github.com/ftlabs/fastclick</div><div class="line">  fastclick:</div><div class="line"></div><div class="line">  # Internal version: 1.9.7</div><div class="line">  # https://github.com/tuupola/jquery_lazyload</div><div class="line">  lazyload:</div><div class="line"></div><div class="line">  # Internal version: 1.2.1</div><div class="line">  # http://VelocityJS.org</div><div class="line">  velocity:</div><div class="line"></div><div class="line">  # Internal version: 1.2.1</div><div class="line">  # http://VelocityJS.org</div><div class="line">  velocity_ui:</div><div class="line"></div><div class="line">  # Internal version: 0.7.9</div><div class="line">  # https://faisalman.github.io/ua-parser-js/</div><div class="line">  ua_parser:</div><div class="line"></div><div class="line">  # Internal version: 4.4.0</div><div class="line">  # http://fontawesome.io/</div><div class="line">  fontawesome:</div><div class="line"></div><div class="line"></div><div class="line"># Assets</div><div class="line">css: css</div><div class="line">js: js</div><div class="line">images: images</div><div class="line"></div><div class="line"># Theme version</div><div class="line">version: 5.0.1</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data Strucutre - Array]]></title>
      <url>https://phoenixjiangnan.github.io/2015/04/08/data%20structures%20and%20algorithms/Array/</url>
      <content type="html"><![CDATA[<p>This tutorial is what I used to learn Java at the beginning. I still feel it’s useful though sometimes…</p>
<h2 id="one-dimendinal-array"><a href="#one-dimendinal-array" class="headerlink" title="one-dimendinal array"></a>one-dimendinal array</h2><p>Format 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TYPE[] NAME = <span class="keyword">new</span> TYPE[size];</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> arr[<span class="number">5</span>];</div></pre></td></tr></table></figure>
<p>Format 2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TYPE[] NAME = <span class="keyword">new</span> TYPE[] &#123;elem1, elem2, ...&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> arr1[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</div><div class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="two-dimensional-array"><a href="#two-dimensional-array" class="headerlink" title="two-dimensional array"></a>two-dimensional array</h2><p>Format 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TYPE[][] name = <span class="keyword">new</span> TYPE[row_size][col_size];</div><div class="line"></div><div class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> arr[<span class="number">3</span>][<span class="number">4</span>];</div></pre></td></tr></table></figure>
<p>Format 2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TYPE[][] name = <span class="keyword">new</span> TYPE[row_size][];</div><div class="line"></div><div class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> arr[<span class="number">3</span>][];</div><div class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div></pre></td></tr></table></figure>
<p>Format 3</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] arr= &#123; &#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
